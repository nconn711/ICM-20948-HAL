
IMU.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006c54  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002f0  08006df8  08006df8  00016df8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080070e8  080070e8  000201d8  2**0
                  CONTENTS
  4 .ARM          00000008  080070e8  080070e8  000170e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080070f0  080070f0  000201d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080070f0  080070f0  000170f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080070f4  080070f4  000170f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d8  20000000  080070f8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000002c  200001d8  080072d0  000201d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000204  080072d0  00020204  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009334  00000000  00000000  00020208  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001971  00000000  00000000  0002953c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000860  00000000  00000000  0002aeb0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000788  00000000  00000000  0002b710  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000138a5  00000000  00000000  0002be98  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000612f  00000000  00000000  0003f73d  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000685e2  00000000  00000000  0004586c  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000ade4e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003048  00000000  00000000  000adecc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001d8 	.word	0x200001d8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08006ddc 	.word	0x08006ddc

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001dc 	.word	0x200001dc
 80001dc:	08006ddc 	.word	0x08006ddc

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ce:	f1a4 0401 	sub.w	r4, r4, #1
 80003d2:	d1e9      	bne.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_uldivmod>:
 8000c58:	b953      	cbnz	r3, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5a:	b94a      	cbnz	r2, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bf08      	it	eq
 8000c60:	2800      	cmpeq	r0, #0
 8000c62:	bf1c      	itt	ne
 8000c64:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c68:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c6c:	f000 b972 	b.w	8000f54 <__aeabi_idiv0>
 8000c70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c78:	f000 f806 	bl	8000c88 <__udivmoddi4>
 8000c7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c84:	b004      	add	sp, #16
 8000c86:	4770      	bx	lr

08000c88 <__udivmoddi4>:
 8000c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c8c:	9e08      	ldr	r6, [sp, #32]
 8000c8e:	4604      	mov	r4, r0
 8000c90:	4688      	mov	r8, r1
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d14b      	bne.n	8000d2e <__udivmoddi4+0xa6>
 8000c96:	428a      	cmp	r2, r1
 8000c98:	4615      	mov	r5, r2
 8000c9a:	d967      	bls.n	8000d6c <__udivmoddi4+0xe4>
 8000c9c:	fab2 f282 	clz	r2, r2
 8000ca0:	b14a      	cbz	r2, 8000cb6 <__udivmoddi4+0x2e>
 8000ca2:	f1c2 0720 	rsb	r7, r2, #32
 8000ca6:	fa01 f302 	lsl.w	r3, r1, r2
 8000caa:	fa20 f707 	lsr.w	r7, r0, r7
 8000cae:	4095      	lsls	r5, r2
 8000cb0:	ea47 0803 	orr.w	r8, r7, r3
 8000cb4:	4094      	lsls	r4, r2
 8000cb6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cba:	0c23      	lsrs	r3, r4, #16
 8000cbc:	fbb8 f7fe 	udiv	r7, r8, lr
 8000cc0:	fa1f fc85 	uxth.w	ip, r5
 8000cc4:	fb0e 8817 	mls	r8, lr, r7, r8
 8000cc8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000ccc:	fb07 f10c 	mul.w	r1, r7, ip
 8000cd0:	4299      	cmp	r1, r3
 8000cd2:	d909      	bls.n	8000ce8 <__udivmoddi4+0x60>
 8000cd4:	18eb      	adds	r3, r5, r3
 8000cd6:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000cda:	f080 811b 	bcs.w	8000f14 <__udivmoddi4+0x28c>
 8000cde:	4299      	cmp	r1, r3
 8000ce0:	f240 8118 	bls.w	8000f14 <__udivmoddi4+0x28c>
 8000ce4:	3f02      	subs	r7, #2
 8000ce6:	442b      	add	r3, r5
 8000ce8:	1a5b      	subs	r3, r3, r1
 8000cea:	b2a4      	uxth	r4, r4
 8000cec:	fbb3 f0fe 	udiv	r0, r3, lr
 8000cf0:	fb0e 3310 	mls	r3, lr, r0, r3
 8000cf4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cf8:	fb00 fc0c 	mul.w	ip, r0, ip
 8000cfc:	45a4      	cmp	ip, r4
 8000cfe:	d909      	bls.n	8000d14 <__udivmoddi4+0x8c>
 8000d00:	192c      	adds	r4, r5, r4
 8000d02:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d06:	f080 8107 	bcs.w	8000f18 <__udivmoddi4+0x290>
 8000d0a:	45a4      	cmp	ip, r4
 8000d0c:	f240 8104 	bls.w	8000f18 <__udivmoddi4+0x290>
 8000d10:	3802      	subs	r0, #2
 8000d12:	442c      	add	r4, r5
 8000d14:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d18:	eba4 040c 	sub.w	r4, r4, ip
 8000d1c:	2700      	movs	r7, #0
 8000d1e:	b11e      	cbz	r6, 8000d28 <__udivmoddi4+0xa0>
 8000d20:	40d4      	lsrs	r4, r2
 8000d22:	2300      	movs	r3, #0
 8000d24:	e9c6 4300 	strd	r4, r3, [r6]
 8000d28:	4639      	mov	r1, r7
 8000d2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d2e:	428b      	cmp	r3, r1
 8000d30:	d909      	bls.n	8000d46 <__udivmoddi4+0xbe>
 8000d32:	2e00      	cmp	r6, #0
 8000d34:	f000 80eb 	beq.w	8000f0e <__udivmoddi4+0x286>
 8000d38:	2700      	movs	r7, #0
 8000d3a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d3e:	4638      	mov	r0, r7
 8000d40:	4639      	mov	r1, r7
 8000d42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d46:	fab3 f783 	clz	r7, r3
 8000d4a:	2f00      	cmp	r7, #0
 8000d4c:	d147      	bne.n	8000dde <__udivmoddi4+0x156>
 8000d4e:	428b      	cmp	r3, r1
 8000d50:	d302      	bcc.n	8000d58 <__udivmoddi4+0xd0>
 8000d52:	4282      	cmp	r2, r0
 8000d54:	f200 80fa 	bhi.w	8000f4c <__udivmoddi4+0x2c4>
 8000d58:	1a84      	subs	r4, r0, r2
 8000d5a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d5e:	2001      	movs	r0, #1
 8000d60:	4698      	mov	r8, r3
 8000d62:	2e00      	cmp	r6, #0
 8000d64:	d0e0      	beq.n	8000d28 <__udivmoddi4+0xa0>
 8000d66:	e9c6 4800 	strd	r4, r8, [r6]
 8000d6a:	e7dd      	b.n	8000d28 <__udivmoddi4+0xa0>
 8000d6c:	b902      	cbnz	r2, 8000d70 <__udivmoddi4+0xe8>
 8000d6e:	deff      	udf	#255	; 0xff
 8000d70:	fab2 f282 	clz	r2, r2
 8000d74:	2a00      	cmp	r2, #0
 8000d76:	f040 808f 	bne.w	8000e98 <__udivmoddi4+0x210>
 8000d7a:	1b49      	subs	r1, r1, r5
 8000d7c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d80:	fa1f f885 	uxth.w	r8, r5
 8000d84:	2701      	movs	r7, #1
 8000d86:	fbb1 fcfe 	udiv	ip, r1, lr
 8000d8a:	0c23      	lsrs	r3, r4, #16
 8000d8c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000d90:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d94:	fb08 f10c 	mul.w	r1, r8, ip
 8000d98:	4299      	cmp	r1, r3
 8000d9a:	d907      	bls.n	8000dac <__udivmoddi4+0x124>
 8000d9c:	18eb      	adds	r3, r5, r3
 8000d9e:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000da2:	d202      	bcs.n	8000daa <__udivmoddi4+0x122>
 8000da4:	4299      	cmp	r1, r3
 8000da6:	f200 80cd 	bhi.w	8000f44 <__udivmoddi4+0x2bc>
 8000daa:	4684      	mov	ip, r0
 8000dac:	1a59      	subs	r1, r3, r1
 8000dae:	b2a3      	uxth	r3, r4
 8000db0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000db4:	fb0e 1410 	mls	r4, lr, r0, r1
 8000db8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000dbc:	fb08 f800 	mul.w	r8, r8, r0
 8000dc0:	45a0      	cmp	r8, r4
 8000dc2:	d907      	bls.n	8000dd4 <__udivmoddi4+0x14c>
 8000dc4:	192c      	adds	r4, r5, r4
 8000dc6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000dca:	d202      	bcs.n	8000dd2 <__udivmoddi4+0x14a>
 8000dcc:	45a0      	cmp	r8, r4
 8000dce:	f200 80b6 	bhi.w	8000f3e <__udivmoddi4+0x2b6>
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	eba4 0408 	sub.w	r4, r4, r8
 8000dd8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000ddc:	e79f      	b.n	8000d1e <__udivmoddi4+0x96>
 8000dde:	f1c7 0c20 	rsb	ip, r7, #32
 8000de2:	40bb      	lsls	r3, r7
 8000de4:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000de8:	ea4e 0e03 	orr.w	lr, lr, r3
 8000dec:	fa01 f407 	lsl.w	r4, r1, r7
 8000df0:	fa20 f50c 	lsr.w	r5, r0, ip
 8000df4:	fa21 f30c 	lsr.w	r3, r1, ip
 8000df8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000dfc:	4325      	orrs	r5, r4
 8000dfe:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e02:	0c2c      	lsrs	r4, r5, #16
 8000e04:	fb08 3319 	mls	r3, r8, r9, r3
 8000e08:	fa1f fa8e 	uxth.w	sl, lr
 8000e0c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e10:	fb09 f40a 	mul.w	r4, r9, sl
 8000e14:	429c      	cmp	r4, r3
 8000e16:	fa02 f207 	lsl.w	r2, r2, r7
 8000e1a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e1e:	d90b      	bls.n	8000e38 <__udivmoddi4+0x1b0>
 8000e20:	eb1e 0303 	adds.w	r3, lr, r3
 8000e24:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000e28:	f080 8087 	bcs.w	8000f3a <__udivmoddi4+0x2b2>
 8000e2c:	429c      	cmp	r4, r3
 8000e2e:	f240 8084 	bls.w	8000f3a <__udivmoddi4+0x2b2>
 8000e32:	f1a9 0902 	sub.w	r9, r9, #2
 8000e36:	4473      	add	r3, lr
 8000e38:	1b1b      	subs	r3, r3, r4
 8000e3a:	b2ad      	uxth	r5, r5
 8000e3c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e40:	fb08 3310 	mls	r3, r8, r0, r3
 8000e44:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e48:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e4c:	45a2      	cmp	sl, r4
 8000e4e:	d908      	bls.n	8000e62 <__udivmoddi4+0x1da>
 8000e50:	eb1e 0404 	adds.w	r4, lr, r4
 8000e54:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000e58:	d26b      	bcs.n	8000f32 <__udivmoddi4+0x2aa>
 8000e5a:	45a2      	cmp	sl, r4
 8000e5c:	d969      	bls.n	8000f32 <__udivmoddi4+0x2aa>
 8000e5e:	3802      	subs	r0, #2
 8000e60:	4474      	add	r4, lr
 8000e62:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e66:	fba0 8902 	umull	r8, r9, r0, r2
 8000e6a:	eba4 040a 	sub.w	r4, r4, sl
 8000e6e:	454c      	cmp	r4, r9
 8000e70:	46c2      	mov	sl, r8
 8000e72:	464b      	mov	r3, r9
 8000e74:	d354      	bcc.n	8000f20 <__udivmoddi4+0x298>
 8000e76:	d051      	beq.n	8000f1c <__udivmoddi4+0x294>
 8000e78:	2e00      	cmp	r6, #0
 8000e7a:	d069      	beq.n	8000f50 <__udivmoddi4+0x2c8>
 8000e7c:	ebb1 050a 	subs.w	r5, r1, sl
 8000e80:	eb64 0403 	sbc.w	r4, r4, r3
 8000e84:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000e88:	40fd      	lsrs	r5, r7
 8000e8a:	40fc      	lsrs	r4, r7
 8000e8c:	ea4c 0505 	orr.w	r5, ip, r5
 8000e90:	e9c6 5400 	strd	r5, r4, [r6]
 8000e94:	2700      	movs	r7, #0
 8000e96:	e747      	b.n	8000d28 <__udivmoddi4+0xa0>
 8000e98:	f1c2 0320 	rsb	r3, r2, #32
 8000e9c:	fa20 f703 	lsr.w	r7, r0, r3
 8000ea0:	4095      	lsls	r5, r2
 8000ea2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ea6:	fa21 f303 	lsr.w	r3, r1, r3
 8000eaa:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000eae:	4338      	orrs	r0, r7
 8000eb0:	0c01      	lsrs	r1, r0, #16
 8000eb2:	fbb3 f7fe 	udiv	r7, r3, lr
 8000eb6:	fa1f f885 	uxth.w	r8, r5
 8000eba:	fb0e 3317 	mls	r3, lr, r7, r3
 8000ebe:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ec2:	fb07 f308 	mul.w	r3, r7, r8
 8000ec6:	428b      	cmp	r3, r1
 8000ec8:	fa04 f402 	lsl.w	r4, r4, r2
 8000ecc:	d907      	bls.n	8000ede <__udivmoddi4+0x256>
 8000ece:	1869      	adds	r1, r5, r1
 8000ed0:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000ed4:	d22f      	bcs.n	8000f36 <__udivmoddi4+0x2ae>
 8000ed6:	428b      	cmp	r3, r1
 8000ed8:	d92d      	bls.n	8000f36 <__udivmoddi4+0x2ae>
 8000eda:	3f02      	subs	r7, #2
 8000edc:	4429      	add	r1, r5
 8000ede:	1acb      	subs	r3, r1, r3
 8000ee0:	b281      	uxth	r1, r0
 8000ee2:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ee6:	fb0e 3310 	mls	r3, lr, r0, r3
 8000eea:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000eee:	fb00 f308 	mul.w	r3, r0, r8
 8000ef2:	428b      	cmp	r3, r1
 8000ef4:	d907      	bls.n	8000f06 <__udivmoddi4+0x27e>
 8000ef6:	1869      	adds	r1, r5, r1
 8000ef8:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000efc:	d217      	bcs.n	8000f2e <__udivmoddi4+0x2a6>
 8000efe:	428b      	cmp	r3, r1
 8000f00:	d915      	bls.n	8000f2e <__udivmoddi4+0x2a6>
 8000f02:	3802      	subs	r0, #2
 8000f04:	4429      	add	r1, r5
 8000f06:	1ac9      	subs	r1, r1, r3
 8000f08:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f0c:	e73b      	b.n	8000d86 <__udivmoddi4+0xfe>
 8000f0e:	4637      	mov	r7, r6
 8000f10:	4630      	mov	r0, r6
 8000f12:	e709      	b.n	8000d28 <__udivmoddi4+0xa0>
 8000f14:	4607      	mov	r7, r0
 8000f16:	e6e7      	b.n	8000ce8 <__udivmoddi4+0x60>
 8000f18:	4618      	mov	r0, r3
 8000f1a:	e6fb      	b.n	8000d14 <__udivmoddi4+0x8c>
 8000f1c:	4541      	cmp	r1, r8
 8000f1e:	d2ab      	bcs.n	8000e78 <__udivmoddi4+0x1f0>
 8000f20:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f24:	eb69 020e 	sbc.w	r2, r9, lr
 8000f28:	3801      	subs	r0, #1
 8000f2a:	4613      	mov	r3, r2
 8000f2c:	e7a4      	b.n	8000e78 <__udivmoddi4+0x1f0>
 8000f2e:	4660      	mov	r0, ip
 8000f30:	e7e9      	b.n	8000f06 <__udivmoddi4+0x27e>
 8000f32:	4618      	mov	r0, r3
 8000f34:	e795      	b.n	8000e62 <__udivmoddi4+0x1da>
 8000f36:	4667      	mov	r7, ip
 8000f38:	e7d1      	b.n	8000ede <__udivmoddi4+0x256>
 8000f3a:	4681      	mov	r9, r0
 8000f3c:	e77c      	b.n	8000e38 <__udivmoddi4+0x1b0>
 8000f3e:	3802      	subs	r0, #2
 8000f40:	442c      	add	r4, r5
 8000f42:	e747      	b.n	8000dd4 <__udivmoddi4+0x14c>
 8000f44:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f48:	442b      	add	r3, r5
 8000f4a:	e72f      	b.n	8000dac <__udivmoddi4+0x124>
 8000f4c:	4638      	mov	r0, r7
 8000f4e:	e708      	b.n	8000d62 <__udivmoddi4+0xda>
 8000f50:	4637      	mov	r7, r6
 8000f52:	e6e9      	b.n	8000d28 <__udivmoddi4+0xa0>

08000f54 <__aeabi_idiv0>:
 8000f54:	4770      	bx	lr
 8000f56:	bf00      	nop

08000f58 <Update_Quaternion>:


#include "AHRS_algorithm.h"

void Update_Quaternion(float* Acceleration, float* Gyroscope, float* Magnometer, float* Quaternion, float SamplePeriod, float Beta) {
 8000f58:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000f5c:	b0ba      	sub	sp, #232	; 0xe8
 8000f5e:	af00      	add	r7, sp, #0
 8000f60:	6278      	str	r0, [r7, #36]	; 0x24
 8000f62:	6239      	str	r1, [r7, #32]
 8000f64:	61fa      	str	r2, [r7, #28]
 8000f66:	61bb      	str	r3, [r7, #24]
 8000f68:	ed87 0a05 	vstr	s0, [r7, #20]
 8000f6c:	edc7 0a04 	vstr	s1, [r7, #16]
	float q1 = Quaternion[0], q2 = Quaternion[1], q3 = Quaternion[2], q4 = Quaternion[3];   // short name local variable for readability
 8000f70:	69bb      	ldr	r3, [r7, #24]
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8000f78:	69bb      	ldr	r3, [r7, #24]
 8000f7a:	685b      	ldr	r3, [r3, #4]
 8000f7c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8000f80:	69bb      	ldr	r3, [r7, #24]
 8000f82:	689b      	ldr	r3, [r3, #8]
 8000f84:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8000f88:	69bb      	ldr	r3, [r7, #24]
 8000f8a:	68db      	ldr	r3, [r3, #12]
 8000f8c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
	float ax = Acceleration[0], ay = Acceleration[1], az = Acceleration[2];
 8000f90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8000f98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f9a:	685b      	ldr	r3, [r3, #4]
 8000f9c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8000fa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fa2:	689b      	ldr	r3, [r3, #8]
 8000fa4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
	float gx = Gyroscope[0], gy = Gyroscope[1], gz = Gyroscope[2];
 8000fa8:	6a3b      	ldr	r3, [r7, #32]
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8000fb0:	6a3b      	ldr	r3, [r7, #32]
 8000fb2:	685b      	ldr	r3, [r3, #4]
 8000fb4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8000fb8:	6a3b      	ldr	r3, [r7, #32]
 8000fba:	689b      	ldr	r3, [r3, #8]
 8000fbc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
	float mx = Magnometer[0], my = Magnometer[1], mz = Magnometer[2];
 8000fc0:	69fb      	ldr	r3, [r7, #28]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8000fc8:	69fb      	ldr	r3, [r7, #28]
 8000fca:	685b      	ldr	r3, [r3, #4]
 8000fcc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8000fd0:	69fb      	ldr	r3, [r7, #28]
 8000fd2:	689b      	ldr	r3, [r3, #8]
 8000fd4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
	float _2q1my;
	float _2q1mz;
	float _2q2mx;
	float _4bx;
	float _4bz;
	float _2q1 = 2.0 * q1;
 8000fd8:	edd7 7a39 	vldr	s15, [r7, #228]	; 0xe4
 8000fdc:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8000fe0:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
	float _2q2 = 2.0 * q2;
 8000fe4:	edd7 7a38 	vldr	s15, [r7, #224]	; 0xe0
 8000fe8:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8000fec:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
	float _2q3 = 2.0 * q3;
 8000ff0:	edd7 7a37 	vldr	s15, [r7, #220]	; 0xdc
 8000ff4:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8000ff8:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8
	float _2q4 = 2.0 * q4;
 8000ffc:	edd7 7a36 	vldr	s15, [r7, #216]	; 0xd8
 8001000:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001004:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
	float _2q1q3 = 2.0 * q1 * q3;
 8001008:	f8d7 00e4 	ldr.w	r0, [r7, #228]	; 0xe4
 800100c:	f7ff faa4 	bl	8000558 <__aeabi_f2d>
 8001010:	4602      	mov	r2, r0
 8001012:	460b      	mov	r3, r1
 8001014:	f7ff f942 	bl	800029c <__adddf3>
 8001018:	4603      	mov	r3, r0
 800101a:	460c      	mov	r4, r1
 800101c:	4625      	mov	r5, r4
 800101e:	461c      	mov	r4, r3
 8001020:	f8d7 00dc 	ldr.w	r0, [r7, #220]	; 0xdc
 8001024:	f7ff fa98 	bl	8000558 <__aeabi_f2d>
 8001028:	4602      	mov	r2, r0
 800102a:	460b      	mov	r3, r1
 800102c:	4620      	mov	r0, r4
 800102e:	4629      	mov	r1, r5
 8001030:	f7ff faea 	bl	8000608 <__aeabi_dmul>
 8001034:	4603      	mov	r3, r0
 8001036:	460c      	mov	r4, r1
 8001038:	4618      	mov	r0, r3
 800103a:	4621      	mov	r1, r4
 800103c:	f7ff fdbc 	bl	8000bb8 <__aeabi_d2f>
 8001040:	4603      	mov	r3, r0
 8001042:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
	float _2q3q4 = 2.0 * q3 * q4;
 8001046:	f8d7 00dc 	ldr.w	r0, [r7, #220]	; 0xdc
 800104a:	f7ff fa85 	bl	8000558 <__aeabi_f2d>
 800104e:	4602      	mov	r2, r0
 8001050:	460b      	mov	r3, r1
 8001052:	f7ff f923 	bl	800029c <__adddf3>
 8001056:	4603      	mov	r3, r0
 8001058:	460c      	mov	r4, r1
 800105a:	4625      	mov	r5, r4
 800105c:	461c      	mov	r4, r3
 800105e:	f8d7 00d8 	ldr.w	r0, [r7, #216]	; 0xd8
 8001062:	f7ff fa79 	bl	8000558 <__aeabi_f2d>
 8001066:	4602      	mov	r2, r0
 8001068:	460b      	mov	r3, r1
 800106a:	4620      	mov	r0, r4
 800106c:	4629      	mov	r1, r5
 800106e:	f7ff facb 	bl	8000608 <__aeabi_dmul>
 8001072:	4603      	mov	r3, r0
 8001074:	460c      	mov	r4, r1
 8001076:	4618      	mov	r0, r3
 8001078:	4621      	mov	r1, r4
 800107a:	f7ff fd9d 	bl	8000bb8 <__aeabi_d2f>
 800107e:	4603      	mov	r3, r0
 8001080:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	float q1q1 = q1 * q1;
 8001084:	ed97 7a39 	vldr	s14, [r7, #228]	; 0xe4
 8001088:	edd7 7a39 	vldr	s15, [r7, #228]	; 0xe4
 800108c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001090:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
	float q1q2 = q1 * q2;
 8001094:	ed97 7a39 	vldr	s14, [r7, #228]	; 0xe4
 8001098:	edd7 7a38 	vldr	s15, [r7, #224]	; 0xe0
 800109c:	ee67 7a27 	vmul.f32	s15, s14, s15
 80010a0:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
	float q1q3 = q1 * q3;
 80010a4:	ed97 7a39 	vldr	s14, [r7, #228]	; 0xe4
 80010a8:	edd7 7a37 	vldr	s15, [r7, #220]	; 0xdc
 80010ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 80010b0:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
	float q1q4 = q1 * q4;
 80010b4:	ed97 7a39 	vldr	s14, [r7, #228]	; 0xe4
 80010b8:	edd7 7a36 	vldr	s15, [r7, #216]	; 0xd8
 80010bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80010c0:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
	float q2q2 = q2 * q2;
 80010c4:	ed97 7a38 	vldr	s14, [r7, #224]	; 0xe0
 80010c8:	edd7 7a38 	vldr	s15, [r7, #224]	; 0xe0
 80010cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80010d0:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
	float q2q3 = q2 * q3;
 80010d4:	ed97 7a38 	vldr	s14, [r7, #224]	; 0xe0
 80010d8:	edd7 7a37 	vldr	s15, [r7, #220]	; 0xdc
 80010dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80010e0:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
	float q2q4 = q2 * q4;
 80010e4:	ed97 7a38 	vldr	s14, [r7, #224]	; 0xe0
 80010e8:	edd7 7a36 	vldr	s15, [r7, #216]	; 0xd8
 80010ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 80010f0:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
	float q3q3 = q3 * q3;
 80010f4:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 80010f8:	edd7 7a37 	vldr	s15, [r7, #220]	; 0xdc
 80010fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001100:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c
	float q3q4 = q3 * q4;
 8001104:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 8001108:	edd7 7a36 	vldr	s15, [r7, #216]	; 0xd8
 800110c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001110:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78
	float q4q4 = q4 * q4;
 8001114:	ed97 7a36 	vldr	s14, [r7, #216]	; 0xd8
 8001118:	edd7 7a36 	vldr	s15, [r7, #216]	; 0xd8
 800111c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001120:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74

	// Normalise accelerometer measurement
	norm = (float)sqrt(ax * ax + ay * ay + az * az);
 8001124:	ed97 7a35 	vldr	s14, [r7, #212]	; 0xd4
 8001128:	edd7 7a35 	vldr	s15, [r7, #212]	; 0xd4
 800112c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001130:	edd7 6a34 	vldr	s13, [r7, #208]	; 0xd0
 8001134:	edd7 7a34 	vldr	s15, [r7, #208]	; 0xd0
 8001138:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800113c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001140:	edd7 6a33 	vldr	s13, [r7, #204]	; 0xcc
 8001144:	edd7 7a33 	vldr	s15, [r7, #204]	; 0xcc
 8001148:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800114c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001150:	ee17 0a90 	vmov	r0, s15
 8001154:	f7ff fa00 	bl	8000558 <__aeabi_f2d>
 8001158:	4603      	mov	r3, r0
 800115a:	460c      	mov	r4, r1
 800115c:	ec44 3b10 	vmov	d0, r3, r4
 8001160:	f005 fd30 	bl	8006bc4 <sqrt>
 8001164:	ec54 3b10 	vmov	r3, r4, d0
 8001168:	4618      	mov	r0, r3
 800116a:	4621      	mov	r1, r4
 800116c:	f7ff fd24 	bl	8000bb8 <__aeabi_d2f>
 8001170:	4603      	mov	r3, r0
 8001172:	673b      	str	r3, [r7, #112]	; 0x70
	if (norm == 0.0) return; // handle NaN
 8001174:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8001178:	eef5 7a40 	vcmp.f32	s15, #0.0
 800117c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001180:	f001 827e 	beq.w	8002680 <Update_Quaternion+0x1728>
	norm = 1 / norm;        // use reciprocal for division
 8001184:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001188:	ed97 7a1c 	vldr	s14, [r7, #112]	; 0x70
 800118c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001190:	edc7 7a1c 	vstr	s15, [r7, #112]	; 0x70
	ax *= norm;
 8001194:	ed97 7a35 	vldr	s14, [r7, #212]	; 0xd4
 8001198:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 800119c:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011a0:	edc7 7a35 	vstr	s15, [r7, #212]	; 0xd4
	ay *= norm;
 80011a4:	ed97 7a34 	vldr	s14, [r7, #208]	; 0xd0
 80011a8:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 80011ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011b0:	edc7 7a34 	vstr	s15, [r7, #208]	; 0xd0
	az *= norm;
 80011b4:	ed97 7a33 	vldr	s14, [r7, #204]	; 0xcc
 80011b8:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 80011bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011c0:	edc7 7a33 	vstr	s15, [r7, #204]	; 0xcc

	// Normalise magnetometer measurement
	norm = (float)sqrt(mx * mx + my * my + mz * mz);
 80011c4:	ed97 7a2f 	vldr	s14, [r7, #188]	; 0xbc
 80011c8:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 80011cc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80011d0:	edd7 6a2e 	vldr	s13, [r7, #184]	; 0xb8
 80011d4:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 80011d8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80011dc:	ee37 7a27 	vadd.f32	s14, s14, s15
 80011e0:	edd7 6a2d 	vldr	s13, [r7, #180]	; 0xb4
 80011e4:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 80011e8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80011ec:	ee77 7a27 	vadd.f32	s15, s14, s15
 80011f0:	ee17 0a90 	vmov	r0, s15
 80011f4:	f7ff f9b0 	bl	8000558 <__aeabi_f2d>
 80011f8:	4603      	mov	r3, r0
 80011fa:	460c      	mov	r4, r1
 80011fc:	ec44 3b10 	vmov	d0, r3, r4
 8001200:	f005 fce0 	bl	8006bc4 <sqrt>
 8001204:	ec54 3b10 	vmov	r3, r4, d0
 8001208:	4618      	mov	r0, r3
 800120a:	4621      	mov	r1, r4
 800120c:	f7ff fcd4 	bl	8000bb8 <__aeabi_d2f>
 8001210:	4603      	mov	r3, r0
 8001212:	673b      	str	r3, [r7, #112]	; 0x70
	if (norm == 0.0) return; // handle NaN
 8001214:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8001218:	eef5 7a40 	vcmp.f32	s15, #0.0
 800121c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001220:	f001 8230 	beq.w	8002684 <Update_Quaternion+0x172c>
	norm = 1 / norm;        // use reciprocal for division
 8001224:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001228:	ed97 7a1c 	vldr	s14, [r7, #112]	; 0x70
 800122c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001230:	edc7 7a1c 	vstr	s15, [r7, #112]	; 0x70
	mx *= norm;
 8001234:	ed97 7a2f 	vldr	s14, [r7, #188]	; 0xbc
 8001238:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 800123c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001240:	edc7 7a2f 	vstr	s15, [r7, #188]	; 0xbc
	my *= norm;
 8001244:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8001248:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 800124c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001250:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
	mz *= norm;
 8001254:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 8001258:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 800125c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001260:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4

	// Reference direction of Earth's magnetic field
	_2q1mx = 2.0 * q1 * mx;
 8001264:	f8d7 00e4 	ldr.w	r0, [r7, #228]	; 0xe4
 8001268:	f7ff f976 	bl	8000558 <__aeabi_f2d>
 800126c:	4602      	mov	r2, r0
 800126e:	460b      	mov	r3, r1
 8001270:	f7ff f814 	bl	800029c <__adddf3>
 8001274:	4603      	mov	r3, r0
 8001276:	460c      	mov	r4, r1
 8001278:	4625      	mov	r5, r4
 800127a:	461c      	mov	r4, r3
 800127c:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 8001280:	f7ff f96a 	bl	8000558 <__aeabi_f2d>
 8001284:	4602      	mov	r2, r0
 8001286:	460b      	mov	r3, r1
 8001288:	4620      	mov	r0, r4
 800128a:	4629      	mov	r1, r5
 800128c:	f7ff f9bc 	bl	8000608 <__aeabi_dmul>
 8001290:	4603      	mov	r3, r0
 8001292:	460c      	mov	r4, r1
 8001294:	4618      	mov	r0, r3
 8001296:	4621      	mov	r1, r4
 8001298:	f7ff fc8e 	bl	8000bb8 <__aeabi_d2f>
 800129c:	4603      	mov	r3, r0
 800129e:	66fb      	str	r3, [r7, #108]	; 0x6c
	_2q1my = 2.0 * q1 * my;
 80012a0:	f8d7 00e4 	ldr.w	r0, [r7, #228]	; 0xe4
 80012a4:	f7ff f958 	bl	8000558 <__aeabi_f2d>
 80012a8:	4602      	mov	r2, r0
 80012aa:	460b      	mov	r3, r1
 80012ac:	f7fe fff6 	bl	800029c <__adddf3>
 80012b0:	4603      	mov	r3, r0
 80012b2:	460c      	mov	r4, r1
 80012b4:	4625      	mov	r5, r4
 80012b6:	461c      	mov	r4, r3
 80012b8:	f8d7 00b8 	ldr.w	r0, [r7, #184]	; 0xb8
 80012bc:	f7ff f94c 	bl	8000558 <__aeabi_f2d>
 80012c0:	4602      	mov	r2, r0
 80012c2:	460b      	mov	r3, r1
 80012c4:	4620      	mov	r0, r4
 80012c6:	4629      	mov	r1, r5
 80012c8:	f7ff f99e 	bl	8000608 <__aeabi_dmul>
 80012cc:	4603      	mov	r3, r0
 80012ce:	460c      	mov	r4, r1
 80012d0:	4618      	mov	r0, r3
 80012d2:	4621      	mov	r1, r4
 80012d4:	f7ff fc70 	bl	8000bb8 <__aeabi_d2f>
 80012d8:	4603      	mov	r3, r0
 80012da:	66bb      	str	r3, [r7, #104]	; 0x68
	_2q1mz = 2.0 * q1 * mz;
 80012dc:	f8d7 00e4 	ldr.w	r0, [r7, #228]	; 0xe4
 80012e0:	f7ff f93a 	bl	8000558 <__aeabi_f2d>
 80012e4:	4602      	mov	r2, r0
 80012e6:	460b      	mov	r3, r1
 80012e8:	f7fe ffd8 	bl	800029c <__adddf3>
 80012ec:	4603      	mov	r3, r0
 80012ee:	460c      	mov	r4, r1
 80012f0:	4625      	mov	r5, r4
 80012f2:	461c      	mov	r4, r3
 80012f4:	f8d7 00b4 	ldr.w	r0, [r7, #180]	; 0xb4
 80012f8:	f7ff f92e 	bl	8000558 <__aeabi_f2d>
 80012fc:	4602      	mov	r2, r0
 80012fe:	460b      	mov	r3, r1
 8001300:	4620      	mov	r0, r4
 8001302:	4629      	mov	r1, r5
 8001304:	f7ff f980 	bl	8000608 <__aeabi_dmul>
 8001308:	4603      	mov	r3, r0
 800130a:	460c      	mov	r4, r1
 800130c:	4618      	mov	r0, r3
 800130e:	4621      	mov	r1, r4
 8001310:	f7ff fc52 	bl	8000bb8 <__aeabi_d2f>
 8001314:	4603      	mov	r3, r0
 8001316:	667b      	str	r3, [r7, #100]	; 0x64
	_2q2mx = 2.0 * q2 * mx;
 8001318:	f8d7 00e0 	ldr.w	r0, [r7, #224]	; 0xe0
 800131c:	f7ff f91c 	bl	8000558 <__aeabi_f2d>
 8001320:	4602      	mov	r2, r0
 8001322:	460b      	mov	r3, r1
 8001324:	f7fe ffba 	bl	800029c <__adddf3>
 8001328:	4603      	mov	r3, r0
 800132a:	460c      	mov	r4, r1
 800132c:	4625      	mov	r5, r4
 800132e:	461c      	mov	r4, r3
 8001330:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 8001334:	f7ff f910 	bl	8000558 <__aeabi_f2d>
 8001338:	4602      	mov	r2, r0
 800133a:	460b      	mov	r3, r1
 800133c:	4620      	mov	r0, r4
 800133e:	4629      	mov	r1, r5
 8001340:	f7ff f962 	bl	8000608 <__aeabi_dmul>
 8001344:	4603      	mov	r3, r0
 8001346:	460c      	mov	r4, r1
 8001348:	4618      	mov	r0, r3
 800134a:	4621      	mov	r1, r4
 800134c:	f7ff fc34 	bl	8000bb8 <__aeabi_d2f>
 8001350:	4603      	mov	r3, r0
 8001352:	663b      	str	r3, [r7, #96]	; 0x60
	hx = mx * q1q1 - _2q1my * q4 + _2q1mz * q3 + mx * q2q2 + _2q2 * my * q3 + _2q2 * mz * q4 - mx * q3q3 - mx * q4q4;
 8001354:	ed97 7a2f 	vldr	s14, [r7, #188]	; 0xbc
 8001358:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 800135c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001360:	edd7 6a1a 	vldr	s13, [r7, #104]	; 0x68
 8001364:	edd7 7a36 	vldr	s15, [r7, #216]	; 0xd8
 8001368:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800136c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001370:	edd7 6a19 	vldr	s13, [r7, #100]	; 0x64
 8001374:	edd7 7a37 	vldr	s15, [r7, #220]	; 0xdc
 8001378:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800137c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001380:	edd7 6a2f 	vldr	s13, [r7, #188]	; 0xbc
 8001384:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 8001388:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800138c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001390:	edd7 6a2b 	vldr	s13, [r7, #172]	; 0xac
 8001394:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8001398:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800139c:	edd7 7a37 	vldr	s15, [r7, #220]	; 0xdc
 80013a0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80013a4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80013a8:	edd7 6a2b 	vldr	s13, [r7, #172]	; 0xac
 80013ac:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 80013b0:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80013b4:	edd7 7a36 	vldr	s15, [r7, #216]	; 0xd8
 80013b8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80013bc:	ee37 7a27 	vadd.f32	s14, s14, s15
 80013c0:	edd7 6a2f 	vldr	s13, [r7, #188]	; 0xbc
 80013c4:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 80013c8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80013cc:	ee37 7a67 	vsub.f32	s14, s14, s15
 80013d0:	edd7 6a2f 	vldr	s13, [r7, #188]	; 0xbc
 80013d4:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 80013d8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80013dc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80013e0:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
	hy = _2q1mx * q4 + my * q1q1 - _2q1mz * q2 + _2q2mx * q3 - my * q2q2 + my * q3q3 + _2q3 * mz * q4 - my * q4q4;
 80013e4:	ed97 7a1b 	vldr	s14, [r7, #108]	; 0x6c
 80013e8:	edd7 7a36 	vldr	s15, [r7, #216]	; 0xd8
 80013ec:	ee27 7a27 	vmul.f32	s14, s14, s15
 80013f0:	edd7 6a2e 	vldr	s13, [r7, #184]	; 0xb8
 80013f4:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 80013f8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80013fc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001400:	edd7 6a19 	vldr	s13, [r7, #100]	; 0x64
 8001404:	edd7 7a38 	vldr	s15, [r7, #224]	; 0xe0
 8001408:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800140c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001410:	edd7 6a18 	vldr	s13, [r7, #96]	; 0x60
 8001414:	edd7 7a37 	vldr	s15, [r7, #220]	; 0xdc
 8001418:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800141c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001420:	edd7 6a2e 	vldr	s13, [r7, #184]	; 0xb8
 8001424:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 8001428:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800142c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001430:	edd7 6a2e 	vldr	s13, [r7, #184]	; 0xb8
 8001434:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8001438:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800143c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001440:	edd7 6a2a 	vldr	s13, [r7, #168]	; 0xa8
 8001444:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 8001448:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800144c:	edd7 7a36 	vldr	s15, [r7, #216]	; 0xd8
 8001450:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001454:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001458:	edd7 6a2e 	vldr	s13, [r7, #184]	; 0xb8
 800145c:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8001460:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001464:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001468:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
	_2bx = (float)sqrt(hx * hx + hy * hy);
 800146c:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8001470:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001474:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001478:	edd7 6a16 	vldr	s13, [r7, #88]	; 0x58
 800147c:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8001480:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001484:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001488:	ee17 0a90 	vmov	r0, s15
 800148c:	f7ff f864 	bl	8000558 <__aeabi_f2d>
 8001490:	4603      	mov	r3, r0
 8001492:	460c      	mov	r4, r1
 8001494:	ec44 3b10 	vmov	d0, r3, r4
 8001498:	f005 fb94 	bl	8006bc4 <sqrt>
 800149c:	ec54 3b10 	vmov	r3, r4, d0
 80014a0:	4618      	mov	r0, r3
 80014a2:	4621      	mov	r1, r4
 80014a4:	f7ff fb88 	bl	8000bb8 <__aeabi_d2f>
 80014a8:	4603      	mov	r3, r0
 80014aa:	657b      	str	r3, [r7, #84]	; 0x54
	_2bz = -_2q1mx * q3 + _2q1my * q2 + mz * q1q1 + _2q2mx * q4 - mz * q2q2 + _2q3 * my * q4 - mz * q3q3 + mz * q4q4;
 80014ac:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 80014b0:	eeb1 7a67 	vneg.f32	s14, s15
 80014b4:	edd7 7a37 	vldr	s15, [r7, #220]	; 0xdc
 80014b8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80014bc:	edd7 6a1a 	vldr	s13, [r7, #104]	; 0x68
 80014c0:	edd7 7a38 	vldr	s15, [r7, #224]	; 0xe0
 80014c4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80014c8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80014cc:	edd7 6a2d 	vldr	s13, [r7, #180]	; 0xb4
 80014d0:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 80014d4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80014d8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80014dc:	edd7 6a18 	vldr	s13, [r7, #96]	; 0x60
 80014e0:	edd7 7a36 	vldr	s15, [r7, #216]	; 0xd8
 80014e4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80014e8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80014ec:	edd7 6a2d 	vldr	s13, [r7, #180]	; 0xb4
 80014f0:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 80014f4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80014f8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80014fc:	edd7 6a2a 	vldr	s13, [r7, #168]	; 0xa8
 8001500:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8001504:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001508:	edd7 7a36 	vldr	s15, [r7, #216]	; 0xd8
 800150c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001510:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001514:	edd7 6a2d 	vldr	s13, [r7, #180]	; 0xb4
 8001518:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 800151c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001520:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001524:	edd7 6a2d 	vldr	s13, [r7, #180]	; 0xb4
 8001528:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 800152c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001530:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001534:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
	_4bx = 2.0 * _2bx;
 8001538:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 800153c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001540:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
	_4bz = 2.0 * _2bz;
 8001544:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8001548:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800154c:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48

	// Gradient decent algorithm corrective step
	s1 = -_2q3 * (2.0 * q2q4 - _2q1q3 - ax) + _2q2 * (2.0 * q1q2 + _2q3q4 - ay) - _2bz * q3 * (_2bx * (0.5 - q3q3 - q4q4) + _2bz * (q2q4 - q1q3) - mx) + (-_2bx * q4 + _2bz * q2) * (_2bx * (q2q3 - q1q4) + _2bz * (q1q2 + q3q4) - my) + _2bx * q3 * (_2bx * (q1q3 + q2q4) + _2bz * (0.5 - q2q2 - q3q3) - mz);
 8001550:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8001554:	eef1 7a67 	vneg.f32	s15, s15
 8001558:	ee17 3a90 	vmov	r3, s15
 800155c:	4618      	mov	r0, r3
 800155e:	f7fe fffb 	bl	8000558 <__aeabi_f2d>
 8001562:	4604      	mov	r4, r0
 8001564:	460d      	mov	r5, r1
 8001566:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 800156a:	f7fe fff5 	bl	8000558 <__aeabi_f2d>
 800156e:	4602      	mov	r2, r0
 8001570:	460b      	mov	r3, r1
 8001572:	f7fe fe93 	bl	800029c <__adddf3>
 8001576:	4602      	mov	r2, r0
 8001578:	460b      	mov	r3, r1
 800157a:	4690      	mov	r8, r2
 800157c:	4699      	mov	r9, r3
 800157e:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 8001582:	f7fe ffe9 	bl	8000558 <__aeabi_f2d>
 8001586:	4602      	mov	r2, r0
 8001588:	460b      	mov	r3, r1
 800158a:	4640      	mov	r0, r8
 800158c:	4649      	mov	r1, r9
 800158e:	f7fe fe83 	bl	8000298 <__aeabi_dsub>
 8001592:	4602      	mov	r2, r0
 8001594:	460b      	mov	r3, r1
 8001596:	4690      	mov	r8, r2
 8001598:	4699      	mov	r9, r3
 800159a:	f8d7 00d4 	ldr.w	r0, [r7, #212]	; 0xd4
 800159e:	f7fe ffdb 	bl	8000558 <__aeabi_f2d>
 80015a2:	4602      	mov	r2, r0
 80015a4:	460b      	mov	r3, r1
 80015a6:	4640      	mov	r0, r8
 80015a8:	4649      	mov	r1, r9
 80015aa:	f7fe fe75 	bl	8000298 <__aeabi_dsub>
 80015ae:	4602      	mov	r2, r0
 80015b0:	460b      	mov	r3, r1
 80015b2:	4620      	mov	r0, r4
 80015b4:	4629      	mov	r1, r5
 80015b6:	f7ff f827 	bl	8000608 <__aeabi_dmul>
 80015ba:	4603      	mov	r3, r0
 80015bc:	460c      	mov	r4, r1
 80015be:	4625      	mov	r5, r4
 80015c0:	461c      	mov	r4, r3
 80015c2:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 80015c6:	f7fe ffc7 	bl	8000558 <__aeabi_f2d>
 80015ca:	4680      	mov	r8, r0
 80015cc:	4689      	mov	r9, r1
 80015ce:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 80015d2:	f7fe ffc1 	bl	8000558 <__aeabi_f2d>
 80015d6:	4602      	mov	r2, r0
 80015d8:	460b      	mov	r3, r1
 80015da:	f7fe fe5f 	bl	800029c <__adddf3>
 80015de:	4602      	mov	r2, r0
 80015e0:	460b      	mov	r3, r1
 80015e2:	4692      	mov	sl, r2
 80015e4:	469b      	mov	fp, r3
 80015e6:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 80015ea:	f7fe ffb5 	bl	8000558 <__aeabi_f2d>
 80015ee:	4602      	mov	r2, r0
 80015f0:	460b      	mov	r3, r1
 80015f2:	4650      	mov	r0, sl
 80015f4:	4659      	mov	r1, fp
 80015f6:	f7fe fe51 	bl	800029c <__adddf3>
 80015fa:	4602      	mov	r2, r0
 80015fc:	460b      	mov	r3, r1
 80015fe:	4692      	mov	sl, r2
 8001600:	469b      	mov	fp, r3
 8001602:	f8d7 00d0 	ldr.w	r0, [r7, #208]	; 0xd0
 8001606:	f7fe ffa7 	bl	8000558 <__aeabi_f2d>
 800160a:	4602      	mov	r2, r0
 800160c:	460b      	mov	r3, r1
 800160e:	4650      	mov	r0, sl
 8001610:	4659      	mov	r1, fp
 8001612:	f7fe fe41 	bl	8000298 <__aeabi_dsub>
 8001616:	4602      	mov	r2, r0
 8001618:	460b      	mov	r3, r1
 800161a:	4640      	mov	r0, r8
 800161c:	4649      	mov	r1, r9
 800161e:	f7fe fff3 	bl	8000608 <__aeabi_dmul>
 8001622:	4602      	mov	r2, r0
 8001624:	460b      	mov	r3, r1
 8001626:	4620      	mov	r0, r4
 8001628:	4629      	mov	r1, r5
 800162a:	f7fe fe37 	bl	800029c <__adddf3>
 800162e:	4603      	mov	r3, r0
 8001630:	460c      	mov	r4, r1
 8001632:	4625      	mov	r5, r4
 8001634:	461c      	mov	r4, r3
 8001636:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 800163a:	edd7 7a37 	vldr	s15, [r7, #220]	; 0xdc
 800163e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001642:	ee17 0a90 	vmov	r0, s15
 8001646:	f7fe ff87 	bl	8000558 <__aeabi_f2d>
 800164a:	4680      	mov	r8, r0
 800164c:	4689      	mov	r9, r1
 800164e:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8001650:	f7fe ff82 	bl	8000558 <__aeabi_f2d>
 8001654:	4682      	mov	sl, r0
 8001656:	468b      	mov	fp, r1
 8001658:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 800165a:	f7fe ff7d 	bl	8000558 <__aeabi_f2d>
 800165e:	4602      	mov	r2, r0
 8001660:	460b      	mov	r3, r1
 8001662:	f04f 0000 	mov.w	r0, #0
 8001666:	49ef      	ldr	r1, [pc, #956]	; (8001a24 <Update_Quaternion+0xacc>)
 8001668:	f7fe fe16 	bl	8000298 <__aeabi_dsub>
 800166c:	4602      	mov	r2, r0
 800166e:	460b      	mov	r3, r1
 8001670:	e9c7 2302 	strd	r2, r3, [r7, #8]
 8001674:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8001676:	f7fe ff6f 	bl	8000558 <__aeabi_f2d>
 800167a:	4602      	mov	r2, r0
 800167c:	460b      	mov	r3, r1
 800167e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001682:	f7fe fe09 	bl	8000298 <__aeabi_dsub>
 8001686:	4602      	mov	r2, r0
 8001688:	460b      	mov	r3, r1
 800168a:	4650      	mov	r0, sl
 800168c:	4659      	mov	r1, fp
 800168e:	f7fe ffbb 	bl	8000608 <__aeabi_dmul>
 8001692:	4602      	mov	r2, r0
 8001694:	460b      	mov	r3, r1
 8001696:	4692      	mov	sl, r2
 8001698:	469b      	mov	fp, r3
 800169a:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 800169e:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 80016a2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80016a6:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 80016aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80016ae:	ee17 0a90 	vmov	r0, s15
 80016b2:	f7fe ff51 	bl	8000558 <__aeabi_f2d>
 80016b6:	4602      	mov	r2, r0
 80016b8:	460b      	mov	r3, r1
 80016ba:	4650      	mov	r0, sl
 80016bc:	4659      	mov	r1, fp
 80016be:	f7fe fded 	bl	800029c <__adddf3>
 80016c2:	4602      	mov	r2, r0
 80016c4:	460b      	mov	r3, r1
 80016c6:	4692      	mov	sl, r2
 80016c8:	469b      	mov	fp, r3
 80016ca:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 80016ce:	f7fe ff43 	bl	8000558 <__aeabi_f2d>
 80016d2:	4602      	mov	r2, r0
 80016d4:	460b      	mov	r3, r1
 80016d6:	4650      	mov	r0, sl
 80016d8:	4659      	mov	r1, fp
 80016da:	f7fe fddd 	bl	8000298 <__aeabi_dsub>
 80016de:	4602      	mov	r2, r0
 80016e0:	460b      	mov	r3, r1
 80016e2:	4640      	mov	r0, r8
 80016e4:	4649      	mov	r1, r9
 80016e6:	f7fe ff8f 	bl	8000608 <__aeabi_dmul>
 80016ea:	4602      	mov	r2, r0
 80016ec:	460b      	mov	r3, r1
 80016ee:	4620      	mov	r0, r4
 80016f0:	4629      	mov	r1, r5
 80016f2:	f7fe fdd1 	bl	8000298 <__aeabi_dsub>
 80016f6:	4603      	mov	r3, r0
 80016f8:	460c      	mov	r4, r1
 80016fa:	4625      	mov	r5, r4
 80016fc:	461c      	mov	r4, r3
 80016fe:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8001702:	eeb1 7a67 	vneg.f32	s14, s15
 8001706:	edd7 7a36 	vldr	s15, [r7, #216]	; 0xd8
 800170a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800170e:	edd7 6a14 	vldr	s13, [r7, #80]	; 0x50
 8001712:	edd7 7a38 	vldr	s15, [r7, #224]	; 0xe0
 8001716:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800171a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800171e:	edd7 6a21 	vldr	s13, [r7, #132]	; 0x84
 8001722:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8001726:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800172a:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 800172e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001732:	ed97 6a25 	vldr	s12, [r7, #148]	; 0x94
 8001736:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 800173a:	ee36 6a27 	vadd.f32	s12, s12, s15
 800173e:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8001742:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001746:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800174a:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 800174e:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001752:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001756:	ee17 0a90 	vmov	r0, s15
 800175a:	f7fe fefd 	bl	8000558 <__aeabi_f2d>
 800175e:	4602      	mov	r2, r0
 8001760:	460b      	mov	r3, r1
 8001762:	4620      	mov	r0, r4
 8001764:	4629      	mov	r1, r5
 8001766:	f7fe fd99 	bl	800029c <__adddf3>
 800176a:	4603      	mov	r3, r0
 800176c:	460c      	mov	r4, r1
 800176e:	4698      	mov	r8, r3
 8001770:	46a1      	mov	r9, r4
 8001772:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8001776:	edd7 7a37 	vldr	s15, [r7, #220]	; 0xdc
 800177a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800177e:	ee17 0a90 	vmov	r0, s15
 8001782:	f7fe fee9 	bl	8000558 <__aeabi_f2d>
 8001786:	4682      	mov	sl, r0
 8001788:	468b      	mov	fp, r1
 800178a:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 800178e:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8001792:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001796:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 800179a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800179e:	ee17 0a90 	vmov	r0, s15
 80017a2:	f7fe fed9 	bl	8000558 <__aeabi_f2d>
 80017a6:	e9c7 0102 	strd	r0, r1, [r7, #8]
 80017aa:	6d38      	ldr	r0, [r7, #80]	; 0x50
 80017ac:	f7fe fed4 	bl	8000558 <__aeabi_f2d>
 80017b0:	e9c7 0100 	strd	r0, r1, [r7]
 80017b4:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 80017b8:	f7fe fece 	bl	8000558 <__aeabi_f2d>
 80017bc:	4603      	mov	r3, r0
 80017be:	460c      	mov	r4, r1
 80017c0:	461a      	mov	r2, r3
 80017c2:	4623      	mov	r3, r4
 80017c4:	f04f 0000 	mov.w	r0, #0
 80017c8:	4996      	ldr	r1, [pc, #600]	; (8001a24 <Update_Quaternion+0xacc>)
 80017ca:	f7fe fd65 	bl	8000298 <__aeabi_dsub>
 80017ce:	4603      	mov	r3, r0
 80017d0:	460c      	mov	r4, r1
 80017d2:	4625      	mov	r5, r4
 80017d4:	461c      	mov	r4, r3
 80017d6:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 80017d8:	f7fe febe 	bl	8000558 <__aeabi_f2d>
 80017dc:	4602      	mov	r2, r0
 80017de:	460b      	mov	r3, r1
 80017e0:	4620      	mov	r0, r4
 80017e2:	4629      	mov	r1, r5
 80017e4:	f7fe fd58 	bl	8000298 <__aeabi_dsub>
 80017e8:	4603      	mov	r3, r0
 80017ea:	460c      	mov	r4, r1
 80017ec:	461a      	mov	r2, r3
 80017ee:	4623      	mov	r3, r4
 80017f0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80017f4:	f7fe ff08 	bl	8000608 <__aeabi_dmul>
 80017f8:	4603      	mov	r3, r0
 80017fa:	460c      	mov	r4, r1
 80017fc:	461a      	mov	r2, r3
 80017fe:	4623      	mov	r3, r4
 8001800:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001804:	f7fe fd4a 	bl	800029c <__adddf3>
 8001808:	4603      	mov	r3, r0
 800180a:	460c      	mov	r4, r1
 800180c:	4625      	mov	r5, r4
 800180e:	461c      	mov	r4, r3
 8001810:	f8d7 00b4 	ldr.w	r0, [r7, #180]	; 0xb4
 8001814:	f7fe fea0 	bl	8000558 <__aeabi_f2d>
 8001818:	4602      	mov	r2, r0
 800181a:	460b      	mov	r3, r1
 800181c:	4620      	mov	r0, r4
 800181e:	4629      	mov	r1, r5
 8001820:	f7fe fd3a 	bl	8000298 <__aeabi_dsub>
 8001824:	4603      	mov	r3, r0
 8001826:	460c      	mov	r4, r1
 8001828:	461a      	mov	r2, r3
 800182a:	4623      	mov	r3, r4
 800182c:	4650      	mov	r0, sl
 800182e:	4659      	mov	r1, fp
 8001830:	f7fe feea 	bl	8000608 <__aeabi_dmul>
 8001834:	4603      	mov	r3, r0
 8001836:	460c      	mov	r4, r1
 8001838:	461a      	mov	r2, r3
 800183a:	4623      	mov	r3, r4
 800183c:	4640      	mov	r0, r8
 800183e:	4649      	mov	r1, r9
 8001840:	f7fe fd2c 	bl	800029c <__adddf3>
 8001844:	4603      	mov	r3, r0
 8001846:	460c      	mov	r4, r1
 8001848:	4618      	mov	r0, r3
 800184a:	4621      	mov	r1, r4
 800184c:	f7ff f9b4 	bl	8000bb8 <__aeabi_d2f>
 8001850:	4603      	mov	r3, r0
 8001852:	647b      	str	r3, [r7, #68]	; 0x44
	s2 = _2q4 * (2.0 * q2q4 - _2q1q3 - ax) + _2q1 * (2.0 * q1q2 + _2q3q4 - ay) - 4.0 * q2 * (1 - 2.0 * q2q2 - 2.0 * q3q3 - az) + _2bz * q4 * (_2bx * (0.5 - q3q3 - q4q4) + _2bz * (q2q4 - q1q3) - mx) + (_2bx * q3 + _2bz * q1) * (_2bx * (q2q3 - q1q4) + _2bz * (q1q2 + q3q4) - my) + (_2bx * q4 - _4bz * q2) * (_2bx * (q1q3 + q2q4) + _2bz * (0.5 - q2q2 - q3q3) - mz);
 8001854:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 8001858:	f7fe fe7e 	bl	8000558 <__aeabi_f2d>
 800185c:	4604      	mov	r4, r0
 800185e:	460d      	mov	r5, r1
 8001860:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 8001864:	f7fe fe78 	bl	8000558 <__aeabi_f2d>
 8001868:	4602      	mov	r2, r0
 800186a:	460b      	mov	r3, r1
 800186c:	f7fe fd16 	bl	800029c <__adddf3>
 8001870:	4602      	mov	r2, r0
 8001872:	460b      	mov	r3, r1
 8001874:	4690      	mov	r8, r2
 8001876:	4699      	mov	r9, r3
 8001878:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 800187c:	f7fe fe6c 	bl	8000558 <__aeabi_f2d>
 8001880:	4602      	mov	r2, r0
 8001882:	460b      	mov	r3, r1
 8001884:	4640      	mov	r0, r8
 8001886:	4649      	mov	r1, r9
 8001888:	f7fe fd06 	bl	8000298 <__aeabi_dsub>
 800188c:	4602      	mov	r2, r0
 800188e:	460b      	mov	r3, r1
 8001890:	4690      	mov	r8, r2
 8001892:	4699      	mov	r9, r3
 8001894:	f8d7 00d4 	ldr.w	r0, [r7, #212]	; 0xd4
 8001898:	f7fe fe5e 	bl	8000558 <__aeabi_f2d>
 800189c:	4602      	mov	r2, r0
 800189e:	460b      	mov	r3, r1
 80018a0:	4640      	mov	r0, r8
 80018a2:	4649      	mov	r1, r9
 80018a4:	f7fe fcf8 	bl	8000298 <__aeabi_dsub>
 80018a8:	4602      	mov	r2, r0
 80018aa:	460b      	mov	r3, r1
 80018ac:	4620      	mov	r0, r4
 80018ae:	4629      	mov	r1, r5
 80018b0:	f7fe feaa 	bl	8000608 <__aeabi_dmul>
 80018b4:	4603      	mov	r3, r0
 80018b6:	460c      	mov	r4, r1
 80018b8:	4625      	mov	r5, r4
 80018ba:	461c      	mov	r4, r3
 80018bc:	f8d7 00b0 	ldr.w	r0, [r7, #176]	; 0xb0
 80018c0:	f7fe fe4a 	bl	8000558 <__aeabi_f2d>
 80018c4:	4680      	mov	r8, r0
 80018c6:	4689      	mov	r9, r1
 80018c8:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 80018cc:	f7fe fe44 	bl	8000558 <__aeabi_f2d>
 80018d0:	4602      	mov	r2, r0
 80018d2:	460b      	mov	r3, r1
 80018d4:	f7fe fce2 	bl	800029c <__adddf3>
 80018d8:	4602      	mov	r2, r0
 80018da:	460b      	mov	r3, r1
 80018dc:	4692      	mov	sl, r2
 80018de:	469b      	mov	fp, r3
 80018e0:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 80018e4:	f7fe fe38 	bl	8000558 <__aeabi_f2d>
 80018e8:	4602      	mov	r2, r0
 80018ea:	460b      	mov	r3, r1
 80018ec:	4650      	mov	r0, sl
 80018ee:	4659      	mov	r1, fp
 80018f0:	f7fe fcd4 	bl	800029c <__adddf3>
 80018f4:	4602      	mov	r2, r0
 80018f6:	460b      	mov	r3, r1
 80018f8:	4692      	mov	sl, r2
 80018fa:	469b      	mov	fp, r3
 80018fc:	f8d7 00d0 	ldr.w	r0, [r7, #208]	; 0xd0
 8001900:	f7fe fe2a 	bl	8000558 <__aeabi_f2d>
 8001904:	4602      	mov	r2, r0
 8001906:	460b      	mov	r3, r1
 8001908:	4650      	mov	r0, sl
 800190a:	4659      	mov	r1, fp
 800190c:	f7fe fcc4 	bl	8000298 <__aeabi_dsub>
 8001910:	4602      	mov	r2, r0
 8001912:	460b      	mov	r3, r1
 8001914:	4640      	mov	r0, r8
 8001916:	4649      	mov	r1, r9
 8001918:	f7fe fe76 	bl	8000608 <__aeabi_dmul>
 800191c:	4602      	mov	r2, r0
 800191e:	460b      	mov	r3, r1
 8001920:	4620      	mov	r0, r4
 8001922:	4629      	mov	r1, r5
 8001924:	f7fe fcba 	bl	800029c <__adddf3>
 8001928:	4603      	mov	r3, r0
 800192a:	460c      	mov	r4, r1
 800192c:	4625      	mov	r5, r4
 800192e:	461c      	mov	r4, r3
 8001930:	f8d7 00e0 	ldr.w	r0, [r7, #224]	; 0xe0
 8001934:	f7fe fe10 	bl	8000558 <__aeabi_f2d>
 8001938:	f04f 0200 	mov.w	r2, #0
 800193c:	4b3a      	ldr	r3, [pc, #232]	; (8001a28 <Update_Quaternion+0xad0>)
 800193e:	f7fe fe63 	bl	8000608 <__aeabi_dmul>
 8001942:	4602      	mov	r2, r0
 8001944:	460b      	mov	r3, r1
 8001946:	4690      	mov	r8, r2
 8001948:	4699      	mov	r9, r3
 800194a:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 800194e:	f7fe fe03 	bl	8000558 <__aeabi_f2d>
 8001952:	4602      	mov	r2, r0
 8001954:	460b      	mov	r3, r1
 8001956:	f7fe fca1 	bl	800029c <__adddf3>
 800195a:	4602      	mov	r2, r0
 800195c:	460b      	mov	r3, r1
 800195e:	f04f 0000 	mov.w	r0, #0
 8001962:	4932      	ldr	r1, [pc, #200]	; (8001a2c <Update_Quaternion+0xad4>)
 8001964:	f7fe fc98 	bl	8000298 <__aeabi_dsub>
 8001968:	4602      	mov	r2, r0
 800196a:	460b      	mov	r3, r1
 800196c:	4692      	mov	sl, r2
 800196e:	469b      	mov	fp, r3
 8001970:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 8001972:	f7fe fdf1 	bl	8000558 <__aeabi_f2d>
 8001976:	4602      	mov	r2, r0
 8001978:	460b      	mov	r3, r1
 800197a:	f7fe fc8f 	bl	800029c <__adddf3>
 800197e:	4602      	mov	r2, r0
 8001980:	460b      	mov	r3, r1
 8001982:	4650      	mov	r0, sl
 8001984:	4659      	mov	r1, fp
 8001986:	f7fe fc87 	bl	8000298 <__aeabi_dsub>
 800198a:	4602      	mov	r2, r0
 800198c:	460b      	mov	r3, r1
 800198e:	4692      	mov	sl, r2
 8001990:	469b      	mov	fp, r3
 8001992:	f8d7 00cc 	ldr.w	r0, [r7, #204]	; 0xcc
 8001996:	f7fe fddf 	bl	8000558 <__aeabi_f2d>
 800199a:	4602      	mov	r2, r0
 800199c:	460b      	mov	r3, r1
 800199e:	4650      	mov	r0, sl
 80019a0:	4659      	mov	r1, fp
 80019a2:	f7fe fc79 	bl	8000298 <__aeabi_dsub>
 80019a6:	4602      	mov	r2, r0
 80019a8:	460b      	mov	r3, r1
 80019aa:	4640      	mov	r0, r8
 80019ac:	4649      	mov	r1, r9
 80019ae:	f7fe fe2b 	bl	8000608 <__aeabi_dmul>
 80019b2:	4602      	mov	r2, r0
 80019b4:	460b      	mov	r3, r1
 80019b6:	4620      	mov	r0, r4
 80019b8:	4629      	mov	r1, r5
 80019ba:	f7fe fc6d 	bl	8000298 <__aeabi_dsub>
 80019be:	4603      	mov	r3, r0
 80019c0:	460c      	mov	r4, r1
 80019c2:	4625      	mov	r5, r4
 80019c4:	461c      	mov	r4, r3
 80019c6:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 80019ca:	edd7 7a36 	vldr	s15, [r7, #216]	; 0xd8
 80019ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80019d2:	ee17 0a90 	vmov	r0, s15
 80019d6:	f7fe fdbf 	bl	8000558 <__aeabi_f2d>
 80019da:	4680      	mov	r8, r0
 80019dc:	4689      	mov	r9, r1
 80019de:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80019e0:	f7fe fdba 	bl	8000558 <__aeabi_f2d>
 80019e4:	4682      	mov	sl, r0
 80019e6:	468b      	mov	fp, r1
 80019e8:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 80019ea:	f7fe fdb5 	bl	8000558 <__aeabi_f2d>
 80019ee:	4602      	mov	r2, r0
 80019f0:	460b      	mov	r3, r1
 80019f2:	f04f 0000 	mov.w	r0, #0
 80019f6:	490b      	ldr	r1, [pc, #44]	; (8001a24 <Update_Quaternion+0xacc>)
 80019f8:	f7fe fc4e 	bl	8000298 <__aeabi_dsub>
 80019fc:	4602      	mov	r2, r0
 80019fe:	460b      	mov	r3, r1
 8001a00:	e9c7 2302 	strd	r2, r3, [r7, #8]
 8001a04:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8001a06:	f7fe fda7 	bl	8000558 <__aeabi_f2d>
 8001a0a:	4602      	mov	r2, r0
 8001a0c:	460b      	mov	r3, r1
 8001a0e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001a12:	f7fe fc41 	bl	8000298 <__aeabi_dsub>
 8001a16:	4602      	mov	r2, r0
 8001a18:	460b      	mov	r3, r1
 8001a1a:	4650      	mov	r0, sl
 8001a1c:	4659      	mov	r1, fp
 8001a1e:	f7fe fdf3 	bl	8000608 <__aeabi_dmul>
 8001a22:	e005      	b.n	8001a30 <Update_Quaternion+0xad8>
 8001a24:	3fe00000 	.word	0x3fe00000
 8001a28:	40100000 	.word	0x40100000
 8001a2c:	3ff00000 	.word	0x3ff00000
 8001a30:	4602      	mov	r2, r0
 8001a32:	460b      	mov	r3, r1
 8001a34:	4692      	mov	sl, r2
 8001a36:	469b      	mov	fp, r3
 8001a38:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 8001a3c:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8001a40:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001a44:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8001a48:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a4c:	ee17 0a90 	vmov	r0, s15
 8001a50:	f7fe fd82 	bl	8000558 <__aeabi_f2d>
 8001a54:	4602      	mov	r2, r0
 8001a56:	460b      	mov	r3, r1
 8001a58:	4650      	mov	r0, sl
 8001a5a:	4659      	mov	r1, fp
 8001a5c:	f7fe fc1e 	bl	800029c <__adddf3>
 8001a60:	4602      	mov	r2, r0
 8001a62:	460b      	mov	r3, r1
 8001a64:	4692      	mov	sl, r2
 8001a66:	469b      	mov	fp, r3
 8001a68:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 8001a6c:	f7fe fd74 	bl	8000558 <__aeabi_f2d>
 8001a70:	4602      	mov	r2, r0
 8001a72:	460b      	mov	r3, r1
 8001a74:	4650      	mov	r0, sl
 8001a76:	4659      	mov	r1, fp
 8001a78:	f7fe fc0e 	bl	8000298 <__aeabi_dsub>
 8001a7c:	4602      	mov	r2, r0
 8001a7e:	460b      	mov	r3, r1
 8001a80:	4640      	mov	r0, r8
 8001a82:	4649      	mov	r1, r9
 8001a84:	f7fe fdc0 	bl	8000608 <__aeabi_dmul>
 8001a88:	4602      	mov	r2, r0
 8001a8a:	460b      	mov	r3, r1
 8001a8c:	4620      	mov	r0, r4
 8001a8e:	4629      	mov	r1, r5
 8001a90:	f7fe fc04 	bl	800029c <__adddf3>
 8001a94:	4603      	mov	r3, r0
 8001a96:	460c      	mov	r4, r1
 8001a98:	4625      	mov	r5, r4
 8001a9a:	461c      	mov	r4, r3
 8001a9c:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8001aa0:	edd7 7a37 	vldr	s15, [r7, #220]	; 0xdc
 8001aa4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001aa8:	edd7 6a14 	vldr	s13, [r7, #80]	; 0x50
 8001aac:	edd7 7a39 	vldr	s15, [r7, #228]	; 0xe4
 8001ab0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001ab4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001ab8:	edd7 6a21 	vldr	s13, [r7, #132]	; 0x84
 8001abc:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8001ac0:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001ac4:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8001ac8:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001acc:	ed97 6a25 	vldr	s12, [r7, #148]	; 0x94
 8001ad0:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 8001ad4:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001ad8:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8001adc:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001ae0:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001ae4:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8001ae8:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001aec:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001af0:	ee17 0a90 	vmov	r0, s15
 8001af4:	f7fe fd30 	bl	8000558 <__aeabi_f2d>
 8001af8:	4602      	mov	r2, r0
 8001afa:	460b      	mov	r3, r1
 8001afc:	4620      	mov	r0, r4
 8001afe:	4629      	mov	r1, r5
 8001b00:	f7fe fbcc 	bl	800029c <__adddf3>
 8001b04:	4603      	mov	r3, r0
 8001b06:	460c      	mov	r4, r1
 8001b08:	4698      	mov	r8, r3
 8001b0a:	46a1      	mov	r9, r4
 8001b0c:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8001b10:	edd7 7a36 	vldr	s15, [r7, #216]	; 0xd8
 8001b14:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001b18:	edd7 6a12 	vldr	s13, [r7, #72]	; 0x48
 8001b1c:	edd7 7a38 	vldr	s15, [r7, #224]	; 0xe0
 8001b20:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001b24:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b28:	ee17 0a90 	vmov	r0, s15
 8001b2c:	f7fe fd14 	bl	8000558 <__aeabi_f2d>
 8001b30:	4682      	mov	sl, r0
 8001b32:	468b      	mov	fp, r1
 8001b34:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 8001b38:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8001b3c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001b40:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8001b44:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b48:	ee17 0a90 	vmov	r0, s15
 8001b4c:	f7fe fd04 	bl	8000558 <__aeabi_f2d>
 8001b50:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8001b54:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8001b56:	f7fe fcff 	bl	8000558 <__aeabi_f2d>
 8001b5a:	e9c7 0100 	strd	r0, r1, [r7]
 8001b5e:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 8001b62:	f7fe fcf9 	bl	8000558 <__aeabi_f2d>
 8001b66:	4603      	mov	r3, r0
 8001b68:	460c      	mov	r4, r1
 8001b6a:	461a      	mov	r2, r3
 8001b6c:	4623      	mov	r3, r4
 8001b6e:	f04f 0000 	mov.w	r0, #0
 8001b72:	49f1      	ldr	r1, [pc, #964]	; (8001f38 <Update_Quaternion+0xfe0>)
 8001b74:	f7fe fb90 	bl	8000298 <__aeabi_dsub>
 8001b78:	4603      	mov	r3, r0
 8001b7a:	460c      	mov	r4, r1
 8001b7c:	4625      	mov	r5, r4
 8001b7e:	461c      	mov	r4, r3
 8001b80:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 8001b82:	f7fe fce9 	bl	8000558 <__aeabi_f2d>
 8001b86:	4602      	mov	r2, r0
 8001b88:	460b      	mov	r3, r1
 8001b8a:	4620      	mov	r0, r4
 8001b8c:	4629      	mov	r1, r5
 8001b8e:	f7fe fb83 	bl	8000298 <__aeabi_dsub>
 8001b92:	4603      	mov	r3, r0
 8001b94:	460c      	mov	r4, r1
 8001b96:	461a      	mov	r2, r3
 8001b98:	4623      	mov	r3, r4
 8001b9a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001b9e:	f7fe fd33 	bl	8000608 <__aeabi_dmul>
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	460c      	mov	r4, r1
 8001ba6:	461a      	mov	r2, r3
 8001ba8:	4623      	mov	r3, r4
 8001baa:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001bae:	f7fe fb75 	bl	800029c <__adddf3>
 8001bb2:	4603      	mov	r3, r0
 8001bb4:	460c      	mov	r4, r1
 8001bb6:	4625      	mov	r5, r4
 8001bb8:	461c      	mov	r4, r3
 8001bba:	f8d7 00b4 	ldr.w	r0, [r7, #180]	; 0xb4
 8001bbe:	f7fe fccb 	bl	8000558 <__aeabi_f2d>
 8001bc2:	4602      	mov	r2, r0
 8001bc4:	460b      	mov	r3, r1
 8001bc6:	4620      	mov	r0, r4
 8001bc8:	4629      	mov	r1, r5
 8001bca:	f7fe fb65 	bl	8000298 <__aeabi_dsub>
 8001bce:	4603      	mov	r3, r0
 8001bd0:	460c      	mov	r4, r1
 8001bd2:	461a      	mov	r2, r3
 8001bd4:	4623      	mov	r3, r4
 8001bd6:	4650      	mov	r0, sl
 8001bd8:	4659      	mov	r1, fp
 8001bda:	f7fe fd15 	bl	8000608 <__aeabi_dmul>
 8001bde:	4603      	mov	r3, r0
 8001be0:	460c      	mov	r4, r1
 8001be2:	461a      	mov	r2, r3
 8001be4:	4623      	mov	r3, r4
 8001be6:	4640      	mov	r0, r8
 8001be8:	4649      	mov	r1, r9
 8001bea:	f7fe fb57 	bl	800029c <__adddf3>
 8001bee:	4603      	mov	r3, r0
 8001bf0:	460c      	mov	r4, r1
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	4621      	mov	r1, r4
 8001bf6:	f7fe ffdf 	bl	8000bb8 <__aeabi_d2f>
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	643b      	str	r3, [r7, #64]	; 0x40
	s3 = -_2q1 * (2.0 * q2q4 - _2q1q3 - ax) + _2q4 * (2.0 * q1q2 + _2q3q4 - ay) - 4.0 * q3 * (1 - 2.0 * q2q2 - 2.0 * q3q3 - az) + (-_4bx * q3 - _2bz * q1) * (_2bx * (0.5 - q3q3 - q4q4) + _2bz * (q2q4 - q1q3) - mx) + (_2bx * q2 + _2bz * q4) * (_2bx * (q2q3 - q1q4) + _2bz * (q1q2 + q3q4) - my) + (_2bx * q1 - _4bz * q3) * (_2bx * (q1q3 + q2q4) + _2bz * (0.5 - q2q2 - q3q3) - mz);
 8001bfe:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8001c02:	eef1 7a67 	vneg.f32	s15, s15
 8001c06:	ee17 3a90 	vmov	r3, s15
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	f7fe fca4 	bl	8000558 <__aeabi_f2d>
 8001c10:	4604      	mov	r4, r0
 8001c12:	460d      	mov	r5, r1
 8001c14:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 8001c18:	f7fe fc9e 	bl	8000558 <__aeabi_f2d>
 8001c1c:	4602      	mov	r2, r0
 8001c1e:	460b      	mov	r3, r1
 8001c20:	f7fe fb3c 	bl	800029c <__adddf3>
 8001c24:	4602      	mov	r2, r0
 8001c26:	460b      	mov	r3, r1
 8001c28:	4690      	mov	r8, r2
 8001c2a:	4699      	mov	r9, r3
 8001c2c:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 8001c30:	f7fe fc92 	bl	8000558 <__aeabi_f2d>
 8001c34:	4602      	mov	r2, r0
 8001c36:	460b      	mov	r3, r1
 8001c38:	4640      	mov	r0, r8
 8001c3a:	4649      	mov	r1, r9
 8001c3c:	f7fe fb2c 	bl	8000298 <__aeabi_dsub>
 8001c40:	4602      	mov	r2, r0
 8001c42:	460b      	mov	r3, r1
 8001c44:	4690      	mov	r8, r2
 8001c46:	4699      	mov	r9, r3
 8001c48:	f8d7 00d4 	ldr.w	r0, [r7, #212]	; 0xd4
 8001c4c:	f7fe fc84 	bl	8000558 <__aeabi_f2d>
 8001c50:	4602      	mov	r2, r0
 8001c52:	460b      	mov	r3, r1
 8001c54:	4640      	mov	r0, r8
 8001c56:	4649      	mov	r1, r9
 8001c58:	f7fe fb1e 	bl	8000298 <__aeabi_dsub>
 8001c5c:	4602      	mov	r2, r0
 8001c5e:	460b      	mov	r3, r1
 8001c60:	4620      	mov	r0, r4
 8001c62:	4629      	mov	r1, r5
 8001c64:	f7fe fcd0 	bl	8000608 <__aeabi_dmul>
 8001c68:	4603      	mov	r3, r0
 8001c6a:	460c      	mov	r4, r1
 8001c6c:	4625      	mov	r5, r4
 8001c6e:	461c      	mov	r4, r3
 8001c70:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 8001c74:	f7fe fc70 	bl	8000558 <__aeabi_f2d>
 8001c78:	4680      	mov	r8, r0
 8001c7a:	4689      	mov	r9, r1
 8001c7c:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 8001c80:	f7fe fc6a 	bl	8000558 <__aeabi_f2d>
 8001c84:	4602      	mov	r2, r0
 8001c86:	460b      	mov	r3, r1
 8001c88:	f7fe fb08 	bl	800029c <__adddf3>
 8001c8c:	4602      	mov	r2, r0
 8001c8e:	460b      	mov	r3, r1
 8001c90:	4692      	mov	sl, r2
 8001c92:	469b      	mov	fp, r3
 8001c94:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 8001c98:	f7fe fc5e 	bl	8000558 <__aeabi_f2d>
 8001c9c:	4602      	mov	r2, r0
 8001c9e:	460b      	mov	r3, r1
 8001ca0:	4650      	mov	r0, sl
 8001ca2:	4659      	mov	r1, fp
 8001ca4:	f7fe fafa 	bl	800029c <__adddf3>
 8001ca8:	4602      	mov	r2, r0
 8001caa:	460b      	mov	r3, r1
 8001cac:	4692      	mov	sl, r2
 8001cae:	469b      	mov	fp, r3
 8001cb0:	f8d7 00d0 	ldr.w	r0, [r7, #208]	; 0xd0
 8001cb4:	f7fe fc50 	bl	8000558 <__aeabi_f2d>
 8001cb8:	4602      	mov	r2, r0
 8001cba:	460b      	mov	r3, r1
 8001cbc:	4650      	mov	r0, sl
 8001cbe:	4659      	mov	r1, fp
 8001cc0:	f7fe faea 	bl	8000298 <__aeabi_dsub>
 8001cc4:	4602      	mov	r2, r0
 8001cc6:	460b      	mov	r3, r1
 8001cc8:	4640      	mov	r0, r8
 8001cca:	4649      	mov	r1, r9
 8001ccc:	f7fe fc9c 	bl	8000608 <__aeabi_dmul>
 8001cd0:	4602      	mov	r2, r0
 8001cd2:	460b      	mov	r3, r1
 8001cd4:	4620      	mov	r0, r4
 8001cd6:	4629      	mov	r1, r5
 8001cd8:	f7fe fae0 	bl	800029c <__adddf3>
 8001cdc:	4603      	mov	r3, r0
 8001cde:	460c      	mov	r4, r1
 8001ce0:	4625      	mov	r5, r4
 8001ce2:	461c      	mov	r4, r3
 8001ce4:	f8d7 00dc 	ldr.w	r0, [r7, #220]	; 0xdc
 8001ce8:	f7fe fc36 	bl	8000558 <__aeabi_f2d>
 8001cec:	f04f 0200 	mov.w	r2, #0
 8001cf0:	4b92      	ldr	r3, [pc, #584]	; (8001f3c <Update_Quaternion+0xfe4>)
 8001cf2:	f7fe fc89 	bl	8000608 <__aeabi_dmul>
 8001cf6:	4602      	mov	r2, r0
 8001cf8:	460b      	mov	r3, r1
 8001cfa:	4690      	mov	r8, r2
 8001cfc:	4699      	mov	r9, r3
 8001cfe:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 8001d02:	f7fe fc29 	bl	8000558 <__aeabi_f2d>
 8001d06:	4602      	mov	r2, r0
 8001d08:	460b      	mov	r3, r1
 8001d0a:	f7fe fac7 	bl	800029c <__adddf3>
 8001d0e:	4602      	mov	r2, r0
 8001d10:	460b      	mov	r3, r1
 8001d12:	f04f 0000 	mov.w	r0, #0
 8001d16:	498a      	ldr	r1, [pc, #552]	; (8001f40 <Update_Quaternion+0xfe8>)
 8001d18:	f7fe fabe 	bl	8000298 <__aeabi_dsub>
 8001d1c:	4602      	mov	r2, r0
 8001d1e:	460b      	mov	r3, r1
 8001d20:	4692      	mov	sl, r2
 8001d22:	469b      	mov	fp, r3
 8001d24:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 8001d26:	f7fe fc17 	bl	8000558 <__aeabi_f2d>
 8001d2a:	4602      	mov	r2, r0
 8001d2c:	460b      	mov	r3, r1
 8001d2e:	f7fe fab5 	bl	800029c <__adddf3>
 8001d32:	4602      	mov	r2, r0
 8001d34:	460b      	mov	r3, r1
 8001d36:	4650      	mov	r0, sl
 8001d38:	4659      	mov	r1, fp
 8001d3a:	f7fe faad 	bl	8000298 <__aeabi_dsub>
 8001d3e:	4602      	mov	r2, r0
 8001d40:	460b      	mov	r3, r1
 8001d42:	4692      	mov	sl, r2
 8001d44:	469b      	mov	fp, r3
 8001d46:	f8d7 00cc 	ldr.w	r0, [r7, #204]	; 0xcc
 8001d4a:	f7fe fc05 	bl	8000558 <__aeabi_f2d>
 8001d4e:	4602      	mov	r2, r0
 8001d50:	460b      	mov	r3, r1
 8001d52:	4650      	mov	r0, sl
 8001d54:	4659      	mov	r1, fp
 8001d56:	f7fe fa9f 	bl	8000298 <__aeabi_dsub>
 8001d5a:	4602      	mov	r2, r0
 8001d5c:	460b      	mov	r3, r1
 8001d5e:	4640      	mov	r0, r8
 8001d60:	4649      	mov	r1, r9
 8001d62:	f7fe fc51 	bl	8000608 <__aeabi_dmul>
 8001d66:	4602      	mov	r2, r0
 8001d68:	460b      	mov	r3, r1
 8001d6a:	4620      	mov	r0, r4
 8001d6c:	4629      	mov	r1, r5
 8001d6e:	f7fe fa93 	bl	8000298 <__aeabi_dsub>
 8001d72:	4603      	mov	r3, r0
 8001d74:	460c      	mov	r4, r1
 8001d76:	4625      	mov	r5, r4
 8001d78:	461c      	mov	r4, r3
 8001d7a:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8001d7e:	eeb1 7a67 	vneg.f32	s14, s15
 8001d82:	edd7 7a37 	vldr	s15, [r7, #220]	; 0xdc
 8001d86:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001d8a:	edd7 6a14 	vldr	s13, [r7, #80]	; 0x50
 8001d8e:	edd7 7a39 	vldr	s15, [r7, #228]	; 0xe4
 8001d92:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d96:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d9a:	ee17 0a90 	vmov	r0, s15
 8001d9e:	f7fe fbdb 	bl	8000558 <__aeabi_f2d>
 8001da2:	4680      	mov	r8, r0
 8001da4:	4689      	mov	r9, r1
 8001da6:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8001da8:	f7fe fbd6 	bl	8000558 <__aeabi_f2d>
 8001dac:	4682      	mov	sl, r0
 8001dae:	468b      	mov	fp, r1
 8001db0:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 8001db2:	f7fe fbd1 	bl	8000558 <__aeabi_f2d>
 8001db6:	4602      	mov	r2, r0
 8001db8:	460b      	mov	r3, r1
 8001dba:	f04f 0000 	mov.w	r0, #0
 8001dbe:	495e      	ldr	r1, [pc, #376]	; (8001f38 <Update_Quaternion+0xfe0>)
 8001dc0:	f7fe fa6a 	bl	8000298 <__aeabi_dsub>
 8001dc4:	4602      	mov	r2, r0
 8001dc6:	460b      	mov	r3, r1
 8001dc8:	e9c7 2302 	strd	r2, r3, [r7, #8]
 8001dcc:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8001dce:	f7fe fbc3 	bl	8000558 <__aeabi_f2d>
 8001dd2:	4602      	mov	r2, r0
 8001dd4:	460b      	mov	r3, r1
 8001dd6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001dda:	f7fe fa5d 	bl	8000298 <__aeabi_dsub>
 8001dde:	4602      	mov	r2, r0
 8001de0:	460b      	mov	r3, r1
 8001de2:	4650      	mov	r0, sl
 8001de4:	4659      	mov	r1, fp
 8001de6:	f7fe fc0f 	bl	8000608 <__aeabi_dmul>
 8001dea:	4602      	mov	r2, r0
 8001dec:	460b      	mov	r3, r1
 8001dee:	4692      	mov	sl, r2
 8001df0:	469b      	mov	fp, r3
 8001df2:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 8001df6:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8001dfa:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001dfe:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8001e02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e06:	ee17 0a90 	vmov	r0, s15
 8001e0a:	f7fe fba5 	bl	8000558 <__aeabi_f2d>
 8001e0e:	4602      	mov	r2, r0
 8001e10:	460b      	mov	r3, r1
 8001e12:	4650      	mov	r0, sl
 8001e14:	4659      	mov	r1, fp
 8001e16:	f7fe fa41 	bl	800029c <__adddf3>
 8001e1a:	4602      	mov	r2, r0
 8001e1c:	460b      	mov	r3, r1
 8001e1e:	4692      	mov	sl, r2
 8001e20:	469b      	mov	fp, r3
 8001e22:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 8001e26:	f7fe fb97 	bl	8000558 <__aeabi_f2d>
 8001e2a:	4602      	mov	r2, r0
 8001e2c:	460b      	mov	r3, r1
 8001e2e:	4650      	mov	r0, sl
 8001e30:	4659      	mov	r1, fp
 8001e32:	f7fe fa31 	bl	8000298 <__aeabi_dsub>
 8001e36:	4602      	mov	r2, r0
 8001e38:	460b      	mov	r3, r1
 8001e3a:	4640      	mov	r0, r8
 8001e3c:	4649      	mov	r1, r9
 8001e3e:	f7fe fbe3 	bl	8000608 <__aeabi_dmul>
 8001e42:	4602      	mov	r2, r0
 8001e44:	460b      	mov	r3, r1
 8001e46:	4620      	mov	r0, r4
 8001e48:	4629      	mov	r1, r5
 8001e4a:	f7fe fa27 	bl	800029c <__adddf3>
 8001e4e:	4603      	mov	r3, r0
 8001e50:	460c      	mov	r4, r1
 8001e52:	4625      	mov	r5, r4
 8001e54:	461c      	mov	r4, r3
 8001e56:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8001e5a:	edd7 7a38 	vldr	s15, [r7, #224]	; 0xe0
 8001e5e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001e62:	edd7 6a14 	vldr	s13, [r7, #80]	; 0x50
 8001e66:	edd7 7a36 	vldr	s15, [r7, #216]	; 0xd8
 8001e6a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e6e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001e72:	edd7 6a21 	vldr	s13, [r7, #132]	; 0x84
 8001e76:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8001e7a:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001e7e:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8001e82:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001e86:	ed97 6a25 	vldr	s12, [r7, #148]	; 0x94
 8001e8a:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 8001e8e:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001e92:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8001e96:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001e9a:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001e9e:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8001ea2:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001ea6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001eaa:	ee17 0a90 	vmov	r0, s15
 8001eae:	f7fe fb53 	bl	8000558 <__aeabi_f2d>
 8001eb2:	4602      	mov	r2, r0
 8001eb4:	460b      	mov	r3, r1
 8001eb6:	4620      	mov	r0, r4
 8001eb8:	4629      	mov	r1, r5
 8001eba:	f7fe f9ef 	bl	800029c <__adddf3>
 8001ebe:	4603      	mov	r3, r0
 8001ec0:	460c      	mov	r4, r1
 8001ec2:	4698      	mov	r8, r3
 8001ec4:	46a1      	mov	r9, r4
 8001ec6:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8001eca:	edd7 7a39 	vldr	s15, [r7, #228]	; 0xe4
 8001ece:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001ed2:	edd7 6a12 	vldr	s13, [r7, #72]	; 0x48
 8001ed6:	edd7 7a37 	vldr	s15, [r7, #220]	; 0xdc
 8001eda:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001ede:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001ee2:	ee17 0a90 	vmov	r0, s15
 8001ee6:	f7fe fb37 	bl	8000558 <__aeabi_f2d>
 8001eea:	4682      	mov	sl, r0
 8001eec:	468b      	mov	fp, r1
 8001eee:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 8001ef2:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8001ef6:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001efa:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8001efe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f02:	ee17 0a90 	vmov	r0, s15
 8001f06:	f7fe fb27 	bl	8000558 <__aeabi_f2d>
 8001f0a:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8001f0e:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8001f10:	f7fe fb22 	bl	8000558 <__aeabi_f2d>
 8001f14:	e9c7 0100 	strd	r0, r1, [r7]
 8001f18:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 8001f1c:	f7fe fb1c 	bl	8000558 <__aeabi_f2d>
 8001f20:	4603      	mov	r3, r0
 8001f22:	460c      	mov	r4, r1
 8001f24:	461a      	mov	r2, r3
 8001f26:	4623      	mov	r3, r4
 8001f28:	f04f 0000 	mov.w	r0, #0
 8001f2c:	4902      	ldr	r1, [pc, #8]	; (8001f38 <Update_Quaternion+0xfe0>)
 8001f2e:	f7fe f9b3 	bl	8000298 <__aeabi_dsub>
 8001f32:	4603      	mov	r3, r0
 8001f34:	460c      	mov	r4, r1
 8001f36:	e005      	b.n	8001f44 <Update_Quaternion+0xfec>
 8001f38:	3fe00000 	.word	0x3fe00000
 8001f3c:	40100000 	.word	0x40100000
 8001f40:	3ff00000 	.word	0x3ff00000
 8001f44:	4625      	mov	r5, r4
 8001f46:	461c      	mov	r4, r3
 8001f48:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 8001f4a:	f7fe fb05 	bl	8000558 <__aeabi_f2d>
 8001f4e:	4602      	mov	r2, r0
 8001f50:	460b      	mov	r3, r1
 8001f52:	4620      	mov	r0, r4
 8001f54:	4629      	mov	r1, r5
 8001f56:	f7fe f99f 	bl	8000298 <__aeabi_dsub>
 8001f5a:	4603      	mov	r3, r0
 8001f5c:	460c      	mov	r4, r1
 8001f5e:	461a      	mov	r2, r3
 8001f60:	4623      	mov	r3, r4
 8001f62:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001f66:	f7fe fb4f 	bl	8000608 <__aeabi_dmul>
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	460c      	mov	r4, r1
 8001f6e:	461a      	mov	r2, r3
 8001f70:	4623      	mov	r3, r4
 8001f72:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001f76:	f7fe f991 	bl	800029c <__adddf3>
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	460c      	mov	r4, r1
 8001f7e:	4625      	mov	r5, r4
 8001f80:	461c      	mov	r4, r3
 8001f82:	f8d7 00b4 	ldr.w	r0, [r7, #180]	; 0xb4
 8001f86:	f7fe fae7 	bl	8000558 <__aeabi_f2d>
 8001f8a:	4602      	mov	r2, r0
 8001f8c:	460b      	mov	r3, r1
 8001f8e:	4620      	mov	r0, r4
 8001f90:	4629      	mov	r1, r5
 8001f92:	f7fe f981 	bl	8000298 <__aeabi_dsub>
 8001f96:	4603      	mov	r3, r0
 8001f98:	460c      	mov	r4, r1
 8001f9a:	461a      	mov	r2, r3
 8001f9c:	4623      	mov	r3, r4
 8001f9e:	4650      	mov	r0, sl
 8001fa0:	4659      	mov	r1, fp
 8001fa2:	f7fe fb31 	bl	8000608 <__aeabi_dmul>
 8001fa6:	4603      	mov	r3, r0
 8001fa8:	460c      	mov	r4, r1
 8001faa:	461a      	mov	r2, r3
 8001fac:	4623      	mov	r3, r4
 8001fae:	4640      	mov	r0, r8
 8001fb0:	4649      	mov	r1, r9
 8001fb2:	f7fe f973 	bl	800029c <__adddf3>
 8001fb6:	4603      	mov	r3, r0
 8001fb8:	460c      	mov	r4, r1
 8001fba:	4618      	mov	r0, r3
 8001fbc:	4621      	mov	r1, r4
 8001fbe:	f7fe fdfb 	bl	8000bb8 <__aeabi_d2f>
 8001fc2:	4603      	mov	r3, r0
 8001fc4:	63fb      	str	r3, [r7, #60]	; 0x3c
	s4 = _2q2 * (2.0 * q2q4 - _2q1q3 - ax) + _2q3 * (2.0 * q1q2 + _2q3q4 - ay) + (-_4bx * q4 + _2bz * q2) * (_2bx * (0.5 - q3q3 - q4q4) + _2bz * (q2q4 - q1q3) - mx) + (-_2bx * q1 + _2bz * q3) * (_2bx * (q2q3 - q1q4) + _2bz * (q1q2 + q3q4) - my) + _2bx * q2 * (_2bx * (q1q3 + q2q4) + _2bz * (0.5 - q2q2 - q3q3) - mz);
 8001fc6:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 8001fca:	f7fe fac5 	bl	8000558 <__aeabi_f2d>
 8001fce:	4604      	mov	r4, r0
 8001fd0:	460d      	mov	r5, r1
 8001fd2:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 8001fd6:	f7fe fabf 	bl	8000558 <__aeabi_f2d>
 8001fda:	4602      	mov	r2, r0
 8001fdc:	460b      	mov	r3, r1
 8001fde:	f7fe f95d 	bl	800029c <__adddf3>
 8001fe2:	4602      	mov	r2, r0
 8001fe4:	460b      	mov	r3, r1
 8001fe6:	4690      	mov	r8, r2
 8001fe8:	4699      	mov	r9, r3
 8001fea:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 8001fee:	f7fe fab3 	bl	8000558 <__aeabi_f2d>
 8001ff2:	4602      	mov	r2, r0
 8001ff4:	460b      	mov	r3, r1
 8001ff6:	4640      	mov	r0, r8
 8001ff8:	4649      	mov	r1, r9
 8001ffa:	f7fe f94d 	bl	8000298 <__aeabi_dsub>
 8001ffe:	4602      	mov	r2, r0
 8002000:	460b      	mov	r3, r1
 8002002:	4690      	mov	r8, r2
 8002004:	4699      	mov	r9, r3
 8002006:	f8d7 00d4 	ldr.w	r0, [r7, #212]	; 0xd4
 800200a:	f7fe faa5 	bl	8000558 <__aeabi_f2d>
 800200e:	4602      	mov	r2, r0
 8002010:	460b      	mov	r3, r1
 8002012:	4640      	mov	r0, r8
 8002014:	4649      	mov	r1, r9
 8002016:	f7fe f93f 	bl	8000298 <__aeabi_dsub>
 800201a:	4602      	mov	r2, r0
 800201c:	460b      	mov	r3, r1
 800201e:	4620      	mov	r0, r4
 8002020:	4629      	mov	r1, r5
 8002022:	f7fe faf1 	bl	8000608 <__aeabi_dmul>
 8002026:	4603      	mov	r3, r0
 8002028:	460c      	mov	r4, r1
 800202a:	4625      	mov	r5, r4
 800202c:	461c      	mov	r4, r3
 800202e:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 8002032:	f7fe fa91 	bl	8000558 <__aeabi_f2d>
 8002036:	4680      	mov	r8, r0
 8002038:	4689      	mov	r9, r1
 800203a:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 800203e:	f7fe fa8b 	bl	8000558 <__aeabi_f2d>
 8002042:	4602      	mov	r2, r0
 8002044:	460b      	mov	r3, r1
 8002046:	f7fe f929 	bl	800029c <__adddf3>
 800204a:	4602      	mov	r2, r0
 800204c:	460b      	mov	r3, r1
 800204e:	4692      	mov	sl, r2
 8002050:	469b      	mov	fp, r3
 8002052:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 8002056:	f7fe fa7f 	bl	8000558 <__aeabi_f2d>
 800205a:	4602      	mov	r2, r0
 800205c:	460b      	mov	r3, r1
 800205e:	4650      	mov	r0, sl
 8002060:	4659      	mov	r1, fp
 8002062:	f7fe f91b 	bl	800029c <__adddf3>
 8002066:	4602      	mov	r2, r0
 8002068:	460b      	mov	r3, r1
 800206a:	4692      	mov	sl, r2
 800206c:	469b      	mov	fp, r3
 800206e:	f8d7 00d0 	ldr.w	r0, [r7, #208]	; 0xd0
 8002072:	f7fe fa71 	bl	8000558 <__aeabi_f2d>
 8002076:	4602      	mov	r2, r0
 8002078:	460b      	mov	r3, r1
 800207a:	4650      	mov	r0, sl
 800207c:	4659      	mov	r1, fp
 800207e:	f7fe f90b 	bl	8000298 <__aeabi_dsub>
 8002082:	4602      	mov	r2, r0
 8002084:	460b      	mov	r3, r1
 8002086:	4640      	mov	r0, r8
 8002088:	4649      	mov	r1, r9
 800208a:	f7fe fabd 	bl	8000608 <__aeabi_dmul>
 800208e:	4602      	mov	r2, r0
 8002090:	460b      	mov	r3, r1
 8002092:	4620      	mov	r0, r4
 8002094:	4629      	mov	r1, r5
 8002096:	f7fe f901 	bl	800029c <__adddf3>
 800209a:	4603      	mov	r3, r0
 800209c:	460c      	mov	r4, r1
 800209e:	4625      	mov	r5, r4
 80020a0:	461c      	mov	r4, r3
 80020a2:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 80020a6:	eeb1 7a67 	vneg.f32	s14, s15
 80020aa:	edd7 7a36 	vldr	s15, [r7, #216]	; 0xd8
 80020ae:	ee27 7a27 	vmul.f32	s14, s14, s15
 80020b2:	edd7 6a14 	vldr	s13, [r7, #80]	; 0x50
 80020b6:	edd7 7a38 	vldr	s15, [r7, #224]	; 0xe0
 80020ba:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80020be:	ee77 7a27 	vadd.f32	s15, s14, s15
 80020c2:	ee17 0a90 	vmov	r0, s15
 80020c6:	f7fe fa47 	bl	8000558 <__aeabi_f2d>
 80020ca:	4680      	mov	r8, r0
 80020cc:	4689      	mov	r9, r1
 80020ce:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80020d0:	f7fe fa42 	bl	8000558 <__aeabi_f2d>
 80020d4:	4682      	mov	sl, r0
 80020d6:	468b      	mov	fp, r1
 80020d8:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 80020da:	f7fe fa3d 	bl	8000558 <__aeabi_f2d>
 80020de:	4602      	mov	r2, r0
 80020e0:	460b      	mov	r3, r1
 80020e2:	f04f 0000 	mov.w	r0, #0
 80020e6:	49f1      	ldr	r1, [pc, #964]	; (80024ac <Update_Quaternion+0x1554>)
 80020e8:	f7fe f8d6 	bl	8000298 <__aeabi_dsub>
 80020ec:	4602      	mov	r2, r0
 80020ee:	460b      	mov	r3, r1
 80020f0:	e9c7 2302 	strd	r2, r3, [r7, #8]
 80020f4:	6f78      	ldr	r0, [r7, #116]	; 0x74
 80020f6:	f7fe fa2f 	bl	8000558 <__aeabi_f2d>
 80020fa:	4602      	mov	r2, r0
 80020fc:	460b      	mov	r3, r1
 80020fe:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002102:	f7fe f8c9 	bl	8000298 <__aeabi_dsub>
 8002106:	4602      	mov	r2, r0
 8002108:	460b      	mov	r3, r1
 800210a:	4650      	mov	r0, sl
 800210c:	4659      	mov	r1, fp
 800210e:	f7fe fa7b 	bl	8000608 <__aeabi_dmul>
 8002112:	4602      	mov	r2, r0
 8002114:	460b      	mov	r3, r1
 8002116:	4692      	mov	sl, r2
 8002118:	469b      	mov	fp, r3
 800211a:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 800211e:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8002122:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002126:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 800212a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800212e:	ee17 0a90 	vmov	r0, s15
 8002132:	f7fe fa11 	bl	8000558 <__aeabi_f2d>
 8002136:	4602      	mov	r2, r0
 8002138:	460b      	mov	r3, r1
 800213a:	4650      	mov	r0, sl
 800213c:	4659      	mov	r1, fp
 800213e:	f7fe f8ad 	bl	800029c <__adddf3>
 8002142:	4602      	mov	r2, r0
 8002144:	460b      	mov	r3, r1
 8002146:	4692      	mov	sl, r2
 8002148:	469b      	mov	fp, r3
 800214a:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 800214e:	f7fe fa03 	bl	8000558 <__aeabi_f2d>
 8002152:	4602      	mov	r2, r0
 8002154:	460b      	mov	r3, r1
 8002156:	4650      	mov	r0, sl
 8002158:	4659      	mov	r1, fp
 800215a:	f7fe f89d 	bl	8000298 <__aeabi_dsub>
 800215e:	4602      	mov	r2, r0
 8002160:	460b      	mov	r3, r1
 8002162:	4640      	mov	r0, r8
 8002164:	4649      	mov	r1, r9
 8002166:	f7fe fa4f 	bl	8000608 <__aeabi_dmul>
 800216a:	4602      	mov	r2, r0
 800216c:	460b      	mov	r3, r1
 800216e:	4620      	mov	r0, r4
 8002170:	4629      	mov	r1, r5
 8002172:	f7fe f893 	bl	800029c <__adddf3>
 8002176:	4603      	mov	r3, r0
 8002178:	460c      	mov	r4, r1
 800217a:	4625      	mov	r5, r4
 800217c:	461c      	mov	r4, r3
 800217e:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8002182:	eeb1 7a67 	vneg.f32	s14, s15
 8002186:	edd7 7a39 	vldr	s15, [r7, #228]	; 0xe4
 800218a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800218e:	edd7 6a14 	vldr	s13, [r7, #80]	; 0x50
 8002192:	edd7 7a37 	vldr	s15, [r7, #220]	; 0xdc
 8002196:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800219a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800219e:	edd7 6a21 	vldr	s13, [r7, #132]	; 0x84
 80021a2:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 80021a6:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80021aa:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 80021ae:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80021b2:	ed97 6a25 	vldr	s12, [r7, #148]	; 0x94
 80021b6:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 80021ba:	ee36 6a27 	vadd.f32	s12, s12, s15
 80021be:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 80021c2:	ee66 7a27 	vmul.f32	s15, s12, s15
 80021c6:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80021ca:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 80021ce:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80021d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80021d6:	ee17 0a90 	vmov	r0, s15
 80021da:	f7fe f9bd 	bl	8000558 <__aeabi_f2d>
 80021de:	4602      	mov	r2, r0
 80021e0:	460b      	mov	r3, r1
 80021e2:	4620      	mov	r0, r4
 80021e4:	4629      	mov	r1, r5
 80021e6:	f7fe f859 	bl	800029c <__adddf3>
 80021ea:	4603      	mov	r3, r0
 80021ec:	460c      	mov	r4, r1
 80021ee:	4698      	mov	r8, r3
 80021f0:	46a1      	mov	r9, r4
 80021f2:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 80021f6:	edd7 7a38 	vldr	s15, [r7, #224]	; 0xe0
 80021fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80021fe:	ee17 0a90 	vmov	r0, s15
 8002202:	f7fe f9a9 	bl	8000558 <__aeabi_f2d>
 8002206:	4682      	mov	sl, r0
 8002208:	468b      	mov	fp, r1
 800220a:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 800220e:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8002212:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002216:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 800221a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800221e:	ee17 0a90 	vmov	r0, s15
 8002222:	f7fe f999 	bl	8000558 <__aeabi_f2d>
 8002226:	e9c7 0102 	strd	r0, r1, [r7, #8]
 800222a:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800222c:	f7fe f994 	bl	8000558 <__aeabi_f2d>
 8002230:	e9c7 0100 	strd	r0, r1, [r7]
 8002234:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 8002238:	f7fe f98e 	bl	8000558 <__aeabi_f2d>
 800223c:	4603      	mov	r3, r0
 800223e:	460c      	mov	r4, r1
 8002240:	461a      	mov	r2, r3
 8002242:	4623      	mov	r3, r4
 8002244:	f04f 0000 	mov.w	r0, #0
 8002248:	4998      	ldr	r1, [pc, #608]	; (80024ac <Update_Quaternion+0x1554>)
 800224a:	f7fe f825 	bl	8000298 <__aeabi_dsub>
 800224e:	4603      	mov	r3, r0
 8002250:	460c      	mov	r4, r1
 8002252:	4625      	mov	r5, r4
 8002254:	461c      	mov	r4, r3
 8002256:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 8002258:	f7fe f97e 	bl	8000558 <__aeabi_f2d>
 800225c:	4602      	mov	r2, r0
 800225e:	460b      	mov	r3, r1
 8002260:	4620      	mov	r0, r4
 8002262:	4629      	mov	r1, r5
 8002264:	f7fe f818 	bl	8000298 <__aeabi_dsub>
 8002268:	4603      	mov	r3, r0
 800226a:	460c      	mov	r4, r1
 800226c:	461a      	mov	r2, r3
 800226e:	4623      	mov	r3, r4
 8002270:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002274:	f7fe f9c8 	bl	8000608 <__aeabi_dmul>
 8002278:	4603      	mov	r3, r0
 800227a:	460c      	mov	r4, r1
 800227c:	461a      	mov	r2, r3
 800227e:	4623      	mov	r3, r4
 8002280:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002284:	f7fe f80a 	bl	800029c <__adddf3>
 8002288:	4603      	mov	r3, r0
 800228a:	460c      	mov	r4, r1
 800228c:	4625      	mov	r5, r4
 800228e:	461c      	mov	r4, r3
 8002290:	f8d7 00b4 	ldr.w	r0, [r7, #180]	; 0xb4
 8002294:	f7fe f960 	bl	8000558 <__aeabi_f2d>
 8002298:	4602      	mov	r2, r0
 800229a:	460b      	mov	r3, r1
 800229c:	4620      	mov	r0, r4
 800229e:	4629      	mov	r1, r5
 80022a0:	f7fd fffa 	bl	8000298 <__aeabi_dsub>
 80022a4:	4603      	mov	r3, r0
 80022a6:	460c      	mov	r4, r1
 80022a8:	461a      	mov	r2, r3
 80022aa:	4623      	mov	r3, r4
 80022ac:	4650      	mov	r0, sl
 80022ae:	4659      	mov	r1, fp
 80022b0:	f7fe f9aa 	bl	8000608 <__aeabi_dmul>
 80022b4:	4603      	mov	r3, r0
 80022b6:	460c      	mov	r4, r1
 80022b8:	461a      	mov	r2, r3
 80022ba:	4623      	mov	r3, r4
 80022bc:	4640      	mov	r0, r8
 80022be:	4649      	mov	r1, r9
 80022c0:	f7fd ffec 	bl	800029c <__adddf3>
 80022c4:	4603      	mov	r3, r0
 80022c6:	460c      	mov	r4, r1
 80022c8:	4618      	mov	r0, r3
 80022ca:	4621      	mov	r1, r4
 80022cc:	f7fe fc74 	bl	8000bb8 <__aeabi_d2f>
 80022d0:	4603      	mov	r3, r0
 80022d2:	63bb      	str	r3, [r7, #56]	; 0x38
	norm = 1.0 / (float)sqrt(s1 * s1 + s2 * s2 + s3 * s3 + s4 * s4);    // normalise step magnitude
 80022d4:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 80022d8:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80022dc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80022e0:	edd7 6a10 	vldr	s13, [r7, #64]	; 0x40
 80022e4:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 80022e8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80022ec:	ee37 7a27 	vadd.f32	s14, s14, s15
 80022f0:	edd7 6a0f 	vldr	s13, [r7, #60]	; 0x3c
 80022f4:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80022f8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80022fc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002300:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 8002304:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8002308:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800230c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002310:	ee17 0a90 	vmov	r0, s15
 8002314:	f7fe f920 	bl	8000558 <__aeabi_f2d>
 8002318:	4603      	mov	r3, r0
 800231a:	460c      	mov	r4, r1
 800231c:	ec44 3b10 	vmov	d0, r3, r4
 8002320:	f004 fc50 	bl	8006bc4 <sqrt>
 8002324:	ec54 3b10 	vmov	r3, r4, d0
 8002328:	4618      	mov	r0, r3
 800232a:	4621      	mov	r1, r4
 800232c:	f7fe fc44 	bl	8000bb8 <__aeabi_d2f>
 8002330:	ee06 0a90 	vmov	s13, r0
 8002334:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002338:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800233c:	edc7 7a1c 	vstr	s15, [r7, #112]	; 0x70
	s1 *= norm;
 8002340:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8002344:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8002348:	ee67 7a27 	vmul.f32	s15, s14, s15
 800234c:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
	s2 *= norm;
 8002350:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8002354:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8002358:	ee67 7a27 	vmul.f32	s15, s14, s15
 800235c:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
	s3 *= norm;
 8002360:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8002364:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8002368:	ee67 7a27 	vmul.f32	s15, s14, s15
 800236c:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
	s4 *= norm;
 8002370:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8002374:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8002378:	ee67 7a27 	vmul.f32	s15, s14, s15
 800237c:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38

	// Compute rate of change of quaternion
	qDot1 = 0.5 * (-q2 * gx - q3 * gy - q4 * gz) - Beta * s1;
 8002380:	edd7 7a38 	vldr	s15, [r7, #224]	; 0xe0
 8002384:	eeb1 7a67 	vneg.f32	s14, s15
 8002388:	edd7 7a32 	vldr	s15, [r7, #200]	; 0xc8
 800238c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002390:	edd7 6a37 	vldr	s13, [r7, #220]	; 0xdc
 8002394:	edd7 7a31 	vldr	s15, [r7, #196]	; 0xc4
 8002398:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800239c:	ee37 7a67 	vsub.f32	s14, s14, s15
 80023a0:	edd7 6a36 	vldr	s13, [r7, #216]	; 0xd8
 80023a4:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 80023a8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80023ac:	ee77 7a67 	vsub.f32	s15, s14, s15
 80023b0:	ee17 0a90 	vmov	r0, s15
 80023b4:	f7fe f8d0 	bl	8000558 <__aeabi_f2d>
 80023b8:	f04f 0200 	mov.w	r2, #0
 80023bc:	4b3b      	ldr	r3, [pc, #236]	; (80024ac <Update_Quaternion+0x1554>)
 80023be:	f7fe f923 	bl	8000608 <__aeabi_dmul>
 80023c2:	4603      	mov	r3, r0
 80023c4:	460c      	mov	r4, r1
 80023c6:	4625      	mov	r5, r4
 80023c8:	461c      	mov	r4, r3
 80023ca:	ed97 7a04 	vldr	s14, [r7, #16]
 80023ce:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80023d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80023d6:	ee17 0a90 	vmov	r0, s15
 80023da:	f7fe f8bd 	bl	8000558 <__aeabi_f2d>
 80023de:	4602      	mov	r2, r0
 80023e0:	460b      	mov	r3, r1
 80023e2:	4620      	mov	r0, r4
 80023e4:	4629      	mov	r1, r5
 80023e6:	f7fd ff57 	bl	8000298 <__aeabi_dsub>
 80023ea:	4603      	mov	r3, r0
 80023ec:	460c      	mov	r4, r1
 80023ee:	4618      	mov	r0, r3
 80023f0:	4621      	mov	r1, r4
 80023f2:	f7fe fbe1 	bl	8000bb8 <__aeabi_d2f>
 80023f6:	4603      	mov	r3, r0
 80023f8:	637b      	str	r3, [r7, #52]	; 0x34
	qDot2 = 0.5 * (q1 * gx + q3 * gz - q4 * gy) - Beta * s2;
 80023fa:	ed97 7a39 	vldr	s14, [r7, #228]	; 0xe4
 80023fe:	edd7 7a32 	vldr	s15, [r7, #200]	; 0xc8
 8002402:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002406:	edd7 6a37 	vldr	s13, [r7, #220]	; 0xdc
 800240a:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 800240e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002412:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002416:	edd7 6a36 	vldr	s13, [r7, #216]	; 0xd8
 800241a:	edd7 7a31 	vldr	s15, [r7, #196]	; 0xc4
 800241e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002422:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002426:	ee17 0a90 	vmov	r0, s15
 800242a:	f7fe f895 	bl	8000558 <__aeabi_f2d>
 800242e:	f04f 0200 	mov.w	r2, #0
 8002432:	4b1e      	ldr	r3, [pc, #120]	; (80024ac <Update_Quaternion+0x1554>)
 8002434:	f7fe f8e8 	bl	8000608 <__aeabi_dmul>
 8002438:	4603      	mov	r3, r0
 800243a:	460c      	mov	r4, r1
 800243c:	4625      	mov	r5, r4
 800243e:	461c      	mov	r4, r3
 8002440:	ed97 7a04 	vldr	s14, [r7, #16]
 8002444:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8002448:	ee67 7a27 	vmul.f32	s15, s14, s15
 800244c:	ee17 0a90 	vmov	r0, s15
 8002450:	f7fe f882 	bl	8000558 <__aeabi_f2d>
 8002454:	4602      	mov	r2, r0
 8002456:	460b      	mov	r3, r1
 8002458:	4620      	mov	r0, r4
 800245a:	4629      	mov	r1, r5
 800245c:	f7fd ff1c 	bl	8000298 <__aeabi_dsub>
 8002460:	4603      	mov	r3, r0
 8002462:	460c      	mov	r4, r1
 8002464:	4618      	mov	r0, r3
 8002466:	4621      	mov	r1, r4
 8002468:	f7fe fba6 	bl	8000bb8 <__aeabi_d2f>
 800246c:	4603      	mov	r3, r0
 800246e:	633b      	str	r3, [r7, #48]	; 0x30
	qDot3 = 0.5 * (q1 * gy - q2 * gz + q4 * gx) - Beta * s3;
 8002470:	ed97 7a39 	vldr	s14, [r7, #228]	; 0xe4
 8002474:	edd7 7a31 	vldr	s15, [r7, #196]	; 0xc4
 8002478:	ee27 7a27 	vmul.f32	s14, s14, s15
 800247c:	edd7 6a38 	vldr	s13, [r7, #224]	; 0xe0
 8002480:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 8002484:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002488:	ee37 7a67 	vsub.f32	s14, s14, s15
 800248c:	edd7 6a36 	vldr	s13, [r7, #216]	; 0xd8
 8002490:	edd7 7a32 	vldr	s15, [r7, #200]	; 0xc8
 8002494:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002498:	ee77 7a27 	vadd.f32	s15, s14, s15
 800249c:	ee17 0a90 	vmov	r0, s15
 80024a0:	f7fe f85a 	bl	8000558 <__aeabi_f2d>
 80024a4:	f04f 0200 	mov.w	r2, #0
 80024a8:	e002      	b.n	80024b0 <Update_Quaternion+0x1558>
 80024aa:	bf00      	nop
 80024ac:	3fe00000 	.word	0x3fe00000
 80024b0:	4b77      	ldr	r3, [pc, #476]	; (8002690 <Update_Quaternion+0x1738>)
 80024b2:	f7fe f8a9 	bl	8000608 <__aeabi_dmul>
 80024b6:	4603      	mov	r3, r0
 80024b8:	460c      	mov	r4, r1
 80024ba:	4625      	mov	r5, r4
 80024bc:	461c      	mov	r4, r3
 80024be:	ed97 7a04 	vldr	s14, [r7, #16]
 80024c2:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80024c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80024ca:	ee17 0a90 	vmov	r0, s15
 80024ce:	f7fe f843 	bl	8000558 <__aeabi_f2d>
 80024d2:	4602      	mov	r2, r0
 80024d4:	460b      	mov	r3, r1
 80024d6:	4620      	mov	r0, r4
 80024d8:	4629      	mov	r1, r5
 80024da:	f7fd fedd 	bl	8000298 <__aeabi_dsub>
 80024de:	4603      	mov	r3, r0
 80024e0:	460c      	mov	r4, r1
 80024e2:	4618      	mov	r0, r3
 80024e4:	4621      	mov	r1, r4
 80024e6:	f7fe fb67 	bl	8000bb8 <__aeabi_d2f>
 80024ea:	4603      	mov	r3, r0
 80024ec:	62fb      	str	r3, [r7, #44]	; 0x2c
	qDot4 = 0.5 * (q1 * gz + q2 * gy - q3 * gx) - Beta * s4;
 80024ee:	ed97 7a39 	vldr	s14, [r7, #228]	; 0xe4
 80024f2:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 80024f6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80024fa:	edd7 6a38 	vldr	s13, [r7, #224]	; 0xe0
 80024fe:	edd7 7a31 	vldr	s15, [r7, #196]	; 0xc4
 8002502:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002506:	ee37 7a27 	vadd.f32	s14, s14, s15
 800250a:	edd7 6a37 	vldr	s13, [r7, #220]	; 0xdc
 800250e:	edd7 7a32 	vldr	s15, [r7, #200]	; 0xc8
 8002512:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002516:	ee77 7a67 	vsub.f32	s15, s14, s15
 800251a:	ee17 0a90 	vmov	r0, s15
 800251e:	f7fe f81b 	bl	8000558 <__aeabi_f2d>
 8002522:	f04f 0200 	mov.w	r2, #0
 8002526:	4b5a      	ldr	r3, [pc, #360]	; (8002690 <Update_Quaternion+0x1738>)
 8002528:	f7fe f86e 	bl	8000608 <__aeabi_dmul>
 800252c:	4603      	mov	r3, r0
 800252e:	460c      	mov	r4, r1
 8002530:	4625      	mov	r5, r4
 8002532:	461c      	mov	r4, r3
 8002534:	ed97 7a04 	vldr	s14, [r7, #16]
 8002538:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 800253c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002540:	ee17 0a90 	vmov	r0, s15
 8002544:	f7fe f808 	bl	8000558 <__aeabi_f2d>
 8002548:	4602      	mov	r2, r0
 800254a:	460b      	mov	r3, r1
 800254c:	4620      	mov	r0, r4
 800254e:	4629      	mov	r1, r5
 8002550:	f7fd fea2 	bl	8000298 <__aeabi_dsub>
 8002554:	4603      	mov	r3, r0
 8002556:	460c      	mov	r4, r1
 8002558:	4618      	mov	r0, r3
 800255a:	4621      	mov	r1, r4
 800255c:	f7fe fb2c 	bl	8000bb8 <__aeabi_d2f>
 8002560:	4603      	mov	r3, r0
 8002562:	62bb      	str	r3, [r7, #40]	; 0x28

	// Integrate to yield quaternion
	q1 += qDot1 * SamplePeriod;
 8002564:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8002568:	edd7 7a05 	vldr	s15, [r7, #20]
 800256c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002570:	ed97 7a39 	vldr	s14, [r7, #228]	; 0xe4
 8002574:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002578:	edc7 7a39 	vstr	s15, [r7, #228]	; 0xe4
	q2 += qDot2 * SamplePeriod;
 800257c:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8002580:	edd7 7a05 	vldr	s15, [r7, #20]
 8002584:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002588:	ed97 7a38 	vldr	s14, [r7, #224]	; 0xe0
 800258c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002590:	edc7 7a38 	vstr	s15, [r7, #224]	; 0xe0
	q3 += qDot3 * SamplePeriod;
 8002594:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8002598:	edd7 7a05 	vldr	s15, [r7, #20]
 800259c:	ee67 7a27 	vmul.f32	s15, s14, s15
 80025a0:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 80025a4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80025a8:	edc7 7a37 	vstr	s15, [r7, #220]	; 0xdc
	q4 += qDot4 * SamplePeriod;
 80025ac:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 80025b0:	edd7 7a05 	vldr	s15, [r7, #20]
 80025b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80025b8:	ed97 7a36 	vldr	s14, [r7, #216]	; 0xd8
 80025bc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80025c0:	edc7 7a36 	vstr	s15, [r7, #216]	; 0xd8
	norm = 1.0 / (float)sqrt(q1 * q1 + q2 * q2 + q3 * q3 + q4 * q4);    // normalise quaternion
 80025c4:	ed97 7a39 	vldr	s14, [r7, #228]	; 0xe4
 80025c8:	edd7 7a39 	vldr	s15, [r7, #228]	; 0xe4
 80025cc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80025d0:	edd7 6a38 	vldr	s13, [r7, #224]	; 0xe0
 80025d4:	edd7 7a38 	vldr	s15, [r7, #224]	; 0xe0
 80025d8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80025dc:	ee37 7a27 	vadd.f32	s14, s14, s15
 80025e0:	edd7 6a37 	vldr	s13, [r7, #220]	; 0xdc
 80025e4:	edd7 7a37 	vldr	s15, [r7, #220]	; 0xdc
 80025e8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80025ec:	ee37 7a27 	vadd.f32	s14, s14, s15
 80025f0:	edd7 6a36 	vldr	s13, [r7, #216]	; 0xd8
 80025f4:	edd7 7a36 	vldr	s15, [r7, #216]	; 0xd8
 80025f8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80025fc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002600:	ee17 0a90 	vmov	r0, s15
 8002604:	f7fd ffa8 	bl	8000558 <__aeabi_f2d>
 8002608:	4603      	mov	r3, r0
 800260a:	460c      	mov	r4, r1
 800260c:	ec44 3b10 	vmov	d0, r3, r4
 8002610:	f004 fad8 	bl	8006bc4 <sqrt>
 8002614:	ec54 3b10 	vmov	r3, r4, d0
 8002618:	4618      	mov	r0, r3
 800261a:	4621      	mov	r1, r4
 800261c:	f7fe facc 	bl	8000bb8 <__aeabi_d2f>
 8002620:	ee06 0a90 	vmov	s13, r0
 8002624:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002628:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800262c:	edc7 7a1c 	vstr	s15, [r7, #112]	; 0x70
	Quaternion[0] = q1 * norm;
 8002630:	ed97 7a39 	vldr	s14, [r7, #228]	; 0xe4
 8002634:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8002638:	ee67 7a27 	vmul.f32	s15, s14, s15
 800263c:	69bb      	ldr	r3, [r7, #24]
 800263e:	edc3 7a00 	vstr	s15, [r3]
	Quaternion[1] = q2 * norm;
 8002642:	69bb      	ldr	r3, [r7, #24]
 8002644:	3304      	adds	r3, #4
 8002646:	ed97 7a38 	vldr	s14, [r7, #224]	; 0xe0
 800264a:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 800264e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002652:	edc3 7a00 	vstr	s15, [r3]
	Quaternion[2] = q3 * norm;
 8002656:	69bb      	ldr	r3, [r7, #24]
 8002658:	3308      	adds	r3, #8
 800265a:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 800265e:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8002662:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002666:	edc3 7a00 	vstr	s15, [r3]
	Quaternion[3] = q4 * norm;
 800266a:	69bb      	ldr	r3, [r7, #24]
 800266c:	330c      	adds	r3, #12
 800266e:	ed97 7a36 	vldr	s14, [r7, #216]	; 0xd8
 8002672:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8002676:	ee67 7a27 	vmul.f32	s15, s14, s15
 800267a:	edc3 7a00 	vstr	s15, [r3]
 800267e:	e002      	b.n	8002686 <Update_Quaternion+0x172e>
	if (norm == 0.0) return; // handle NaN
 8002680:	bf00      	nop
 8002682:	e000      	b.n	8002686 <Update_Quaternion+0x172e>
	if (norm == 0.0) return; // handle NaN
 8002684:	bf00      	nop
}
 8002686:	37e8      	adds	r7, #232	; 0xe8
 8002688:	46bd      	mov	sp, r7
 800268a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800268e:	bf00      	nop
 8002690:	3fe00000 	.word	0x3fe00000

08002694 <LL_I2C_IsActiveFlag_TXE>:
  * @rmtoll SR1          TXE           LL_I2C_IsActiveFlag_TXE
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_TXE(I2C_TypeDef *I2Cx)
{
 8002694:	b480      	push	{r7}
 8002696:	b083      	sub	sp, #12
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
  return (READ_BIT(I2Cx->SR1, I2C_SR1_TXE) == (I2C_SR1_TXE));
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	695b      	ldr	r3, [r3, #20]
 80026a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026a4:	2b80      	cmp	r3, #128	; 0x80
 80026a6:	bf0c      	ite	eq
 80026a8:	2301      	moveq	r3, #1
 80026aa:	2300      	movne	r3, #0
 80026ac:	b2db      	uxtb	r3, r3
}
 80026ae:	4618      	mov	r0, r3
 80026b0:	370c      	adds	r7, #12
 80026b2:	46bd      	mov	sp, r7
 80026b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b8:	4770      	bx	lr

080026ba <LL_I2C_IsActiveFlag_BTF>:
  * @rmtoll SR1          BTF           LL_I2C_IsActiveFlag_BTF
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_BTF(I2C_TypeDef *I2Cx)
{
 80026ba:	b480      	push	{r7}
 80026bc:	b083      	sub	sp, #12
 80026be:	af00      	add	r7, sp, #0
 80026c0:	6078      	str	r0, [r7, #4]
  return (READ_BIT(I2Cx->SR1, I2C_SR1_BTF) == (I2C_SR1_BTF));
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	695b      	ldr	r3, [r3, #20]
 80026c6:	f003 0304 	and.w	r3, r3, #4
 80026ca:	2b04      	cmp	r3, #4
 80026cc:	bf0c      	ite	eq
 80026ce:	2301      	moveq	r3, #1
 80026d0:	2300      	movne	r3, #0
 80026d2:	b2db      	uxtb	r3, r3
}
 80026d4:	4618      	mov	r0, r3
 80026d6:	370c      	adds	r7, #12
 80026d8:	46bd      	mov	sp, r7
 80026da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026de:	4770      	bx	lr

080026e0 <LL_I2C_IsActiveFlag_RXNE>:
  * @rmtoll SR1          RXNE          LL_I2C_IsActiveFlag_RXNE
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_RXNE(I2C_TypeDef *I2Cx)
{
 80026e0:	b480      	push	{r7}
 80026e2:	b083      	sub	sp, #12
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
  return (READ_BIT(I2Cx->SR1, I2C_SR1_RXNE) == (I2C_SR1_RXNE));
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	695b      	ldr	r3, [r3, #20]
 80026ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026f0:	2b40      	cmp	r3, #64	; 0x40
 80026f2:	bf0c      	ite	eq
 80026f4:	2301      	moveq	r3, #1
 80026f6:	2300      	movne	r3, #0
 80026f8:	b2db      	uxtb	r3, r3
}
 80026fa:	4618      	mov	r0, r3
 80026fc:	370c      	adds	r7, #12
 80026fe:	46bd      	mov	sp, r7
 8002700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002704:	4770      	bx	lr

08002706 <LL_I2C_IsActiveFlag_SB>:
  * @rmtoll SR1          SB            LL_I2C_IsActiveFlag_SB
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_SB(I2C_TypeDef *I2Cx)
{
 8002706:	b480      	push	{r7}
 8002708:	b083      	sub	sp, #12
 800270a:	af00      	add	r7, sp, #0
 800270c:	6078      	str	r0, [r7, #4]
  return (READ_BIT(I2Cx->SR1, I2C_SR1_SB) == (I2C_SR1_SB));
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	695b      	ldr	r3, [r3, #20]
 8002712:	f003 0301 	and.w	r3, r3, #1
 8002716:	2b01      	cmp	r3, #1
 8002718:	bf0c      	ite	eq
 800271a:	2301      	moveq	r3, #1
 800271c:	2300      	movne	r3, #0
 800271e:	b2db      	uxtb	r3, r3
}
 8002720:	4618      	mov	r0, r3
 8002722:	370c      	adds	r7, #12
 8002724:	46bd      	mov	sp, r7
 8002726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272a:	4770      	bx	lr

0800272c <LL_I2C_IsActiveFlag_ADDR>:
  * @rmtoll SR1          ADDR          LL_I2C_IsActiveFlag_ADDR
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_ADDR(I2C_TypeDef *I2Cx)
{
 800272c:	b480      	push	{r7}
 800272e:	b083      	sub	sp, #12
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
  return (READ_BIT(I2Cx->SR1, I2C_SR1_ADDR) == (I2C_SR1_ADDR));
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	695b      	ldr	r3, [r3, #20]
 8002738:	f003 0302 	and.w	r3, r3, #2
 800273c:	2b02      	cmp	r3, #2
 800273e:	bf0c      	ite	eq
 8002740:	2301      	moveq	r3, #1
 8002742:	2300      	movne	r3, #0
 8002744:	b2db      	uxtb	r3, r3
}
 8002746:	4618      	mov	r0, r3
 8002748:	370c      	adds	r7, #12
 800274a:	46bd      	mov	sp, r7
 800274c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002750:	4770      	bx	lr

08002752 <LL_I2C_ClearFlag_ADDR>:
  * @rmtoll SR1          ADDR          LL_I2C_ClearFlag_ADDR
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_ClearFlag_ADDR(I2C_TypeDef *I2Cx)
{
 8002752:	b480      	push	{r7}
 8002754:	b085      	sub	sp, #20
 8002756:	af00      	add	r7, sp, #0
 8002758:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  tmpreg = I2Cx->SR1;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	695b      	ldr	r3, [r3, #20]
 800275e:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 8002760:	68fb      	ldr	r3, [r7, #12]
  tmpreg = I2Cx->SR2;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	699b      	ldr	r3, [r3, #24]
 8002766:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 8002768:	68fb      	ldr	r3, [r7, #12]
}
 800276a:	bf00      	nop
 800276c:	3714      	adds	r7, #20
 800276e:	46bd      	mov	sp, r7
 8002770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002774:	4770      	bx	lr

08002776 <LL_I2C_GenerateStartCondition>:
  * @rmtoll CR1          START         LL_I2C_GenerateStartCondition
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_GenerateStartCondition(I2C_TypeDef *I2Cx)
{
 8002776:	b480      	push	{r7}
 8002778:	b083      	sub	sp, #12
 800277a:	af00      	add	r7, sp, #0
 800277c:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_START);
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	601a      	str	r2, [r3, #0]
}
 800278a:	bf00      	nop
 800278c:	370c      	adds	r7, #12
 800278e:	46bd      	mov	sp, r7
 8002790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002794:	4770      	bx	lr

08002796 <LL_I2C_GenerateStopCondition>:
  * @rmtoll CR1          STOP          LL_I2C_GenerateStopCondition
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_GenerateStopCondition(I2C_TypeDef *I2Cx)
{
 8002796:	b480      	push	{r7}
 8002798:	b083      	sub	sp, #12
 800279a:	af00      	add	r7, sp, #0
 800279c:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_STOP);
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	601a      	str	r2, [r3, #0]
}
 80027aa:	bf00      	nop
 80027ac:	370c      	adds	r7, #12
 80027ae:	46bd      	mov	sp, r7
 80027b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b4:	4770      	bx	lr

080027b6 <LL_I2C_ReceiveData8>:
  * @rmtoll DR           DR            LL_I2C_ReceiveData8
  * @param  I2Cx I2C Instance.
  * @retval Value between Min_Data=0x0 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_I2C_ReceiveData8(I2C_TypeDef *I2Cx)
{
 80027b6:	b480      	push	{r7}
 80027b8:	b083      	sub	sp, #12
 80027ba:	af00      	add	r7, sp, #0
 80027bc:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(I2Cx->DR, I2C_DR_DR));
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	691b      	ldr	r3, [r3, #16]
 80027c2:	b2db      	uxtb	r3, r3
}
 80027c4:	4618      	mov	r0, r3
 80027c6:	370c      	adds	r7, #12
 80027c8:	46bd      	mov	sp, r7
 80027ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ce:	4770      	bx	lr

080027d0 <LL_I2C_TransmitData8>:
  * @param  I2Cx I2C Instance.
  * @param  Data Value between Min_Data=0x0 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_I2C_TransmitData8(I2C_TypeDef *I2Cx, uint8_t Data)
{
 80027d0:	b480      	push	{r7}
 80027d2:	b083      	sub	sp, #12
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
 80027d8:	460b      	mov	r3, r1
 80027da:	70fb      	strb	r3, [r7, #3]
  MODIFY_REG(I2Cx->DR, I2C_DR_DR, Data);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	691b      	ldr	r3, [r3, #16]
 80027e0:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80027e4:	78fb      	ldrb	r3, [r7, #3]
 80027e6:	431a      	orrs	r2, r3
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	611a      	str	r2, [r3, #16]
}
 80027ec:	bf00      	nop
 80027ee:	370c      	adds	r7, #12
 80027f0:	46bd      	mov	sp, r7
 80027f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f6:	4770      	bx	lr

080027f8 <Get_Acc_Gyr>:
	I2C1_Write(MAG, 0x32, 0x01); // Mag Reset
	LL_mDelay(50);
}


void Get_Acc_Gyr(int16_t* output) {
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b086      	sub	sp, #24
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]

	uint8_t data[12] = {0};
 8002800:	f107 0308 	add.w	r3, r7, #8
 8002804:	2200      	movs	r2, #0
 8002806:	601a      	str	r2, [r3, #0]
 8002808:	605a      	str	r2, [r3, #4]
 800280a:	609a      	str	r2, [r3, #8]
	I2C1_Read(IMU, 0x2D, data, 12); // read acc/gry data
 800280c:	f107 0208 	add.w	r2, r7, #8
 8002810:	230c      	movs	r3, #12
 8002812:	212d      	movs	r1, #45	; 0x2d
 8002814:	2069      	movs	r0, #105	; 0x69
 8002816:	f000 f885 	bl	8002924 <I2C1_Read>
	for (int i = 0; i < 6; i++) {
 800281a:	2300      	movs	r3, #0
 800281c:	617b      	str	r3, [r7, #20]
 800281e:	e01b      	b.n	8002858 <Get_Acc_Gyr+0x60>
		output[i] = (data[i*2] << 8) | data[i*2+1]; // little-endian
 8002820:	697b      	ldr	r3, [r7, #20]
 8002822:	005b      	lsls	r3, r3, #1
 8002824:	f107 0218 	add.w	r2, r7, #24
 8002828:	4413      	add	r3, r2
 800282a:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 800282e:	021b      	lsls	r3, r3, #8
 8002830:	b219      	sxth	r1, r3
 8002832:	697b      	ldr	r3, [r7, #20]
 8002834:	005b      	lsls	r3, r3, #1
 8002836:	3301      	adds	r3, #1
 8002838:	f107 0218 	add.w	r2, r7, #24
 800283c:	4413      	add	r3, r2
 800283e:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8002842:	b21a      	sxth	r2, r3
 8002844:	697b      	ldr	r3, [r7, #20]
 8002846:	005b      	lsls	r3, r3, #1
 8002848:	6878      	ldr	r0, [r7, #4]
 800284a:	4403      	add	r3, r0
 800284c:	430a      	orrs	r2, r1
 800284e:	b212      	sxth	r2, r2
 8002850:	801a      	strh	r2, [r3, #0]
	for (int i = 0; i < 6; i++) {
 8002852:	697b      	ldr	r3, [r7, #20]
 8002854:	3301      	adds	r3, #1
 8002856:	617b      	str	r3, [r7, #20]
 8002858:	697b      	ldr	r3, [r7, #20]
 800285a:	2b05      	cmp	r3, #5
 800285c:	dde0      	ble.n	8002820 <Get_Acc_Gyr+0x28>
	}

}
 800285e:	bf00      	nop
 8002860:	3718      	adds	r7, #24
 8002862:	46bd      	mov	sp, r7
 8002864:	bd80      	pop	{r7, pc}

08002866 <Get_Mag>:


void Get_Mag(int16_t* output) {
 8002866:	b580      	push	{r7, lr}
 8002868:	b086      	sub	sp, #24
 800286a:	af00      	add	r7, sp, #0
 800286c:	6078      	str	r0, [r7, #4]

	uint8_t data[6] = {0};
 800286e:	f107 030c 	add.w	r3, r7, #12
 8002872:	2200      	movs	r2, #0
 8002874:	601a      	str	r2, [r3, #0]
 8002876:	809a      	strh	r2, [r3, #4]
	I2C1_Write(MAG, 0x31, 0x01); // single measurement
 8002878:	2201      	movs	r2, #1
 800287a:	2131      	movs	r1, #49	; 0x31
 800287c:	200c      	movs	r0, #12
 800287e:	f000 f89d 	bl	80029bc <I2C1_Write>
	while ((I2C1_Read(MAG, 0x10, NULL, 1) & 0x01) != 0x01); // wait till data ready
 8002882:	bf00      	nop
 8002884:	2301      	movs	r3, #1
 8002886:	2200      	movs	r2, #0
 8002888:	2110      	movs	r1, #16
 800288a:	200c      	movs	r0, #12
 800288c:	f000 f84a 	bl	8002924 <I2C1_Read>
 8002890:	4603      	mov	r3, r0
 8002892:	f003 0301 	and.w	r3, r3, #1
 8002896:	2b01      	cmp	r3, #1
 8002898:	d1f4      	bne.n	8002884 <Get_Mag+0x1e>
	I2C1_Read(MAG, 0x11, data, 6); // read mag data
 800289a:	f107 020c 	add.w	r2, r7, #12
 800289e:	2306      	movs	r3, #6
 80028a0:	2111      	movs	r1, #17
 80028a2:	200c      	movs	r0, #12
 80028a4:	f000 f83e 	bl	8002924 <I2C1_Read>
	uint8_t sr2 = I2C1_Read(MAG, 0x18, NULL, 1); // required
 80028a8:	2301      	movs	r3, #1
 80028aa:	2200      	movs	r2, #0
 80028ac:	2118      	movs	r1, #24
 80028ae:	200c      	movs	r0, #12
 80028b0:	f000 f838 	bl	8002924 <I2C1_Read>
 80028b4:	4603      	mov	r3, r0
 80028b6:	74fb      	strb	r3, [r7, #19]
	for (int i = 0; i < 3; i++) {
 80028b8:	2300      	movs	r3, #0
 80028ba:	617b      	str	r3, [r7, #20]
 80028bc:	e01b      	b.n	80028f6 <Get_Mag+0x90>
		output[i] = data[i*2] | (data[i*2+1] << 8); // big-endian
 80028be:	697b      	ldr	r3, [r7, #20]
 80028c0:	005b      	lsls	r3, r3, #1
 80028c2:	f107 0218 	add.w	r2, r7, #24
 80028c6:	4413      	add	r3, r2
 80028c8:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 80028cc:	b219      	sxth	r1, r3
 80028ce:	697b      	ldr	r3, [r7, #20]
 80028d0:	005b      	lsls	r3, r3, #1
 80028d2:	3301      	adds	r3, #1
 80028d4:	f107 0218 	add.w	r2, r7, #24
 80028d8:	4413      	add	r3, r2
 80028da:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 80028de:	021b      	lsls	r3, r3, #8
 80028e0:	b21a      	sxth	r2, r3
 80028e2:	697b      	ldr	r3, [r7, #20]
 80028e4:	005b      	lsls	r3, r3, #1
 80028e6:	6878      	ldr	r0, [r7, #4]
 80028e8:	4403      	add	r3, r0
 80028ea:	430a      	orrs	r2, r1
 80028ec:	b212      	sxth	r2, r2
 80028ee:	801a      	strh	r2, [r3, #0]
	for (int i = 0; i < 3; i++) {
 80028f0:	697b      	ldr	r3, [r7, #20]
 80028f2:	3301      	adds	r3, #1
 80028f4:	617b      	str	r3, [r7, #20]
 80028f6:	697b      	ldr	r3, [r7, #20]
 80028f8:	2b02      	cmp	r3, #2
 80028fa:	dde0      	ble.n	80028be <Get_Mag+0x58>
	}
}
 80028fc:	bf00      	nop
 80028fe:	3718      	adds	r7, #24
 8002900:	46bd      	mov	sp, r7
 8002902:	bd80      	pop	{r7, pc}

08002904 <Get_Sensor>:

void Get_Sensor(int16_t* output) {
 8002904:	b580      	push	{r7, lr}
 8002906:	b082      	sub	sp, #8
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
	Get_Acc_Gyr(output);
 800290c:	6878      	ldr	r0, [r7, #4]
 800290e:	f7ff ff73 	bl	80027f8 <Get_Acc_Gyr>
	Get_Mag(output + 6);
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	330c      	adds	r3, #12
 8002916:	4618      	mov	r0, r3
 8002918:	f7ff ffa5 	bl	8002866 <Get_Mag>
}
 800291c:	bf00      	nop
 800291e:	3708      	adds	r7, #8
 8002920:	46bd      	mov	sp, r7
 8002922:	bd80      	pop	{r7, pc}

08002924 <I2C1_Read>:


uint8_t I2C1_Read(uint8_t device, uint8_t RA, uint8_t* output, int registers) {
 8002924:	b590      	push	{r4, r7, lr}
 8002926:	b087      	sub	sp, #28
 8002928:	af00      	add	r7, sp, #0
 800292a:	60ba      	str	r2, [r7, #8]
 800292c:	607b      	str	r3, [r7, #4]
 800292e:	4603      	mov	r3, r0
 8002930:	73fb      	strb	r3, [r7, #15]
 8002932:	460b      	mov	r3, r1
 8002934:	73bb      	strb	r3, [r7, #14]

	I2C1_Start(); // start signal
 8002936:	f000 f885 	bl	8002a44 <I2C1_Start>
	I2C1_Address(device << 1); // 7-bit address + write
 800293a:	7bfb      	ldrb	r3, [r7, #15]
 800293c:	005b      	lsls	r3, r3, #1
 800293e:	b2db      	uxtb	r3, r3
 8002940:	4618      	mov	r0, r3
 8002942:	f000 f899 	bl	8002a78 <I2C1_Address>
	I2C1_Transmit(RA); // register address
 8002946:	7bbb      	ldrb	r3, [r7, #14]
 8002948:	4618      	mov	r0, r3
 800294a:	f000 f8af 	bl	8002aac <I2C1_Transmit>
	I2C1_Start(); // start signal
 800294e:	f000 f879 	bl	8002a44 <I2C1_Start>
	I2C1_Address((device << 1) + 1); // 7-bit address + read
 8002952:	7bfb      	ldrb	r3, [r7, #15]
 8002954:	005b      	lsls	r3, r3, #1
 8002956:	b2db      	uxtb	r3, r3
 8002958:	3301      	adds	r3, #1
 800295a:	b2db      	uxtb	r3, r3
 800295c:	4618      	mov	r0, r3
 800295e:	f000 f88b 	bl	8002a78 <I2C1_Address>
	//I2C1_NACK();
	if (output == NULL) {
 8002962:	68bb      	ldr	r3, [r7, #8]
 8002964:	2b00      	cmp	r3, #0
 8002966:	d107      	bne.n	8002978 <I2C1_Read+0x54>
		uint8_t ret = I2C1_Receive(); // receive byte
 8002968:	f000 f8be 	bl	8002ae8 <I2C1_Receive>
 800296c:	4603      	mov	r3, r0
 800296e:	74fb      	strb	r3, [r7, #19]
		I2C1_Stop(); // stop signal
 8002970:	f000 f878 	bl	8002a64 <I2C1_Stop>
		return ret;
 8002974:	7cfb      	ldrb	r3, [r7, #19]
 8002976:	e01d      	b.n	80029b4 <I2C1_Read+0x90>
	}
	I2C1_ACK();
 8002978:	f000 f8c8 	bl	8002b0c <I2C1_ACK>
	for (int i = 0; i < registers; i++) {
 800297c:	2300      	movs	r3, #0
 800297e:	617b      	str	r3, [r7, #20]
 8002980:	e010      	b.n	80029a4 <I2C1_Read+0x80>
		if (i == registers - 1) {
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	3b01      	subs	r3, #1
 8002986:	697a      	ldr	r2, [r7, #20]
 8002988:	429a      	cmp	r2, r3
 800298a:	d101      	bne.n	8002990 <I2C1_Read+0x6c>
			I2C1_NACK();
 800298c:	f000 f8ce 	bl	8002b2c <I2C1_NACK>
		}
		output[i] = I2C1_Receive(); // receive byte
 8002990:	697b      	ldr	r3, [r7, #20]
 8002992:	68ba      	ldr	r2, [r7, #8]
 8002994:	18d4      	adds	r4, r2, r3
 8002996:	f000 f8a7 	bl	8002ae8 <I2C1_Receive>
 800299a:	4603      	mov	r3, r0
 800299c:	7023      	strb	r3, [r4, #0]
	for (int i = 0; i < registers; i++) {
 800299e:	697b      	ldr	r3, [r7, #20]
 80029a0:	3301      	adds	r3, #1
 80029a2:	617b      	str	r3, [r7, #20]
 80029a4:	697a      	ldr	r2, [r7, #20]
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	429a      	cmp	r2, r3
 80029aa:	dbea      	blt.n	8002982 <I2C1_Read+0x5e>
	}
	I2C1_Stop(); // stop signal
 80029ac:	f000 f85a 	bl	8002a64 <I2C1_Stop>
	return output[0];
 80029b0:	68bb      	ldr	r3, [r7, #8]
 80029b2:	781b      	ldrb	r3, [r3, #0]
}
 80029b4:	4618      	mov	r0, r3
 80029b6:	371c      	adds	r7, #28
 80029b8:	46bd      	mov	sp, r7
 80029ba:	bd90      	pop	{r4, r7, pc}

080029bc <I2C1_Write>:

void I2C1_Write(uint8_t device, uint8_t RA, uint8_t data) {
 80029bc:	b580      	push	{r7, lr}
 80029be:	b082      	sub	sp, #8
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	4603      	mov	r3, r0
 80029c4:	71fb      	strb	r3, [r7, #7]
 80029c6:	460b      	mov	r3, r1
 80029c8:	71bb      	strb	r3, [r7, #6]
 80029ca:	4613      	mov	r3, r2
 80029cc:	717b      	strb	r3, [r7, #5]
	I2C1_Start(); // start signal
 80029ce:	f000 f839 	bl	8002a44 <I2C1_Start>
	I2C1_Address(device << 1); // 7-bit address + write
 80029d2:	79fb      	ldrb	r3, [r7, #7]
 80029d4:	005b      	lsls	r3, r3, #1
 80029d6:	b2db      	uxtb	r3, r3
 80029d8:	4618      	mov	r0, r3
 80029da:	f000 f84d 	bl	8002a78 <I2C1_Address>
	I2C1_Transmit(RA); // register address
 80029de:	79bb      	ldrb	r3, [r7, #6]
 80029e0:	4618      	mov	r0, r3
 80029e2:	f000 f863 	bl	8002aac <I2C1_Transmit>
	I2C1_Transmit(data); // write data
 80029e6:	797b      	ldrb	r3, [r7, #5]
 80029e8:	4618      	mov	r0, r3
 80029ea:	f000 f85f 	bl	8002aac <I2C1_Transmit>
	I2C1_Stop();
 80029ee:	f000 f839 	bl	8002a64 <I2C1_Stop>
}
 80029f2:	bf00      	nop
 80029f4:	3708      	adds	r7, #8
 80029f6:	46bd      	mov	sp, r7
 80029f8:	bd80      	pop	{r7, pc}

080029fa <IMU_Wake>:

void IMU_Wake(void) {
 80029fa:	b580      	push	{r7, lr}
 80029fc:	af00      	add	r7, sp, #0
	I2C1_Write(0x69, 0x06, 0x01);
 80029fe:	2201      	movs	r2, #1
 8002a00:	2106      	movs	r1, #6
 8002a02:	2069      	movs	r0, #105	; 0x69
 8002a04:	f7ff ffda 	bl	80029bc <I2C1_Write>
	LL_mDelay(50);
 8002a08:	2032      	movs	r0, #50	; 0x32
 8002a0a:	f001 fd4f 	bl	80044ac <LL_mDelay>
}
 8002a0e:	bf00      	nop
 8002a10:	bd80      	pop	{r7, pc}

08002a12 <IMU_Bank>:

void IMU_Bank(int bank) {
 8002a12:	b580      	push	{r7, lr}
 8002a14:	b082      	sub	sp, #8
 8002a16:	af00      	add	r7, sp, #0
 8002a18:	6078      	str	r0, [r7, #4]
	I2C1_Write(0x69, 0x7F, bank);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	b2db      	uxtb	r3, r3
 8002a1e:	461a      	mov	r2, r3
 8002a20:	217f      	movs	r1, #127	; 0x7f
 8002a22:	2069      	movs	r0, #105	; 0x69
 8002a24:	f7ff ffca 	bl	80029bc <I2C1_Write>
}
 8002a28:	bf00      	nop
 8002a2a:	3708      	adds	r7, #8
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	bd80      	pop	{r7, pc}

08002a30 <IMU_Bypass>:

void IMU_Bypass(void) {
 8002a30:	b580      	push	{r7, lr}
 8002a32:	af00      	add	r7, sp, #0
	I2C1_Write(IMU, 0x0F, 0x02);
 8002a34:	2202      	movs	r2, #2
 8002a36:	210f      	movs	r1, #15
 8002a38:	2069      	movs	r0, #105	; 0x69
 8002a3a:	f7ff ffbf 	bl	80029bc <I2C1_Write>
}
 8002a3e:	bf00      	nop
 8002a40:	bd80      	pop	{r7, pc}
	...

08002a44 <I2C1_Start>:

void I2C1_Start(void) {
 8002a44:	b580      	push	{r7, lr}
 8002a46:	af00      	add	r7, sp, #0

	LL_I2C_GenerateStartCondition(I2C1);
 8002a48:	4805      	ldr	r0, [pc, #20]	; (8002a60 <I2C1_Start+0x1c>)
 8002a4a:	f7ff fe94 	bl	8002776 <LL_I2C_GenerateStartCondition>
	while (!LL_I2C_IsActiveFlag_SB(I2C1));
 8002a4e:	bf00      	nop
 8002a50:	4803      	ldr	r0, [pc, #12]	; (8002a60 <I2C1_Start+0x1c>)
 8002a52:	f7ff fe58 	bl	8002706 <LL_I2C_IsActiveFlag_SB>
 8002a56:	4603      	mov	r3, r0
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d0f9      	beq.n	8002a50 <I2C1_Start+0xc>
}
 8002a5c:	bf00      	nop
 8002a5e:	bd80      	pop	{r7, pc}
 8002a60:	40005400 	.word	0x40005400

08002a64 <I2C1_Stop>:

void I2C1_Stop(void) {
 8002a64:	b580      	push	{r7, lr}
 8002a66:	af00      	add	r7, sp, #0

	LL_I2C_GenerateStopCondition(I2C1);
 8002a68:	4802      	ldr	r0, [pc, #8]	; (8002a74 <I2C1_Stop+0x10>)
 8002a6a:	f7ff fe94 	bl	8002796 <LL_I2C_GenerateStopCondition>
}
 8002a6e:	bf00      	nop
 8002a70:	bd80      	pop	{r7, pc}
 8002a72:	bf00      	nop
 8002a74:	40005400 	.word	0x40005400

08002a78 <I2C1_Address>:

void I2C1_Address(uint8_t address) {
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b082      	sub	sp, #8
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	4603      	mov	r3, r0
 8002a80:	71fb      	strb	r3, [r7, #7]

	LL_I2C_TransmitData8(I2C1, address);
 8002a82:	79fb      	ldrb	r3, [r7, #7]
 8002a84:	4619      	mov	r1, r3
 8002a86:	4808      	ldr	r0, [pc, #32]	; (8002aa8 <I2C1_Address+0x30>)
 8002a88:	f7ff fea2 	bl	80027d0 <LL_I2C_TransmitData8>
	while (!LL_I2C_IsActiveFlag_ADDR(I2C1));
 8002a8c:	bf00      	nop
 8002a8e:	4806      	ldr	r0, [pc, #24]	; (8002aa8 <I2C1_Address+0x30>)
 8002a90:	f7ff fe4c 	bl	800272c <LL_I2C_IsActiveFlag_ADDR>
 8002a94:	4603      	mov	r3, r0
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d0f9      	beq.n	8002a8e <I2C1_Address+0x16>
	LL_I2C_ClearFlag_ADDR(I2C1);
 8002a9a:	4803      	ldr	r0, [pc, #12]	; (8002aa8 <I2C1_Address+0x30>)
 8002a9c:	f7ff fe59 	bl	8002752 <LL_I2C_ClearFlag_ADDR>
}
 8002aa0:	bf00      	nop
 8002aa2:	3708      	adds	r7, #8
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	bd80      	pop	{r7, pc}
 8002aa8:	40005400 	.word	0x40005400

08002aac <I2C1_Transmit>:

void I2C1_Transmit(uint8_t data) {
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b082      	sub	sp, #8
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	4603      	mov	r3, r0
 8002ab4:	71fb      	strb	r3, [r7, #7]

	while (!LL_I2C_IsActiveFlag_TXE(I2C1));
 8002ab6:	bf00      	nop
 8002ab8:	480a      	ldr	r0, [pc, #40]	; (8002ae4 <I2C1_Transmit+0x38>)
 8002aba:	f7ff fdeb 	bl	8002694 <LL_I2C_IsActiveFlag_TXE>
 8002abe:	4603      	mov	r3, r0
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d0f9      	beq.n	8002ab8 <I2C1_Transmit+0xc>
	LL_I2C_TransmitData8(I2C1, data);
 8002ac4:	79fb      	ldrb	r3, [r7, #7]
 8002ac6:	4619      	mov	r1, r3
 8002ac8:	4806      	ldr	r0, [pc, #24]	; (8002ae4 <I2C1_Transmit+0x38>)
 8002aca:	f7ff fe81 	bl	80027d0 <LL_I2C_TransmitData8>
	while (!LL_I2C_IsActiveFlag_BTF(I2C1));
 8002ace:	bf00      	nop
 8002ad0:	4804      	ldr	r0, [pc, #16]	; (8002ae4 <I2C1_Transmit+0x38>)
 8002ad2:	f7ff fdf2 	bl	80026ba <LL_I2C_IsActiveFlag_BTF>
 8002ad6:	4603      	mov	r3, r0
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d0f9      	beq.n	8002ad0 <I2C1_Transmit+0x24>
}
 8002adc:	bf00      	nop
 8002ade:	3708      	adds	r7, #8
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	bd80      	pop	{r7, pc}
 8002ae4:	40005400 	.word	0x40005400

08002ae8 <I2C1_Receive>:

uint8_t I2C1_Receive(void) {
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	af00      	add	r7, sp, #0

	while (!LL_I2C_IsActiveFlag_RXNE(I2C1));
 8002aec:	bf00      	nop
 8002aee:	4806      	ldr	r0, [pc, #24]	; (8002b08 <I2C1_Receive+0x20>)
 8002af0:	f7ff fdf6 	bl	80026e0 <LL_I2C_IsActiveFlag_RXNE>
 8002af4:	4603      	mov	r3, r0
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d0f9      	beq.n	8002aee <I2C1_Receive+0x6>
	return LL_I2C_ReceiveData8(I2C1);
 8002afa:	4803      	ldr	r0, [pc, #12]	; (8002b08 <I2C1_Receive+0x20>)
 8002afc:	f7ff fe5b 	bl	80027b6 <LL_I2C_ReceiveData8>
 8002b00:	4603      	mov	r3, r0
}
 8002b02:	4618      	mov	r0, r3
 8002b04:	bd80      	pop	{r7, pc}
 8002b06:	bf00      	nop
 8002b08:	40005400 	.word	0x40005400

08002b0c <I2C1_ACK>:

void I2C1_ACK(void) {
 8002b0c:	b480      	push	{r7}
 8002b0e:	af00      	add	r7, sp, #0

	SET_BIT(I2C1->CR1, LL_I2C_ACK);
 8002b10:	4b05      	ldr	r3, [pc, #20]	; (8002b28 <I2C1_ACK+0x1c>)
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	4a04      	ldr	r2, [pc, #16]	; (8002b28 <I2C1_ACK+0x1c>)
 8002b16:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002b1a:	6013      	str	r3, [r2, #0]
}
 8002b1c:	bf00      	nop
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b24:	4770      	bx	lr
 8002b26:	bf00      	nop
 8002b28:	40005400 	.word	0x40005400

08002b2c <I2C1_NACK>:

void I2C1_NACK(void) {
 8002b2c:	b480      	push	{r7}
 8002b2e:	af00      	add	r7, sp, #0

	CLEAR_BIT(I2C1->CR1, LL_I2C_ACK);
 8002b30:	4b05      	ldr	r3, [pc, #20]	; (8002b48 <I2C1_NACK+0x1c>)
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	4a04      	ldr	r2, [pc, #16]	; (8002b48 <I2C1_NACK+0x1c>)
 8002b36:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002b3a:	6013      	str	r3, [r2, #0]
}
 8002b3c:	bf00      	nop
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b44:	4770      	bx	lr
 8002b46:	bf00      	nop
 8002b48:	40005400 	.word	0x40005400

08002b4c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b4c:	b480      	push	{r7}
 8002b4e:	b085      	sub	sp, #20
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	f003 0307 	and.w	r3, r3, #7
 8002b5a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002b5c:	4b0c      	ldr	r3, [pc, #48]	; (8002b90 <__NVIC_SetPriorityGrouping+0x44>)
 8002b5e:	68db      	ldr	r3, [r3, #12]
 8002b60:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002b62:	68ba      	ldr	r2, [r7, #8]
 8002b64:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002b68:	4013      	ands	r3, r2
 8002b6a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002b70:	68bb      	ldr	r3, [r7, #8]
 8002b72:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002b74:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002b78:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b7c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002b7e:	4a04      	ldr	r2, [pc, #16]	; (8002b90 <__NVIC_SetPriorityGrouping+0x44>)
 8002b80:	68bb      	ldr	r3, [r7, #8]
 8002b82:	60d3      	str	r3, [r2, #12]
}
 8002b84:	bf00      	nop
 8002b86:	3714      	adds	r7, #20
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8e:	4770      	bx	lr
 8002b90:	e000ed00 	.word	0xe000ed00

08002b94 <LL_I2C_EnableClockStretching>:
{
 8002b94:	b480      	push	{r7}
 8002b96:	b083      	sub	sp, #12
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_NOSTRETCH);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	601a      	str	r2, [r3, #0]
}
 8002ba8:	bf00      	nop
 8002baa:	370c      	adds	r7, #12
 8002bac:	46bd      	mov	sp, r7
 8002bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb2:	4770      	bx	lr

08002bb4 <LL_I2C_DisableGeneralCall>:
{
 8002bb4:	b480      	push	{r7}
 8002bb6:	b083      	sub	sp, #12
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_ENGC);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	601a      	str	r2, [r3, #0]
}
 8002bc8:	bf00      	nop
 8002bca:	370c      	adds	r7, #12
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd2:	4770      	bx	lr

08002bd4 <LL_I2C_SetOwnAddress2>:
{
 8002bd4:	b480      	push	{r7}
 8002bd6:	b083      	sub	sp, #12
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]
 8002bdc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->OAR2, I2C_OAR2_ADD2, OwnAddress2);
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	68db      	ldr	r3, [r3, #12]
 8002be2:	f023 02fe 	bic.w	r2, r3, #254	; 0xfe
 8002be6:	683b      	ldr	r3, [r7, #0]
 8002be8:	431a      	orrs	r2, r3
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	60da      	str	r2, [r3, #12]
}
 8002bee:	bf00      	nop
 8002bf0:	370c      	adds	r7, #12
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf8:	4770      	bx	lr

08002bfa <LL_I2C_DisableOwnAddress2>:
{
 8002bfa:	b480      	push	{r7}
 8002bfc:	b083      	sub	sp, #12
 8002bfe:	af00      	add	r7, sp, #0
 8002c00:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->OAR2, I2C_OAR2_ENDUAL);
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	68db      	ldr	r3, [r3, #12]
 8002c06:	f023 0201 	bic.w	r2, r3, #1
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	60da      	str	r2, [r3, #12]
}
 8002c0e:	bf00      	nop
 8002c10:	370c      	adds	r7, #12
 8002c12:	46bd      	mov	sp, r7
 8002c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c18:	4770      	bx	lr
	...

08002c1c <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8002c1c:	b480      	push	{r7}
 8002c1e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8002c20:	4b05      	ldr	r3, [pc, #20]	; (8002c38 <LL_RCC_HSI_Enable+0x1c>)
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	4a04      	ldr	r2, [pc, #16]	; (8002c38 <LL_RCC_HSI_Enable+0x1c>)
 8002c26:	f043 0301 	orr.w	r3, r3, #1
 8002c2a:	6013      	str	r3, [r2, #0]
}
 8002c2c:	bf00      	nop
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c34:	4770      	bx	lr
 8002c36:	bf00      	nop
 8002c38:	40023800 	.word	0x40023800

08002c3c <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8002c3c:	b480      	push	{r7}
 8002c3e:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 8002c40:	4b06      	ldr	r3, [pc, #24]	; (8002c5c <LL_RCC_HSI_IsReady+0x20>)
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f003 0302 	and.w	r3, r3, #2
 8002c48:	2b02      	cmp	r3, #2
 8002c4a:	bf0c      	ite	eq
 8002c4c:	2301      	moveq	r3, #1
 8002c4e:	2300      	movne	r3, #0
 8002c50:	b2db      	uxtb	r3, r3
}
 8002c52:	4618      	mov	r0, r3
 8002c54:	46bd      	mov	sp, r7
 8002c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5a:	4770      	bx	lr
 8002c5c:	40023800 	.word	0x40023800

08002c60 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll CR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 31
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8002c60:	b480      	push	{r7}
 8002c62:	b083      	sub	sp, #12
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, Value << RCC_CR_HSITRIM_Pos);
 8002c68:	4b07      	ldr	r3, [pc, #28]	; (8002c88 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	00db      	lsls	r3, r3, #3
 8002c74:	4904      	ldr	r1, [pc, #16]	; (8002c88 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 8002c76:	4313      	orrs	r3, r2
 8002c78:	600b      	str	r3, [r1, #0]
}
 8002c7a:	bf00      	nop
 8002c7c:	370c      	adds	r7, #12
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c84:	4770      	bx	lr
 8002c86:	bf00      	nop
 8002c88:	40023800 	.word	0x40023800

08002c8c <LL_RCC_SetSysClkSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8002c8c:	b480      	push	{r7}
 8002c8e:	b083      	sub	sp, #12
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8002c94:	4b06      	ldr	r3, [pc, #24]	; (8002cb0 <LL_RCC_SetSysClkSource+0x24>)
 8002c96:	689b      	ldr	r3, [r3, #8]
 8002c98:	f023 0203 	bic.w	r2, r3, #3
 8002c9c:	4904      	ldr	r1, [pc, #16]	; (8002cb0 <LL_RCC_SetSysClkSource+0x24>)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	4313      	orrs	r3, r2
 8002ca2:	608b      	str	r3, [r1, #8]
}
 8002ca4:	bf00      	nop
 8002ca6:	370c      	adds	r7, #12
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cae:	4770      	bx	lr
 8002cb0:	40023800 	.word	0x40023800

08002cb4 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLLR (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8002cb4:	b480      	push	{r7}
 8002cb6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8002cb8:	4b04      	ldr	r3, [pc, #16]	; (8002ccc <LL_RCC_GetSysClkSource+0x18>)
 8002cba:	689b      	ldr	r3, [r3, #8]
 8002cbc:	f003 030c 	and.w	r3, r3, #12
}
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc8:	4770      	bx	lr
 8002cca:	bf00      	nop
 8002ccc:	40023800 	.word	0x40023800

08002cd0 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8002cd0:	b480      	push	{r7}
 8002cd2:	b083      	sub	sp, #12
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8002cd8:	4b06      	ldr	r3, [pc, #24]	; (8002cf4 <LL_RCC_SetAHBPrescaler+0x24>)
 8002cda:	689b      	ldr	r3, [r3, #8]
 8002cdc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ce0:	4904      	ldr	r1, [pc, #16]	; (8002cf4 <LL_RCC_SetAHBPrescaler+0x24>)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	4313      	orrs	r3, r2
 8002ce6:	608b      	str	r3, [r1, #8]
}
 8002ce8:	bf00      	nop
 8002cea:	370c      	adds	r7, #12
 8002cec:	46bd      	mov	sp, r7
 8002cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf2:	4770      	bx	lr
 8002cf4:	40023800 	.word	0x40023800

08002cf8 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8002cf8:	b480      	push	{r7}
 8002cfa:	b083      	sub	sp, #12
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8002d00:	4b06      	ldr	r3, [pc, #24]	; (8002d1c <LL_RCC_SetAPB1Prescaler+0x24>)
 8002d02:	689b      	ldr	r3, [r3, #8]
 8002d04:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002d08:	4904      	ldr	r1, [pc, #16]	; (8002d1c <LL_RCC_SetAPB1Prescaler+0x24>)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	4313      	orrs	r3, r2
 8002d0e:	608b      	str	r3, [r1, #8]
}
 8002d10:	bf00      	nop
 8002d12:	370c      	adds	r7, #12
 8002d14:	46bd      	mov	sp, r7
 8002d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1a:	4770      	bx	lr
 8002d1c:	40023800 	.word	0x40023800

08002d20 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8002d20:	b480      	push	{r7}
 8002d22:	b083      	sub	sp, #12
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8002d28:	4b06      	ldr	r3, [pc, #24]	; (8002d44 <LL_RCC_SetAPB2Prescaler+0x24>)
 8002d2a:	689b      	ldr	r3, [r3, #8]
 8002d2c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002d30:	4904      	ldr	r1, [pc, #16]	; (8002d44 <LL_RCC_SetAPB2Prescaler+0x24>)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	4313      	orrs	r3, r2
 8002d36:	608b      	str	r3, [r1, #8]
}
 8002d38:	bf00      	nop
 8002d3a:	370c      	adds	r7, #12
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d42:	4770      	bx	lr
 8002d44:	40023800 	.word	0x40023800

08002d48 <LL_RCC_SetTIMPrescaler>:
  *         @arg @ref LL_RCC_TIM_PRESCALER_TWICE
  *         @arg @ref LL_RCC_TIM_PRESCALER_FOUR_TIMES
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetTIMPrescaler(uint32_t Prescaler)
{
 8002d48:	b480      	push	{r7}
 8002d4a:	b083      	sub	sp, #12
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->DCKCFGR, RCC_DCKCFGR_TIMPRE, Prescaler);
 8002d50:	4b07      	ldr	r3, [pc, #28]	; (8002d70 <LL_RCC_SetTIMPrescaler+0x28>)
 8002d52:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002d56:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8002d5a:	4905      	ldr	r1, [pc, #20]	; (8002d70 <LL_RCC_SetTIMPrescaler+0x28>)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	4313      	orrs	r3, r2
 8002d60:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
}
 8002d64:	bf00      	nop
 8002d66:	370c      	adds	r7, #12
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6e:	4770      	bx	lr
 8002d70:	40023800 	.word	0x40023800

08002d74 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8002d74:	b480      	push	{r7}
 8002d76:	b085      	sub	sp, #20
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8002d7c:	4b08      	ldr	r3, [pc, #32]	; (8002da0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8002d7e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002d80:	4907      	ldr	r1, [pc, #28]	; (8002da0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	4313      	orrs	r3, r2
 8002d86:	630b      	str	r3, [r1, #48]	; 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8002d88:	4b05      	ldr	r3, [pc, #20]	; (8002da0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8002d8a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	4013      	ands	r3, r2
 8002d90:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002d92:	68fb      	ldr	r3, [r7, #12]
}
 8002d94:	bf00      	nop
 8002d96:	3714      	adds	r7, #20
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9e:	4770      	bx	lr
 8002da0:	40023800 	.word	0x40023800

08002da4 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8002da4:	b480      	push	{r7}
 8002da6:	b085      	sub	sp, #20
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8002dac:	4b08      	ldr	r3, [pc, #32]	; (8002dd0 <LL_APB1_GRP1_EnableClock+0x2c>)
 8002dae:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002db0:	4907      	ldr	r1, [pc, #28]	; (8002dd0 <LL_APB1_GRP1_EnableClock+0x2c>)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	4313      	orrs	r3, r2
 8002db6:	640b      	str	r3, [r1, #64]	; 0x40
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8002db8:	4b05      	ldr	r3, [pc, #20]	; (8002dd0 <LL_APB1_GRP1_EnableClock+0x2c>)
 8002dba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	4013      	ands	r3, r2
 8002dc0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002dc2:	68fb      	ldr	r3, [r7, #12]
}
 8002dc4:	bf00      	nop
 8002dc6:	3714      	adds	r7, #20
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dce:	4770      	bx	lr
 8002dd0:	40023800 	.word	0x40023800

08002dd4 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8002dd4:	b480      	push	{r7}
 8002dd6:	b085      	sub	sp, #20
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8002ddc:	4b08      	ldr	r3, [pc, #32]	; (8002e00 <LL_APB2_GRP1_EnableClock+0x2c>)
 8002dde:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002de0:	4907      	ldr	r1, [pc, #28]	; (8002e00 <LL_APB2_GRP1_EnableClock+0x2c>)
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	4313      	orrs	r3, r2
 8002de6:	644b      	str	r3, [r1, #68]	; 0x44
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8002de8:	4b05      	ldr	r3, [pc, #20]	; (8002e00 <LL_APB2_GRP1_EnableClock+0x2c>)
 8002dea:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	4013      	ands	r3, r2
 8002df0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002df2:	68fb      	ldr	r3, [r7, #12]
}
 8002df4:	bf00      	nop
 8002df6:	3714      	adds	r7, #20
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfe:	4770      	bx	lr
 8002e00:	40023800 	.word	0x40023800

08002e04 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8002e04:	b480      	push	{r7}
 8002e06:	b083      	sub	sp, #12
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8002e0c:	4b06      	ldr	r3, [pc, #24]	; (8002e28 <LL_FLASH_SetLatency+0x24>)
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f023 020f 	bic.w	r2, r3, #15
 8002e14:	4904      	ldr	r1, [pc, #16]	; (8002e28 <LL_FLASH_SetLatency+0x24>)
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	4313      	orrs	r3, r2
 8002e1a:	600b      	str	r3, [r1, #0]
}
 8002e1c:	bf00      	nop
 8002e1e:	370c      	adds	r7, #12
 8002e20:	46bd      	mov	sp, r7
 8002e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e26:	4770      	bx	lr
 8002e28:	40023c00 	.word	0x40023c00

08002e2c <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_13
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8002e2c:	b480      	push	{r7}
 8002e2e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8002e30:	4b04      	ldr	r3, [pc, #16]	; (8002e44 <LL_FLASH_GetLatency+0x18>)
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f003 030f 	and.w	r3, r3, #15
}
 8002e38:	4618      	mov	r0, r3
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e40:	4770      	bx	lr
 8002e42:	bf00      	nop
 8002e44:	40023c00 	.word	0x40023c00

08002e48 <LL_PWR_SetRegulVoltageScaling>:
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE3
  *         (*) LL_PWR_REGU_VOLTAGE_SCALE1 is not available for STM32F401xx devices
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
 8002e48:	b480      	push	{r7}
 8002e4a:	b083      	sub	sp, #12
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR, PWR_CR_VOS, VoltageScaling);
 8002e50:	4b06      	ldr	r3, [pc, #24]	; (8002e6c <LL_PWR_SetRegulVoltageScaling+0x24>)
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002e58:	4904      	ldr	r1, [pc, #16]	; (8002e6c <LL_PWR_SetRegulVoltageScaling+0x24>)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	4313      	orrs	r3, r2
 8002e5e:	600b      	str	r3, [r1, #0]
}
 8002e60:	bf00      	nop
 8002e62:	370c      	adds	r7, #12
 8002e64:	46bd      	mov	sp, r7
 8002e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6a:	4770      	bx	lr
 8002e6c:	40007000 	.word	0x40007000

08002e70 <LL_TIM_DisableARRPreload>:
  * @rmtoll CR1          ARPE          LL_TIM_DisableARRPreload
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableARRPreload(TIM_TypeDef *TIMx)
{
 8002e70:	b480      	push	{r7}
 8002e72:	b083      	sub	sp, #12
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	601a      	str	r2, [r3, #0]
}
 8002e84:	bf00      	nop
 8002e86:	370c      	adds	r7, #12
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8e:	4770      	bx	lr

08002e90 <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 8002e90:	b480      	push	{r7}
 8002e92:	b083      	sub	sp, #12
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	68db      	ldr	r3, [r3, #12]
 8002e9c:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	60da      	str	r2, [r3, #12]
}
 8002ea4:	bf00      	nop
 8002ea6:	370c      	adds	r7, #12
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eae:	4770      	bx	lr

08002eb0 <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 8002eb0:	b480      	push	{r7}
 8002eb2:	b083      	sub	sp, #12
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.*/
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	691b      	ldr	r3, [r3, #16]
 8002ebc:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	695b      	ldr	r3, [r3, #20]
 8002ec8:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	615a      	str	r2, [r3, #20]
}
 8002ed0:	bf00      	nop
 8002ed2:	370c      	adds	r7, #12
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eda:	4770      	bx	lr

08002edc <LL_USART_IsActiveFlag_TC>:
  * @rmtoll SR           TC            LL_USART_IsActiveFlag_TC
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TC(USART_TypeDef *USARTx)
{
 8002edc:	b480      	push	{r7}
 8002ede:	b083      	sub	sp, #12
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_TC) == (USART_SR_TC));
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002eec:	2b40      	cmp	r3, #64	; 0x40
 8002eee:	bf0c      	ite	eq
 8002ef0:	2301      	moveq	r3, #1
 8002ef2:	2300      	movne	r3, #0
 8002ef4:	b2db      	uxtb	r3, r3
}
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	370c      	adds	r7, #12
 8002efa:	46bd      	mov	sp, r7
 8002efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f00:	4770      	bx	lr

08002f02 <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 8002f02:	b480      	push	{r7}
 8002f04:	b083      	sub	sp, #12
 8002f06:	af00      	add	r7, sp, #0
 8002f08:	6078      	str	r0, [r7, #4]
 8002f0a:	460b      	mov	r3, r1
 8002f0c:	70fb      	strb	r3, [r7, #3]
  USARTx->DR = Value;
 8002f0e:	78fa      	ldrb	r2, [r7, #3]
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	605a      	str	r2, [r3, #4]
}
 8002f14:	bf00      	nop
 8002f16:	370c      	adds	r7, #12
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1e:	4770      	bx	lr

08002f20 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8002f20:	b480      	push	{r7}
 8002f22:	b083      	sub	sp, #12
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	6078      	str	r0, [r7, #4]
 8002f28:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8002f2a:	683b      	ldr	r3, [r7, #0]
 8002f2c:	041a      	lsls	r2, r3, #16
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	619a      	str	r2, [r3, #24]
}
 8002f32:	bf00      	nop
 8002f34:	370c      	adds	r7, #12
 8002f36:	46bd      	mov	sp, r7
 8002f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3c:	4770      	bx	lr

08002f3e <LL_GPIO_TogglePin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8002f3e:	b480      	push	{r7}
 8002f40:	b083      	sub	sp, #12
 8002f42:	af00      	add	r7, sp, #0
 8002f44:	6078      	str	r0, [r7, #4]
 8002f46:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->ODR, READ_REG(GPIOx->ODR) ^ PinMask);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	695a      	ldr	r2, [r3, #20]
 8002f4c:	683b      	ldr	r3, [r7, #0]
 8002f4e:	405a      	eors	r2, r3
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	615a      	str	r2, [r3, #20]
}
 8002f54:	bf00      	nop
 8002f56:	370c      	adds	r7, #12
 8002f58:	46bd      	mov	sp, r7
 8002f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5e:	4770      	bx	lr

08002f60 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002f60:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002f64:	b09c      	sub	sp, #112	; 0x70
 8002f66:	af06      	add	r7, sp, #24
  /* USER CODE BEGIN 1 */

	float Quaternion[4] = {1.0, 0.0, 0.0, 0.0};
 8002f68:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8002f6c:	63bb      	str	r3, [r7, #56]	; 0x38
 8002f6e:	f04f 0300 	mov.w	r3, #0
 8002f72:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002f74:	f04f 0300 	mov.w	r3, #0
 8002f78:	643b      	str	r3, [r7, #64]	; 0x40
 8002f7a:	f04f 0300 	mov.w	r3, #0
 8002f7e:	647b      	str	r3, [r7, #68]	; 0x44

	int16_t Data[9] = {0};
 8002f80:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f84:	2200      	movs	r2, #0
 8002f86:	601a      	str	r2, [r3, #0]
 8002f88:	605a      	str	r2, [r3, #4]
 8002f8a:	609a      	str	r2, [r3, #8]
 8002f8c:	60da      	str	r2, [r3, #12]
 8002f8e:	821a      	strh	r2, [r3, #16]
	float Acc[3] = {0.0};
 8002f90:	f107 0318 	add.w	r3, r7, #24
 8002f94:	2200      	movs	r2, #0
 8002f96:	601a      	str	r2, [r3, #0]
 8002f98:	605a      	str	r2, [r3, #4]
 8002f9a:	609a      	str	r2, [r3, #8]
	float Gyr[3] = {0.0};
 8002f9c:	f107 030c 	add.w	r3, r7, #12
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	601a      	str	r2, [r3, #0]
 8002fa4:	605a      	str	r2, [r3, #4]
 8002fa6:	609a      	str	r2, [r3, #8]
	float Mag[3] = {0.0};
 8002fa8:	463b      	mov	r3, r7
 8002faa:	2200      	movs	r2, #0
 8002fac:	601a      	str	r2, [r3, #0]
 8002fae:	605a      	str	r2, [r3, #4]
 8002fb0:	609a      	str	r2, [r3, #8]

	uint16_t i = 0;
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

	uint16_t time = 0;
 8002fb8:	2300      	movs	r3, #0
 8002fba:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 8002fbe:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002fc2:	f7ff ff07 	bl	8002dd4 <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 8002fc6:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8002fca:	f7ff feeb 	bl	8002da4 <LL_APB1_GRP1_EnableClock>

  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002fce:	2003      	movs	r0, #3
 8002fd0:	f7ff fdbc 	bl	8002b4c <__NVIC_SetPriorityGrouping>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002fd4:	f000 f8fe 	bl	80031d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002fd8:	f000 fa02 	bl	80033e0 <MX_GPIO_Init>
  MX_I2C1_Init();
 8002fdc:	f000 f934 	bl	8003248 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 8002fe0:	f000 f9ae 	bl	8003340 <MX_USART2_UART_Init>
  MX_TIM10_Init();
 8002fe4:	f000 f986 	bl	80032f4 <MX_TIM10_Init>
  /* USER CODE BEGIN 2 */

  //IMU_Reset();
  IMU_Wake();
 8002fe8:	f7ff fd07 	bl	80029fa <IMU_Wake>
  IMU_Bypass();
 8002fec:	f7ff fd20 	bl	8002a30 <IMU_Bypass>

  IMU_Bank(2);
 8002ff0:	2002      	movs	r0, #2
 8002ff2:	f7ff fd0e 	bl	8002a12 <IMU_Bank>
  I2C1_Write(IMU, 0x14, 0x03); // +-4 g
 8002ff6:	2203      	movs	r2, #3
 8002ff8:	2114      	movs	r1, #20
 8002ffa:	2069      	movs	r0, #105	; 0x69
 8002ffc:	f7ff fcde 	bl	80029bc <I2C1_Write>
  //I2C1_Write(IMU, 0x01, 0x03); // +-500 dps
  IMU_Bank(0);
 8003000:	2000      	movs	r0, #0
 8003002:	f7ff fd06 	bl	8002a12 <IMU_Bank>
  {

	//LL_mDelay(100);

	/*----------- read sensor data -----------*/
	Get_Sensor(Data);
 8003006:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800300a:	4618      	mov	r0, r3
 800300c:	f7ff fc7a 	bl	8002904 <Get_Sensor>

	for (int i = 0; i < 3; i++) {
 8003010:	2300      	movs	r3, #0
 8003012:	657b      	str	r3, [r7, #84]	; 0x54
 8003014:	e01f      	b.n	8003056 <main+0xf6>
		Acc[i] = Data[i] / 8192.0;
 8003016:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003018:	005b      	lsls	r3, r3, #1
 800301a:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800301e:	4413      	add	r3, r2
 8003020:	f933 3c34 	ldrsh.w	r3, [r3, #-52]
 8003024:	4618      	mov	r0, r3
 8003026:	f7fd fa85 	bl	8000534 <__aeabi_i2d>
 800302a:	f04f 0200 	mov.w	r2, #0
 800302e:	4b64      	ldr	r3, [pc, #400]	; (80031c0 <main+0x260>)
 8003030:	f7fd fc14 	bl	800085c <__aeabi_ddiv>
 8003034:	4603      	mov	r3, r0
 8003036:	460c      	mov	r4, r1
 8003038:	4618      	mov	r0, r3
 800303a:	4621      	mov	r1, r4
 800303c:	f7fd fdbc 	bl	8000bb8 <__aeabi_d2f>
 8003040:	4602      	mov	r2, r0
 8003042:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003044:	009b      	lsls	r3, r3, #2
 8003046:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800304a:	440b      	add	r3, r1
 800304c:	3b40      	subs	r3, #64	; 0x40
 800304e:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < 3; i++) {
 8003050:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003052:	3301      	adds	r3, #1
 8003054:	657b      	str	r3, [r7, #84]	; 0x54
 8003056:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003058:	2b02      	cmp	r3, #2
 800305a:	dddc      	ble.n	8003016 <main+0xb6>
	}
	for (int i = 0; i < 3; i++) {
 800305c:	2300      	movs	r3, #0
 800305e:	653b      	str	r3, [r7, #80]	; 0x50
 8003060:	e047      	b.n	80030f2 <main+0x192>
		Gyr[i] = Data[i + 3] / 131.0;
 8003062:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003064:	3303      	adds	r3, #3
 8003066:	005b      	lsls	r3, r3, #1
 8003068:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800306c:	4413      	add	r3, r2
 800306e:	f933 3c34 	ldrsh.w	r3, [r3, #-52]
 8003072:	4618      	mov	r0, r3
 8003074:	f7fd fa5e 	bl	8000534 <__aeabi_i2d>
 8003078:	a34d      	add	r3, pc, #308	; (adr r3, 80031b0 <main+0x250>)
 800307a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800307e:	f7fd fbed 	bl	800085c <__aeabi_ddiv>
 8003082:	4603      	mov	r3, r0
 8003084:	460c      	mov	r4, r1
 8003086:	4618      	mov	r0, r3
 8003088:	4621      	mov	r1, r4
 800308a:	f7fd fd95 	bl	8000bb8 <__aeabi_d2f>
 800308e:	4602      	mov	r2, r0
 8003090:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003092:	009b      	lsls	r3, r3, #2
 8003094:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8003098:	440b      	add	r3, r1
 800309a:	3b4c      	subs	r3, #76	; 0x4c
 800309c:	601a      	str	r2, [r3, #0]
		if (Gyr[i] < 5.0 && Gyr[i] > -5.0) {
 800309e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80030a0:	009b      	lsls	r3, r3, #2
 80030a2:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80030a6:	4413      	add	r3, r2
 80030a8:	3b4c      	subs	r3, #76	; 0x4c
 80030aa:	edd3 7a00 	vldr	s15, [r3]
 80030ae:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 80030b2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80030b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80030ba:	d517      	bpl.n	80030ec <main+0x18c>
 80030bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80030be:	009b      	lsls	r3, r3, #2
 80030c0:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80030c4:	4413      	add	r3, r2
 80030c6:	3b4c      	subs	r3, #76	; 0x4c
 80030c8:	edd3 7a00 	vldr	s15, [r3]
 80030cc:	eeb9 7a04 	vmov.f32	s14, #148	; 0xc0a00000 -5.0
 80030d0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80030d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80030d8:	dd08      	ble.n	80030ec <main+0x18c>
			Gyr[i] = 0.0;
 80030da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80030dc:	009b      	lsls	r3, r3, #2
 80030de:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80030e2:	4413      	add	r3, r2
 80030e4:	3b4c      	subs	r3, #76	; 0x4c
 80030e6:	f04f 0200 	mov.w	r2, #0
 80030ea:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < 3; i++) {
 80030ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80030ee:	3301      	adds	r3, #1
 80030f0:	653b      	str	r3, [r7, #80]	; 0x50
 80030f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80030f4:	2b02      	cmp	r3, #2
 80030f6:	ddb4      	ble.n	8003062 <main+0x102>
		}
	}
	for (int i = 0; i < 3; i++) {
 80030f8:	2300      	movs	r3, #0
 80030fa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80030fc:	e020      	b.n	8003140 <main+0x1e0>
		Mag[i] = Data[i + 6] * 0.15;
 80030fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003100:	3306      	adds	r3, #6
 8003102:	005b      	lsls	r3, r3, #1
 8003104:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8003108:	4413      	add	r3, r2
 800310a:	f933 3c34 	ldrsh.w	r3, [r3, #-52]
 800310e:	4618      	mov	r0, r3
 8003110:	f7fd fa10 	bl	8000534 <__aeabi_i2d>
 8003114:	a328      	add	r3, pc, #160	; (adr r3, 80031b8 <main+0x258>)
 8003116:	e9d3 2300 	ldrd	r2, r3, [r3]
 800311a:	f7fd fa75 	bl	8000608 <__aeabi_dmul>
 800311e:	4603      	mov	r3, r0
 8003120:	460c      	mov	r4, r1
 8003122:	4618      	mov	r0, r3
 8003124:	4621      	mov	r1, r4
 8003126:	f7fd fd47 	bl	8000bb8 <__aeabi_d2f>
 800312a:	4602      	mov	r2, r0
 800312c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800312e:	009b      	lsls	r3, r3, #2
 8003130:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8003134:	440b      	add	r3, r1
 8003136:	3b58      	subs	r3, #88	; 0x58
 8003138:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < 3; i++) {
 800313a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800313c:	3301      	adds	r3, #1
 800313e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003140:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003142:	2b02      	cmp	r3, #2
 8003144:	dddb      	ble.n	80030fe <main+0x19e>
	}

	Update_Quaternion(Acc, Gyr, Mag, Quaternion, 1.0 / 900.0 , 0.1);
 8003146:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800314a:	463a      	mov	r2, r7
 800314c:	f107 010c 	add.w	r1, r7, #12
 8003150:	f107 0018 	add.w	r0, r7, #24
 8003154:	eddf 0a1b 	vldr	s1, [pc, #108]	; 80031c4 <main+0x264>
 8003158:	ed9f 0a1b 	vldr	s0, [pc, #108]	; 80031c8 <main+0x268>
 800315c:	f7fd fefc 	bl	8000f58 <Update_Quaternion>

	printf("%f,%f,%f,%f\r\n", Quaternion[0], Quaternion[1], Quaternion[2], Quaternion[3]);
 8003160:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003162:	4618      	mov	r0, r3
 8003164:	f7fd f9f8 	bl	8000558 <__aeabi_f2d>
 8003168:	4682      	mov	sl, r0
 800316a:	468b      	mov	fp, r1
 800316c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800316e:	4618      	mov	r0, r3
 8003170:	f7fd f9f2 	bl	8000558 <__aeabi_f2d>
 8003174:	4604      	mov	r4, r0
 8003176:	460d      	mov	r5, r1
 8003178:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800317a:	4618      	mov	r0, r3
 800317c:	f7fd f9ec 	bl	8000558 <__aeabi_f2d>
 8003180:	4680      	mov	r8, r0
 8003182:	4689      	mov	r9, r1
 8003184:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003186:	4618      	mov	r0, r3
 8003188:	f7fd f9e6 	bl	8000558 <__aeabi_f2d>
 800318c:	4602      	mov	r2, r0
 800318e:	460b      	mov	r3, r1
 8003190:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8003194:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8003198:	e9cd 4500 	strd	r4, r5, [sp]
 800319c:	4652      	mov	r2, sl
 800319e:	465b      	mov	r3, fp
 80031a0:	480a      	ldr	r0, [pc, #40]	; (80031cc <main+0x26c>)
 80031a2:	f001 fe45 	bl	8004e30 <iprintf>
	//printf("%d,%f\n", i++, Acc[2]);

	LL_GPIO_TogglePin(GPIOA, LL_GPIO_PIN_5);
 80031a6:	2120      	movs	r1, #32
 80031a8:	4809      	ldr	r0, [pc, #36]	; (80031d0 <main+0x270>)
 80031aa:	f7ff fec8 	bl	8002f3e <LL_GPIO_TogglePin>
	Get_Sensor(Data);
 80031ae:	e72a      	b.n	8003006 <main+0xa6>
 80031b0:	00000000 	.word	0x00000000
 80031b4:	40606000 	.word	0x40606000
 80031b8:	33333333 	.word	0x33333333
 80031bc:	3fc33333 	.word	0x3fc33333
 80031c0:	40c00000 	.word	0x40c00000
 80031c4:	3dcccccd 	.word	0x3dcccccd
 80031c8:	3a91a2b4 	.word	0x3a91a2b4
 80031cc:	08006df8 	.word	0x08006df8
 80031d0:	40020000 	.word	0x40020000

080031d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80031d4:	b580      	push	{r7, lr}
 80031d6:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_0);
 80031d8:	2000      	movs	r0, #0
 80031da:	f7ff fe13 	bl	8002e04 <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_0)
 80031de:	bf00      	nop
 80031e0:	f7ff fe24 	bl	8002e2c <LL_FLASH_GetLatency>
 80031e4:	4603      	mov	r3, r0
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d1fa      	bne.n	80031e0 <SystemClock_Config+0xc>
  {
  }
  LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE1);
 80031ea:	f44f 4040 	mov.w	r0, #49152	; 0xc000
 80031ee:	f7ff fe2b 	bl	8002e48 <LL_PWR_SetRegulVoltageScaling>
  LL_RCC_HSI_SetCalibTrimming(16);
 80031f2:	2010      	movs	r0, #16
 80031f4:	f7ff fd34 	bl	8002c60 <LL_RCC_HSI_SetCalibTrimming>
  LL_RCC_HSI_Enable();
 80031f8:	f7ff fd10 	bl	8002c1c <LL_RCC_HSI_Enable>

   /* Wait till HSI is ready */
  while(LL_RCC_HSI_IsReady() != 1)
 80031fc:	bf00      	nop
 80031fe:	f7ff fd1d 	bl	8002c3c <LL_RCC_HSI_IsReady>
 8003202:	4603      	mov	r3, r0
 8003204:	2b01      	cmp	r3, #1
 8003206:	d1fa      	bne.n	80031fe <SystemClock_Config+0x2a>
  {

  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8003208:	2000      	movs	r0, #0
 800320a:	f7ff fd61 	bl	8002cd0 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 800320e:	2000      	movs	r0, #0
 8003210:	f7ff fd72 	bl	8002cf8 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 8003214:	2000      	movs	r0, #0
 8003216:	f7ff fd83 	bl	8002d20 <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_HSI);
 800321a:	2000      	movs	r0, #0
 800321c:	f7ff fd36 	bl	8002c8c <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSI)
 8003220:	bf00      	nop
 8003222:	f7ff fd47 	bl	8002cb4 <LL_RCC_GetSysClkSource>
 8003226:	4603      	mov	r3, r0
 8003228:	2b00      	cmp	r3, #0
 800322a:	d1fa      	bne.n	8003222 <SystemClock_Config+0x4e>
  {

  }
  LL_Init1msTick(16000000);
 800322c:	4805      	ldr	r0, [pc, #20]	; (8003244 <SystemClock_Config+0x70>)
 800322e:	f001 f92f 	bl	8004490 <LL_Init1msTick>
  LL_SetSystemCoreClock(16000000);
 8003232:	4804      	ldr	r0, [pc, #16]	; (8003244 <SystemClock_Config+0x70>)
 8003234:	f001 f95e 	bl	80044f4 <LL_SetSystemCoreClock>
  LL_RCC_SetTIMPrescaler(LL_RCC_TIM_PRESCALER_TWICE);
 8003238:	2000      	movs	r0, #0
 800323a:	f7ff fd85 	bl	8002d48 <LL_RCC_SetTIMPrescaler>
}
 800323e:	bf00      	nop
 8003240:	bd80      	pop	{r7, pc}
 8003242:	bf00      	nop
 8003244:	00f42400 	.word	0x00f42400

08003248 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8003248:	b580      	push	{r7, lr}
 800324a:	b08e      	sub	sp, #56	; 0x38
 800324c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN I2C1_Init 0 */

  /* USER CODE END I2C1_Init 0 */

  LL_I2C_InitTypeDef I2C_InitStruct = {0};
 800324e:	f107 0318 	add.w	r3, r7, #24
 8003252:	2220      	movs	r2, #32
 8003254:	2100      	movs	r1, #0
 8003256:	4618      	mov	r0, r3
 8003258:	f001 f986 	bl	8004568 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800325c:	463b      	mov	r3, r7
 800325e:	2200      	movs	r2, #0
 8003260:	601a      	str	r2, [r3, #0]
 8003262:	605a      	str	r2, [r3, #4]
 8003264:	609a      	str	r2, [r3, #8]
 8003266:	60da      	str	r2, [r3, #12]
 8003268:	611a      	str	r2, [r3, #16]
 800326a:	615a      	str	r2, [r3, #20]

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 800326c:	2002      	movs	r0, #2
 800326e:	f7ff fd81 	bl	8002d74 <LL_AHB1_GRP1_EnableClock>
  /**I2C1 GPIO Configuration
  PB8   ------> I2C1_SCL
  PB9   ------> I2C1_SDA
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_8|LL_GPIO_PIN_9;
 8003272:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003276:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8003278:	2302      	movs	r3, #2
 800327a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800327c:	2303      	movs	r3, #3
 800327e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 8003280:	2301      	movs	r3, #1
 8003282:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8003284:	2301      	movs	r3, #1
 8003286:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_4;
 8003288:	2304      	movs	r3, #4
 800328a:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800328c:	463b      	mov	r3, r7
 800328e:	4619      	mov	r1, r3
 8003290:	4815      	ldr	r0, [pc, #84]	; (80032e8 <MX_I2C1_Init+0xa0>)
 8003292:	f000 faf9 	bl	8003888 <LL_GPIO_Init>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_I2C1);
 8003296:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 800329a:	f7ff fd83 	bl	8002da4 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  /** I2C Initialization
  */
  LL_I2C_DisableOwnAddress2(I2C1);
 800329e:	4813      	ldr	r0, [pc, #76]	; (80032ec <MX_I2C1_Init+0xa4>)
 80032a0:	f7ff fcab 	bl	8002bfa <LL_I2C_DisableOwnAddress2>
  LL_I2C_DisableGeneralCall(I2C1);
 80032a4:	4811      	ldr	r0, [pc, #68]	; (80032ec <MX_I2C1_Init+0xa4>)
 80032a6:	f7ff fc85 	bl	8002bb4 <LL_I2C_DisableGeneralCall>
  LL_I2C_EnableClockStretching(I2C1);
 80032aa:	4810      	ldr	r0, [pc, #64]	; (80032ec <MX_I2C1_Init+0xa4>)
 80032ac:	f7ff fc72 	bl	8002b94 <LL_I2C_EnableClockStretching>
  I2C_InitStruct.PeripheralMode = LL_I2C_MODE_I2C;
 80032b0:	2300      	movs	r3, #0
 80032b2:	61bb      	str	r3, [r7, #24]
  I2C_InitStruct.ClockSpeed = 100000;
 80032b4:	4b0e      	ldr	r3, [pc, #56]	; (80032f0 <MX_I2C1_Init+0xa8>)
 80032b6:	61fb      	str	r3, [r7, #28]
  I2C_InitStruct.DutyCycle = LL_I2C_DUTYCYCLE_2;
 80032b8:	2300      	movs	r3, #0
 80032ba:	623b      	str	r3, [r7, #32]
  I2C_InitStruct.OwnAddress1 = 0;
 80032bc:	2300      	movs	r3, #0
 80032be:	62fb      	str	r3, [r7, #44]	; 0x2c
  I2C_InitStruct.TypeAcknowledge = LL_I2C_ACK;
 80032c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80032c4:	633b      	str	r3, [r7, #48]	; 0x30
  I2C_InitStruct.OwnAddrSize = LL_I2C_OWNADDRESS1_7BIT;
 80032c6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80032ca:	637b      	str	r3, [r7, #52]	; 0x34
  LL_I2C_Init(I2C1, &I2C_InitStruct);
 80032cc:	f107 0318 	add.w	r3, r7, #24
 80032d0:	4619      	mov	r1, r3
 80032d2:	4806      	ldr	r0, [pc, #24]	; (80032ec <MX_I2C1_Init+0xa4>)
 80032d4:	f000 fc56 	bl	8003b84 <LL_I2C_Init>
  LL_I2C_SetOwnAddress2(I2C1, 0);
 80032d8:	2100      	movs	r1, #0
 80032da:	4804      	ldr	r0, [pc, #16]	; (80032ec <MX_I2C1_Init+0xa4>)
 80032dc:	f7ff fc7a 	bl	8002bd4 <LL_I2C_SetOwnAddress2>
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80032e0:	bf00      	nop
 80032e2:	3738      	adds	r7, #56	; 0x38
 80032e4:	46bd      	mov	sp, r7
 80032e6:	bd80      	pop	{r7, pc}
 80032e8:	40020400 	.word	0x40020400
 80032ec:	40005400 	.word	0x40005400
 80032f0:	000186a0 	.word	0x000186a0

080032f4 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 80032f4:	b580      	push	{r7, lr}
 80032f6:	b086      	sub	sp, #24
 80032f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */

  /* USER CODE END TIM10_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 80032fa:	1d3b      	adds	r3, r7, #4
 80032fc:	2200      	movs	r2, #0
 80032fe:	601a      	str	r2, [r3, #0]
 8003300:	605a      	str	r2, [r3, #4]
 8003302:	609a      	str	r2, [r3, #8]
 8003304:	60da      	str	r2, [r3, #12]
 8003306:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_TIM10);
 8003308:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800330c:	f7ff fd62 	bl	8002dd4 <LL_APB2_GRP1_EnableClock>

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  TIM_InitStruct.Prescaler = 16-LL_TIM_IC_FILTER_FDIV1_N2;
 8003310:	2310      	movs	r3, #16
 8003312:	80bb      	strh	r3, [r7, #4]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8003314:	2300      	movs	r3, #0
 8003316:	60bb      	str	r3, [r7, #8]
  TIM_InitStruct.Autoreload = 65535;
 8003318:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800331c:	60fb      	str	r3, [r7, #12]
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 800331e:	2300      	movs	r3, #0
 8003320:	613b      	str	r3, [r7, #16]
  LL_TIM_Init(TIM10, &TIM_InitStruct);
 8003322:	1d3b      	adds	r3, r7, #4
 8003324:	4619      	mov	r1, r3
 8003326:	4805      	ldr	r0, [pc, #20]	; (800333c <MX_TIM10_Init+0x48>)
 8003328:	f000 fdd8 	bl	8003edc <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM10);
 800332c:	4803      	ldr	r0, [pc, #12]	; (800333c <MX_TIM10_Init+0x48>)
 800332e:	f7ff fd9f 	bl	8002e70 <LL_TIM_DisableARRPreload>
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8003332:	bf00      	nop
 8003334:	3718      	adds	r7, #24
 8003336:	46bd      	mov	sp, r7
 8003338:	bd80      	pop	{r7, pc}
 800333a:	bf00      	nop
 800333c:	40014400 	.word	0x40014400

08003340 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8003340:	b580      	push	{r7, lr}
 8003342:	b08e      	sub	sp, #56	; 0x38
 8003344:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8003346:	f107 031c 	add.w	r3, r7, #28
 800334a:	2200      	movs	r2, #0
 800334c:	601a      	str	r2, [r3, #0]
 800334e:	605a      	str	r2, [r3, #4]
 8003350:	609a      	str	r2, [r3, #8]
 8003352:	60da      	str	r2, [r3, #12]
 8003354:	611a      	str	r2, [r3, #16]
 8003356:	615a      	str	r2, [r3, #20]
 8003358:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800335a:	1d3b      	adds	r3, r7, #4
 800335c:	2200      	movs	r2, #0
 800335e:	601a      	str	r2, [r3, #0]
 8003360:	605a      	str	r2, [r3, #4]
 8003362:	609a      	str	r2, [r3, #8]
 8003364:	60da      	str	r2, [r3, #12]
 8003366:	611a      	str	r2, [r3, #16]
 8003368:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 800336a:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800336e:	f7ff fd19 	bl	8002da4 <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8003372:	2001      	movs	r0, #1
 8003374:	f7ff fcfe 	bl	8002d74 <LL_AHB1_GRP1_EnableClock>
  /**USART2 GPIO Configuration
  PA2   ------> USART2_TX
  PA3   ------> USART2_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2|LL_GPIO_PIN_3;
 8003378:	230c      	movs	r3, #12
 800337a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800337c:	2302      	movs	r3, #2
 800337e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8003380:	2303      	movs	r3, #3
 8003382:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8003384:	2300      	movs	r3, #0
 8003386:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8003388:	2300      	movs	r3, #0
 800338a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 800338c:	2307      	movs	r3, #7
 800338e:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003390:	1d3b      	adds	r3, r7, #4
 8003392:	4619      	mov	r1, r3
 8003394:	4810      	ldr	r0, [pc, #64]	; (80033d8 <MX_USART2_UART_Init+0x98>)
 8003396:	f000 fa77 	bl	8003888 <LL_GPIO_Init>

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  USART_InitStruct.BaudRate = 9600;
 800339a:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 800339e:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 80033a0:	2300      	movs	r3, #0
 80033a2:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 80033a4:	2300      	movs	r3, #0
 80033a6:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 80033a8:	2300      	movs	r3, #0
 80033aa:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 80033ac:	230c      	movs	r3, #12
 80033ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 80033b0:	2300      	movs	r3, #0
 80033b2:	633b      	str	r3, [r7, #48]	; 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 80033b4:	2300      	movs	r3, #0
 80033b6:	637b      	str	r3, [r7, #52]	; 0x34
  LL_USART_Init(USART2, &USART_InitStruct);
 80033b8:	f107 031c 	add.w	r3, r7, #28
 80033bc:	4619      	mov	r1, r3
 80033be:	4807      	ldr	r0, [pc, #28]	; (80033dc <MX_USART2_UART_Init+0x9c>)
 80033c0:	f000 ffe8 	bl	8004394 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART2);
 80033c4:	4805      	ldr	r0, [pc, #20]	; (80033dc <MX_USART2_UART_Init+0x9c>)
 80033c6:	f7ff fd73 	bl	8002eb0 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART2);
 80033ca:	4804      	ldr	r0, [pc, #16]	; (80033dc <MX_USART2_UART_Init+0x9c>)
 80033cc:	f7ff fd60 	bl	8002e90 <LL_USART_Enable>
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80033d0:	bf00      	nop
 80033d2:	3738      	adds	r7, #56	; 0x38
 80033d4:	46bd      	mov	sp, r7
 80033d6:	bd80      	pop	{r7, pc}
 80033d8:	40020000 	.word	0x40020000
 80033dc:	40004400 	.word	0x40004400

080033e0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80033e0:	b580      	push	{r7, lr}
 80033e2:	b086      	sub	sp, #24
 80033e4:	af00      	add	r7, sp, #0
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033e6:	463b      	mov	r3, r7
 80033e8:	2200      	movs	r2, #0
 80033ea:	601a      	str	r2, [r3, #0]
 80033ec:	605a      	str	r2, [r3, #4]
 80033ee:	609a      	str	r2, [r3, #8]
 80033f0:	60da      	str	r2, [r3, #12]
 80033f2:	611a      	str	r2, [r3, #16]
 80033f4:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 80033f6:	2001      	movs	r0, #1
 80033f8:	f7ff fcbc 	bl	8002d74 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 80033fc:	2002      	movs	r0, #2
 80033fe:	f7ff fcb9 	bl	8002d74 <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_5);
 8003402:	2120      	movs	r1, #32
 8003404:	480a      	ldr	r0, [pc, #40]	; (8003430 <MX_GPIO_Init+0x50>)
 8003406:	f7ff fd8b 	bl	8002f20 <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_5;
 800340a:	2320      	movs	r3, #32
 800340c:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800340e:	2301      	movs	r3, #1
 8003410:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8003412:	2300      	movs	r3, #0
 8003414:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8003416:	2300      	movs	r3, #0
 8003418:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800341a:	2300      	movs	r3, #0
 800341c:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800341e:	463b      	mov	r3, r7
 8003420:	4619      	mov	r1, r3
 8003422:	4803      	ldr	r0, [pc, #12]	; (8003430 <MX_GPIO_Init+0x50>)
 8003424:	f000 fa30 	bl	8003888 <LL_GPIO_Init>

}
 8003428:	bf00      	nop
 800342a:	3718      	adds	r7, #24
 800342c:	46bd      	mov	sp, r7
 800342e:	bd80      	pop	{r7, pc}
 8003430:	40020000 	.word	0x40020000

08003434 <__io_putchar>:
		while (!LL_USART_IsActiveFlag_TC(USART2));
	}
}

PUTCHAR_PROTOTYPE
{
 8003434:	b580      	push	{r7, lr}
 8003436:	b082      	sub	sp, #8
 8003438:	af00      	add	r7, sp, #0
 800343a:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the EVAL_COM1 and Loop until the end of transmission */

	LL_USART_TransmitData8(USART2, ch);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	b2db      	uxtb	r3, r3
 8003440:	4619      	mov	r1, r3
 8003442:	4807      	ldr	r0, [pc, #28]	; (8003460 <__io_putchar+0x2c>)
 8003444:	f7ff fd5d 	bl	8002f02 <LL_USART_TransmitData8>
	while (!LL_USART_IsActiveFlag_TC(USART2));
 8003448:	bf00      	nop
 800344a:	4805      	ldr	r0, [pc, #20]	; (8003460 <__io_putchar+0x2c>)
 800344c:	f7ff fd46 	bl	8002edc <LL_USART_IsActiveFlag_TC>
 8003450:	4603      	mov	r3, r0
 8003452:	2b00      	cmp	r3, #0
 8003454:	d0f9      	beq.n	800344a <__io_putchar+0x16>

  return ch;
 8003456:	687b      	ldr	r3, [r7, #4]
}
 8003458:	4618      	mov	r0, r3
 800345a:	3708      	adds	r7, #8
 800345c:	46bd      	mov	sp, r7
 800345e:	bd80      	pop	{r7, pc}
 8003460:	40004400 	.word	0x40004400

08003464 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003464:	b480      	push	{r7}
 8003466:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003468:	e7fe      	b.n	8003468 <NMI_Handler+0x4>

0800346a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800346a:	b480      	push	{r7}
 800346c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800346e:	e7fe      	b.n	800346e <HardFault_Handler+0x4>

08003470 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003470:	b480      	push	{r7}
 8003472:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003474:	e7fe      	b.n	8003474 <MemManage_Handler+0x4>

08003476 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003476:	b480      	push	{r7}
 8003478:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800347a:	e7fe      	b.n	800347a <BusFault_Handler+0x4>

0800347c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800347c:	b480      	push	{r7}
 800347e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003480:	e7fe      	b.n	8003480 <UsageFault_Handler+0x4>

08003482 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003482:	b480      	push	{r7}
 8003484:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003486:	bf00      	nop
 8003488:	46bd      	mov	sp, r7
 800348a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348e:	4770      	bx	lr

08003490 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003490:	b480      	push	{r7}
 8003492:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003494:	bf00      	nop
 8003496:	46bd      	mov	sp, r7
 8003498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349c:	4770      	bx	lr

0800349e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800349e:	b480      	push	{r7}
 80034a0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80034a2:	bf00      	nop
 80034a4:	46bd      	mov	sp, r7
 80034a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034aa:	4770      	bx	lr

080034ac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80034ac:	b480      	push	{r7}
 80034ae:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80034b0:	bf00      	nop
 80034b2:	46bd      	mov	sp, r7
 80034b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b8:	4770      	bx	lr

080034ba <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80034ba:	b580      	push	{r7, lr}
 80034bc:	b086      	sub	sp, #24
 80034be:	af00      	add	r7, sp, #0
 80034c0:	60f8      	str	r0, [r7, #12]
 80034c2:	60b9      	str	r1, [r7, #8]
 80034c4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80034c6:	2300      	movs	r3, #0
 80034c8:	617b      	str	r3, [r7, #20]
 80034ca:	e00a      	b.n	80034e2 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80034cc:	f3af 8000 	nop.w
 80034d0:	4601      	mov	r1, r0
 80034d2:	68bb      	ldr	r3, [r7, #8]
 80034d4:	1c5a      	adds	r2, r3, #1
 80034d6:	60ba      	str	r2, [r7, #8]
 80034d8:	b2ca      	uxtb	r2, r1
 80034da:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80034dc:	697b      	ldr	r3, [r7, #20]
 80034de:	3301      	adds	r3, #1
 80034e0:	617b      	str	r3, [r7, #20]
 80034e2:	697a      	ldr	r2, [r7, #20]
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	429a      	cmp	r2, r3
 80034e8:	dbf0      	blt.n	80034cc <_read+0x12>
	}

return len;
 80034ea:	687b      	ldr	r3, [r7, #4]
}
 80034ec:	4618      	mov	r0, r3
 80034ee:	3718      	adds	r7, #24
 80034f0:	46bd      	mov	sp, r7
 80034f2:	bd80      	pop	{r7, pc}

080034f4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80034f4:	b580      	push	{r7, lr}
 80034f6:	b086      	sub	sp, #24
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	60f8      	str	r0, [r7, #12]
 80034fc:	60b9      	str	r1, [r7, #8]
 80034fe:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003500:	2300      	movs	r3, #0
 8003502:	617b      	str	r3, [r7, #20]
 8003504:	e009      	b.n	800351a <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003506:	68bb      	ldr	r3, [r7, #8]
 8003508:	1c5a      	adds	r2, r3, #1
 800350a:	60ba      	str	r2, [r7, #8]
 800350c:	781b      	ldrb	r3, [r3, #0]
 800350e:	4618      	mov	r0, r3
 8003510:	f7ff ff90 	bl	8003434 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003514:	697b      	ldr	r3, [r7, #20]
 8003516:	3301      	adds	r3, #1
 8003518:	617b      	str	r3, [r7, #20]
 800351a:	697a      	ldr	r2, [r7, #20]
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	429a      	cmp	r2, r3
 8003520:	dbf1      	blt.n	8003506 <_write+0x12>
	}
	return len;
 8003522:	687b      	ldr	r3, [r7, #4]
}
 8003524:	4618      	mov	r0, r3
 8003526:	3718      	adds	r7, #24
 8003528:	46bd      	mov	sp, r7
 800352a:	bd80      	pop	{r7, pc}

0800352c <_close>:

int _close(int file)
{
 800352c:	b480      	push	{r7}
 800352e:	b083      	sub	sp, #12
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]
	return -1;
 8003534:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8003538:	4618      	mov	r0, r3
 800353a:	370c      	adds	r7, #12
 800353c:	46bd      	mov	sp, r7
 800353e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003542:	4770      	bx	lr

08003544 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003544:	b480      	push	{r7}
 8003546:	b083      	sub	sp, #12
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]
 800354c:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800354e:	683b      	ldr	r3, [r7, #0]
 8003550:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003554:	605a      	str	r2, [r3, #4]
	return 0;
 8003556:	2300      	movs	r3, #0
}
 8003558:	4618      	mov	r0, r3
 800355a:	370c      	adds	r7, #12
 800355c:	46bd      	mov	sp, r7
 800355e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003562:	4770      	bx	lr

08003564 <_isatty>:

int _isatty(int file)
{
 8003564:	b480      	push	{r7}
 8003566:	b083      	sub	sp, #12
 8003568:	af00      	add	r7, sp, #0
 800356a:	6078      	str	r0, [r7, #4]
	return 1;
 800356c:	2301      	movs	r3, #1
}
 800356e:	4618      	mov	r0, r3
 8003570:	370c      	adds	r7, #12
 8003572:	46bd      	mov	sp, r7
 8003574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003578:	4770      	bx	lr

0800357a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800357a:	b480      	push	{r7}
 800357c:	b085      	sub	sp, #20
 800357e:	af00      	add	r7, sp, #0
 8003580:	60f8      	str	r0, [r7, #12]
 8003582:	60b9      	str	r1, [r7, #8]
 8003584:	607a      	str	r2, [r7, #4]
	return 0;
 8003586:	2300      	movs	r3, #0
}
 8003588:	4618      	mov	r0, r3
 800358a:	3714      	adds	r7, #20
 800358c:	46bd      	mov	sp, r7
 800358e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003592:	4770      	bx	lr

08003594 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003594:	b580      	push	{r7, lr}
 8003596:	b086      	sub	sp, #24
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800359c:	4a14      	ldr	r2, [pc, #80]	; (80035f0 <_sbrk+0x5c>)
 800359e:	4b15      	ldr	r3, [pc, #84]	; (80035f4 <_sbrk+0x60>)
 80035a0:	1ad3      	subs	r3, r2, r3
 80035a2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80035a4:	697b      	ldr	r3, [r7, #20]
 80035a6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80035a8:	4b13      	ldr	r3, [pc, #76]	; (80035f8 <_sbrk+0x64>)
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d102      	bne.n	80035b6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80035b0:	4b11      	ldr	r3, [pc, #68]	; (80035f8 <_sbrk+0x64>)
 80035b2:	4a12      	ldr	r2, [pc, #72]	; (80035fc <_sbrk+0x68>)
 80035b4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80035b6:	4b10      	ldr	r3, [pc, #64]	; (80035f8 <_sbrk+0x64>)
 80035b8:	681a      	ldr	r2, [r3, #0]
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	4413      	add	r3, r2
 80035be:	693a      	ldr	r2, [r7, #16]
 80035c0:	429a      	cmp	r2, r3
 80035c2:	d207      	bcs.n	80035d4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80035c4:	f000 ffa6 	bl	8004514 <__errno>
 80035c8:	4602      	mov	r2, r0
 80035ca:	230c      	movs	r3, #12
 80035cc:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80035ce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80035d2:	e009      	b.n	80035e8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80035d4:	4b08      	ldr	r3, [pc, #32]	; (80035f8 <_sbrk+0x64>)
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80035da:	4b07      	ldr	r3, [pc, #28]	; (80035f8 <_sbrk+0x64>)
 80035dc:	681a      	ldr	r2, [r3, #0]
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	4413      	add	r3, r2
 80035e2:	4a05      	ldr	r2, [pc, #20]	; (80035f8 <_sbrk+0x64>)
 80035e4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80035e6:	68fb      	ldr	r3, [r7, #12]
}
 80035e8:	4618      	mov	r0, r3
 80035ea:	3718      	adds	r7, #24
 80035ec:	46bd      	mov	sp, r7
 80035ee:	bd80      	pop	{r7, pc}
 80035f0:	20020000 	.word	0x20020000
 80035f4:	00000400 	.word	0x00000400
 80035f8:	200001f4 	.word	0x200001f4
 80035fc:	20000208 	.word	0x20000208

08003600 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003600:	b480      	push	{r7}
 8003602:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003604:	4b08      	ldr	r3, [pc, #32]	; (8003628 <SystemInit+0x28>)
 8003606:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800360a:	4a07      	ldr	r2, [pc, #28]	; (8003628 <SystemInit+0x28>)
 800360c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003610:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003614:	4b04      	ldr	r3, [pc, #16]	; (8003628 <SystemInit+0x28>)
 8003616:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800361a:	609a      	str	r2, [r3, #8]
#endif
}
 800361c:	bf00      	nop
 800361e:	46bd      	mov	sp, r7
 8003620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003624:	4770      	bx	lr
 8003626:	bf00      	nop
 8003628:	e000ed00 	.word	0xe000ed00

0800362c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800362c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003664 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003630:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8003632:	e003      	b.n	800363c <LoopCopyDataInit>

08003634 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003634:	4b0c      	ldr	r3, [pc, #48]	; (8003668 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8003636:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003638:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800363a:	3104      	adds	r1, #4

0800363c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800363c:	480b      	ldr	r0, [pc, #44]	; (800366c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800363e:	4b0c      	ldr	r3, [pc, #48]	; (8003670 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8003640:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8003642:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003644:	d3f6      	bcc.n	8003634 <CopyDataInit>
  ldr  r2, =_sbss
 8003646:	4a0b      	ldr	r2, [pc, #44]	; (8003674 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8003648:	e002      	b.n	8003650 <LoopFillZerobss>

0800364a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800364a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800364c:	f842 3b04 	str.w	r3, [r2], #4

08003650 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003650:	4b09      	ldr	r3, [pc, #36]	; (8003678 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8003652:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003654:	d3f9      	bcc.n	800364a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003656:	f7ff ffd3 	bl	8003600 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800365a:	f000 ff61 	bl	8004520 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800365e:	f7ff fc7f 	bl	8002f60 <main>
  bx  lr    
 8003662:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8003664:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8003668:	080070f8 	.word	0x080070f8
  ldr  r0, =_sdata
 800366c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003670:	200001d8 	.word	0x200001d8
  ldr  r2, =_sbss
 8003674:	200001d8 	.word	0x200001d8
  ldr  r3, = _ebss
 8003678:	20000204 	.word	0x20000204

0800367c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800367c:	e7fe      	b.n	800367c <ADC_IRQHandler>

0800367e <LL_GPIO_SetPinMode>:
{
 800367e:	b480      	push	{r7}
 8003680:	b089      	sub	sp, #36	; 0x24
 8003682:	af00      	add	r7, sp, #0
 8003684:	60f8      	str	r0, [r7, #12]
 8003686:	60b9      	str	r1, [r7, #8]
 8003688:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	681a      	ldr	r2, [r3, #0]
 800368e:	68bb      	ldr	r3, [r7, #8]
 8003690:	617b      	str	r3, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003692:	697b      	ldr	r3, [r7, #20]
 8003694:	fa93 f3a3 	rbit	r3, r3
 8003698:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800369a:	693b      	ldr	r3, [r7, #16]
 800369c:	fab3 f383 	clz	r3, r3
 80036a0:	b2db      	uxtb	r3, r3
 80036a2:	005b      	lsls	r3, r3, #1
 80036a4:	2103      	movs	r1, #3
 80036a6:	fa01 f303 	lsl.w	r3, r1, r3
 80036aa:	43db      	mvns	r3, r3
 80036ac:	401a      	ands	r2, r3
 80036ae:	68bb      	ldr	r3, [r7, #8]
 80036b0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036b2:	69fb      	ldr	r3, [r7, #28]
 80036b4:	fa93 f3a3 	rbit	r3, r3
 80036b8:	61bb      	str	r3, [r7, #24]
  return result;
 80036ba:	69bb      	ldr	r3, [r7, #24]
 80036bc:	fab3 f383 	clz	r3, r3
 80036c0:	b2db      	uxtb	r3, r3
 80036c2:	005b      	lsls	r3, r3, #1
 80036c4:	6879      	ldr	r1, [r7, #4]
 80036c6:	fa01 f303 	lsl.w	r3, r1, r3
 80036ca:	431a      	orrs	r2, r3
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	601a      	str	r2, [r3, #0]
}
 80036d0:	bf00      	nop
 80036d2:	3724      	adds	r7, #36	; 0x24
 80036d4:	46bd      	mov	sp, r7
 80036d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036da:	4770      	bx	lr

080036dc <LL_GPIO_SetPinOutputType>:
{
 80036dc:	b480      	push	{r7}
 80036de:	b085      	sub	sp, #20
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	60f8      	str	r0, [r7, #12]
 80036e4:	60b9      	str	r1, [r7, #8]
 80036e6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	685a      	ldr	r2, [r3, #4]
 80036ec:	68bb      	ldr	r3, [r7, #8]
 80036ee:	43db      	mvns	r3, r3
 80036f0:	401a      	ands	r2, r3
 80036f2:	68bb      	ldr	r3, [r7, #8]
 80036f4:	6879      	ldr	r1, [r7, #4]
 80036f6:	fb01 f303 	mul.w	r3, r1, r3
 80036fa:	431a      	orrs	r2, r3
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	605a      	str	r2, [r3, #4]
}
 8003700:	bf00      	nop
 8003702:	3714      	adds	r7, #20
 8003704:	46bd      	mov	sp, r7
 8003706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370a:	4770      	bx	lr

0800370c <LL_GPIO_SetPinSpeed>:
{
 800370c:	b480      	push	{r7}
 800370e:	b089      	sub	sp, #36	; 0x24
 8003710:	af00      	add	r7, sp, #0
 8003712:	60f8      	str	r0, [r7, #12]
 8003714:	60b9      	str	r1, [r7, #8]
 8003716:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	689a      	ldr	r2, [r3, #8]
 800371c:	68bb      	ldr	r3, [r7, #8]
 800371e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003720:	697b      	ldr	r3, [r7, #20]
 8003722:	fa93 f3a3 	rbit	r3, r3
 8003726:	613b      	str	r3, [r7, #16]
  return result;
 8003728:	693b      	ldr	r3, [r7, #16]
 800372a:	fab3 f383 	clz	r3, r3
 800372e:	b2db      	uxtb	r3, r3
 8003730:	005b      	lsls	r3, r3, #1
 8003732:	2103      	movs	r1, #3
 8003734:	fa01 f303 	lsl.w	r3, r1, r3
 8003738:	43db      	mvns	r3, r3
 800373a:	401a      	ands	r2, r3
 800373c:	68bb      	ldr	r3, [r7, #8]
 800373e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003740:	69fb      	ldr	r3, [r7, #28]
 8003742:	fa93 f3a3 	rbit	r3, r3
 8003746:	61bb      	str	r3, [r7, #24]
  return result;
 8003748:	69bb      	ldr	r3, [r7, #24]
 800374a:	fab3 f383 	clz	r3, r3
 800374e:	b2db      	uxtb	r3, r3
 8003750:	005b      	lsls	r3, r3, #1
 8003752:	6879      	ldr	r1, [r7, #4]
 8003754:	fa01 f303 	lsl.w	r3, r1, r3
 8003758:	431a      	orrs	r2, r3
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	609a      	str	r2, [r3, #8]
}
 800375e:	bf00      	nop
 8003760:	3724      	adds	r7, #36	; 0x24
 8003762:	46bd      	mov	sp, r7
 8003764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003768:	4770      	bx	lr

0800376a <LL_GPIO_SetPinPull>:
{
 800376a:	b480      	push	{r7}
 800376c:	b089      	sub	sp, #36	; 0x24
 800376e:	af00      	add	r7, sp, #0
 8003770:	60f8      	str	r0, [r7, #12]
 8003772:	60b9      	str	r1, [r7, #8]
 8003774:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	68da      	ldr	r2, [r3, #12]
 800377a:	68bb      	ldr	r3, [r7, #8]
 800377c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800377e:	697b      	ldr	r3, [r7, #20]
 8003780:	fa93 f3a3 	rbit	r3, r3
 8003784:	613b      	str	r3, [r7, #16]
  return result;
 8003786:	693b      	ldr	r3, [r7, #16]
 8003788:	fab3 f383 	clz	r3, r3
 800378c:	b2db      	uxtb	r3, r3
 800378e:	005b      	lsls	r3, r3, #1
 8003790:	2103      	movs	r1, #3
 8003792:	fa01 f303 	lsl.w	r3, r1, r3
 8003796:	43db      	mvns	r3, r3
 8003798:	401a      	ands	r2, r3
 800379a:	68bb      	ldr	r3, [r7, #8]
 800379c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800379e:	69fb      	ldr	r3, [r7, #28]
 80037a0:	fa93 f3a3 	rbit	r3, r3
 80037a4:	61bb      	str	r3, [r7, #24]
  return result;
 80037a6:	69bb      	ldr	r3, [r7, #24]
 80037a8:	fab3 f383 	clz	r3, r3
 80037ac:	b2db      	uxtb	r3, r3
 80037ae:	005b      	lsls	r3, r3, #1
 80037b0:	6879      	ldr	r1, [r7, #4]
 80037b2:	fa01 f303 	lsl.w	r3, r1, r3
 80037b6:	431a      	orrs	r2, r3
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	60da      	str	r2, [r3, #12]
}
 80037bc:	bf00      	nop
 80037be:	3724      	adds	r7, #36	; 0x24
 80037c0:	46bd      	mov	sp, r7
 80037c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c6:	4770      	bx	lr

080037c8 <LL_GPIO_SetAFPin_0_7>:
{
 80037c8:	b480      	push	{r7}
 80037ca:	b089      	sub	sp, #36	; 0x24
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	60f8      	str	r0, [r7, #12]
 80037d0:	60b9      	str	r1, [r7, #8]
 80037d2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	6a1a      	ldr	r2, [r3, #32]
 80037d8:	68bb      	ldr	r3, [r7, #8]
 80037da:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037dc:	697b      	ldr	r3, [r7, #20]
 80037de:	fa93 f3a3 	rbit	r3, r3
 80037e2:	613b      	str	r3, [r7, #16]
  return result;
 80037e4:	693b      	ldr	r3, [r7, #16]
 80037e6:	fab3 f383 	clz	r3, r3
 80037ea:	b2db      	uxtb	r3, r3
 80037ec:	009b      	lsls	r3, r3, #2
 80037ee:	210f      	movs	r1, #15
 80037f0:	fa01 f303 	lsl.w	r3, r1, r3
 80037f4:	43db      	mvns	r3, r3
 80037f6:	401a      	ands	r2, r3
 80037f8:	68bb      	ldr	r3, [r7, #8]
 80037fa:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037fc:	69fb      	ldr	r3, [r7, #28]
 80037fe:	fa93 f3a3 	rbit	r3, r3
 8003802:	61bb      	str	r3, [r7, #24]
  return result;
 8003804:	69bb      	ldr	r3, [r7, #24]
 8003806:	fab3 f383 	clz	r3, r3
 800380a:	b2db      	uxtb	r3, r3
 800380c:	009b      	lsls	r3, r3, #2
 800380e:	6879      	ldr	r1, [r7, #4]
 8003810:	fa01 f303 	lsl.w	r3, r1, r3
 8003814:	431a      	orrs	r2, r3
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	621a      	str	r2, [r3, #32]
}
 800381a:	bf00      	nop
 800381c:	3724      	adds	r7, #36	; 0x24
 800381e:	46bd      	mov	sp, r7
 8003820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003824:	4770      	bx	lr

08003826 <LL_GPIO_SetAFPin_8_15>:
{
 8003826:	b480      	push	{r7}
 8003828:	b089      	sub	sp, #36	; 0x24
 800382a:	af00      	add	r7, sp, #0
 800382c:	60f8      	str	r0, [r7, #12]
 800382e:	60b9      	str	r1, [r7, #8]
 8003830:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003836:	68bb      	ldr	r3, [r7, #8]
 8003838:	0a1b      	lsrs	r3, r3, #8
 800383a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800383c:	697b      	ldr	r3, [r7, #20]
 800383e:	fa93 f3a3 	rbit	r3, r3
 8003842:	613b      	str	r3, [r7, #16]
  return result;
 8003844:	693b      	ldr	r3, [r7, #16]
 8003846:	fab3 f383 	clz	r3, r3
 800384a:	b2db      	uxtb	r3, r3
 800384c:	009b      	lsls	r3, r3, #2
 800384e:	210f      	movs	r1, #15
 8003850:	fa01 f303 	lsl.w	r3, r1, r3
 8003854:	43db      	mvns	r3, r3
 8003856:	401a      	ands	r2, r3
 8003858:	68bb      	ldr	r3, [r7, #8]
 800385a:	0a1b      	lsrs	r3, r3, #8
 800385c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800385e:	69fb      	ldr	r3, [r7, #28]
 8003860:	fa93 f3a3 	rbit	r3, r3
 8003864:	61bb      	str	r3, [r7, #24]
  return result;
 8003866:	69bb      	ldr	r3, [r7, #24]
 8003868:	fab3 f383 	clz	r3, r3
 800386c:	b2db      	uxtb	r3, r3
 800386e:	009b      	lsls	r3, r3, #2
 8003870:	6879      	ldr	r1, [r7, #4]
 8003872:	fa01 f303 	lsl.w	r3, r1, r3
 8003876:	431a      	orrs	r2, r3
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	625a      	str	r2, [r3, #36]	; 0x24
}
 800387c:	bf00      	nop
 800387e:	3724      	adds	r7, #36	; 0x24
 8003880:	46bd      	mov	sp, r7
 8003882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003886:	4770      	bx	lr

08003888 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8003888:	b580      	push	{r7, lr}
 800388a:	b088      	sub	sp, #32
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]
 8003890:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 8003892:	2300      	movs	r3, #0
 8003894:	61fb      	str	r3, [r7, #28]
  uint32_t currentpin = 0x00000000U;
 8003896:	2300      	movs	r3, #0
 8003898:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 800389a:	683b      	ldr	r3, [r7, #0]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038a0:	697b      	ldr	r3, [r7, #20]
 80038a2:	fa93 f3a3 	rbit	r3, r3
 80038a6:	613b      	str	r3, [r7, #16]
  return result;
 80038a8:	693b      	ldr	r3, [r7, #16]
 80038aa:	fab3 f383 	clz	r3, r3
 80038ae:	b2db      	uxtb	r3, r3
 80038b0:	61fb      	str	r3, [r7, #28]
  
  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 80038b2:	e050      	b.n	8003956 <LL_GPIO_Init+0xce>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 80038b4:	683b      	ldr	r3, [r7, #0]
 80038b6:	681a      	ldr	r2, [r3, #0]
 80038b8:	2101      	movs	r1, #1
 80038ba:	69fb      	ldr	r3, [r7, #28]
 80038bc:	fa01 f303 	lsl.w	r3, r1, r3
 80038c0:	4013      	ands	r3, r2
 80038c2:	61bb      	str	r3, [r7, #24]
    
    if (currentpin)
 80038c4:	69bb      	ldr	r3, [r7, #24]
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d042      	beq.n	8003950 <LL_GPIO_Init+0xc8>
    {
      
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 80038ca:	683b      	ldr	r3, [r7, #0]
 80038cc:	685b      	ldr	r3, [r3, #4]
 80038ce:	2b01      	cmp	r3, #1
 80038d0:	d003      	beq.n	80038da <LL_GPIO_Init+0x52>
 80038d2:	683b      	ldr	r3, [r7, #0]
 80038d4:	685b      	ldr	r3, [r3, #4]
 80038d6:	2b02      	cmp	r3, #2
 80038d8:	d10d      	bne.n	80038f6 <LL_GPIO_Init+0x6e>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        
        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 80038da:	683b      	ldr	r3, [r7, #0]
 80038dc:	689b      	ldr	r3, [r3, #8]
 80038de:	461a      	mov	r2, r3
 80038e0:	69b9      	ldr	r1, [r7, #24]
 80038e2:	6878      	ldr	r0, [r7, #4]
 80038e4:	f7ff ff12 	bl	800370c <LL_GPIO_SetPinSpeed>
        
        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));
        
        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 80038e8:	683b      	ldr	r3, [r7, #0]
 80038ea:	68db      	ldr	r3, [r3, #12]
 80038ec:	461a      	mov	r2, r3
 80038ee:	69b9      	ldr	r1, [r7, #24]
 80038f0:	6878      	ldr	r0, [r7, #4]
 80038f2:	f7ff fef3 	bl	80036dc <LL_GPIO_SetPinOutputType>
      }
      
      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 80038f6:	683b      	ldr	r3, [r7, #0]
 80038f8:	691b      	ldr	r3, [r3, #16]
 80038fa:	461a      	mov	r2, r3
 80038fc:	69b9      	ldr	r1, [r7, #24]
 80038fe:	6878      	ldr	r0, [r7, #4]
 8003900:	f7ff ff33 	bl	800376a <LL_GPIO_SetPinPull>
      
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8003904:	683b      	ldr	r3, [r7, #0]
 8003906:	685b      	ldr	r3, [r3, #4]
 8003908:	2b02      	cmp	r3, #2
 800390a:	d11a      	bne.n	8003942 <LL_GPIO_Init+0xba>
 800390c:	69bb      	ldr	r3, [r7, #24]
 800390e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	fa93 f3a3 	rbit	r3, r3
 8003916:	60bb      	str	r3, [r7, #8]
  return result;
 8003918:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));
        
        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 800391a:	fab3 f383 	clz	r3, r3
 800391e:	b2db      	uxtb	r3, r3
 8003920:	2b07      	cmp	r3, #7
 8003922:	d807      	bhi.n	8003934 <LL_GPIO_Init+0xac>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8003924:	683b      	ldr	r3, [r7, #0]
 8003926:	695b      	ldr	r3, [r3, #20]
 8003928:	461a      	mov	r2, r3
 800392a:	69b9      	ldr	r1, [r7, #24]
 800392c:	6878      	ldr	r0, [r7, #4]
 800392e:	f7ff ff4b 	bl	80037c8 <LL_GPIO_SetAFPin_0_7>
 8003932:	e006      	b.n	8003942 <LL_GPIO_Init+0xba>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8003934:	683b      	ldr	r3, [r7, #0]
 8003936:	695b      	ldr	r3, [r3, #20]
 8003938:	461a      	mov	r2, r3
 800393a:	69b9      	ldr	r1, [r7, #24]
 800393c:	6878      	ldr	r0, [r7, #4]
 800393e:	f7ff ff72 	bl	8003826 <LL_GPIO_SetAFPin_8_15>
        }
      }
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8003942:	683b      	ldr	r3, [r7, #0]
 8003944:	685b      	ldr	r3, [r3, #4]
 8003946:	461a      	mov	r2, r3
 8003948:	69b9      	ldr	r1, [r7, #24]
 800394a:	6878      	ldr	r0, [r7, #4]
 800394c:	f7ff fe97 	bl	800367e <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8003950:	69fb      	ldr	r3, [r7, #28]
 8003952:	3301      	adds	r3, #1
 8003954:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8003956:	683b      	ldr	r3, [r7, #0]
 8003958:	681a      	ldr	r2, [r3, #0]
 800395a:	69fb      	ldr	r3, [r7, #28]
 800395c:	fa22 f303 	lsr.w	r3, r2, r3
 8003960:	2b00      	cmp	r3, #0
 8003962:	d1a7      	bne.n	80038b4 <LL_GPIO_Init+0x2c>
  }

  return (SUCCESS);
 8003964:	2300      	movs	r3, #0
}
 8003966:	4618      	mov	r0, r3
 8003968:	3720      	adds	r7, #32
 800396a:	46bd      	mov	sp, r7
 800396c:	bd80      	pop	{r7, pc}

0800396e <LL_I2C_Enable>:
{
 800396e:	b480      	push	{r7}
 8003970:	b083      	sub	sp, #12
 8003972:	af00      	add	r7, sp, #0
 8003974:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f043 0201 	orr.w	r2, r3, #1
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	601a      	str	r2, [r3, #0]
}
 8003982:	bf00      	nop
 8003984:	370c      	adds	r7, #12
 8003986:	46bd      	mov	sp, r7
 8003988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398c:	4770      	bx	lr

0800398e <LL_I2C_Disable>:
{
 800398e:	b480      	push	{r7}
 8003990:	b083      	sub	sp, #12
 8003992:	af00      	add	r7, sp, #0
 8003994:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_PE);
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f023 0201 	bic.w	r2, r3, #1
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	601a      	str	r2, [r3, #0]
}
 80039a2:	bf00      	nop
 80039a4:	370c      	adds	r7, #12
 80039a6:	46bd      	mov	sp, r7
 80039a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ac:	4770      	bx	lr

080039ae <LL_I2C_ConfigFilters>:
{
 80039ae:	b480      	push	{r7}
 80039b0:	b085      	sub	sp, #20
 80039b2:	af00      	add	r7, sp, #0
 80039b4:	60f8      	str	r0, [r7, #12]
 80039b6:	60b9      	str	r1, [r7, #8]
 80039b8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->FLTR, I2C_FLTR_ANOFF | I2C_FLTR_DNF, AnalogFilter | DigitalFilter);
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039be:	f023 021f 	bic.w	r2, r3, #31
 80039c2:	68b9      	ldr	r1, [r7, #8]
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	430b      	orrs	r3, r1
 80039c8:	431a      	orrs	r2, r3
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	625a      	str	r2, [r3, #36]	; 0x24
}
 80039ce:	bf00      	nop
 80039d0:	3714      	adds	r7, #20
 80039d2:	46bd      	mov	sp, r7
 80039d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d8:	4770      	bx	lr

080039da <LL_I2C_SetOwnAddress1>:
{
 80039da:	b480      	push	{r7}
 80039dc:	b085      	sub	sp, #20
 80039de:	af00      	add	r7, sp, #0
 80039e0:	60f8      	str	r0, [r7, #12]
 80039e2:	60b9      	str	r1, [r7, #8]
 80039e4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->OAR1, I2C_OAR1_ADD0 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD8_9 | I2C_OAR1_ADDMODE, OwnAddress1 | OwnAddrSize);
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	689b      	ldr	r3, [r3, #8]
 80039ea:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80039ee:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80039f2:	68b9      	ldr	r1, [r7, #8]
 80039f4:	687a      	ldr	r2, [r7, #4]
 80039f6:	430a      	orrs	r2, r1
 80039f8:	431a      	orrs	r2, r3
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	609a      	str	r2, [r3, #8]
}
 80039fe:	bf00      	nop
 8003a00:	3714      	adds	r7, #20
 8003a02:	46bd      	mov	sp, r7
 8003a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a08:	4770      	bx	lr
	...

08003a0c <LL_I2C_ConfigSpeed>:
{
 8003a0c:	b480      	push	{r7}
 8003a0e:	b087      	sub	sp, #28
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	60f8      	str	r0, [r7, #12]
 8003a14:	60b9      	str	r1, [r7, #8]
 8003a16:	607a      	str	r2, [r7, #4]
 8003a18:	603b      	str	r3, [r7, #0]
  uint32_t freqrange = 0x0U;
 8003a1a:	2300      	movs	r3, #0
 8003a1c:	613b      	str	r3, [r7, #16]
  uint32_t clockconfig = 0x0U;
 8003a1e:	2300      	movs	r3, #0
 8003a20:	617b      	str	r3, [r7, #20]
  freqrange = __LL_I2C_FREQ_HZ_TO_MHZ(PeriphClock);
 8003a22:	68bb      	ldr	r3, [r7, #8]
 8003a24:	4a41      	ldr	r2, [pc, #260]	; (8003b2c <LL_I2C_ConfigSpeed+0x120>)
 8003a26:	fba2 2303 	umull	r2, r3, r2, r3
 8003a2a:	0c9b      	lsrs	r3, r3, #18
 8003a2c:	613b      	str	r3, [r7, #16]
  MODIFY_REG(I2Cx->CR2, I2C_CR2_FREQ, freqrange);
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	685b      	ldr	r3, [r3, #4]
 8003a32:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8003a36:	693b      	ldr	r3, [r7, #16]
 8003a38:	431a      	orrs	r2, r3
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	605a      	str	r2, [r3, #4]
  MODIFY_REG(I2Cx->TRISE, I2C_TRISE_TRISE, __LL_I2C_RISE_TIME(freqrange, ClockSpeed));
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	6a1b      	ldr	r3, [r3, #32]
 8003a42:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	4939      	ldr	r1, [pc, #228]	; (8003b30 <LL_I2C_ConfigSpeed+0x124>)
 8003a4a:	428b      	cmp	r3, r1
 8003a4c:	d802      	bhi.n	8003a54 <LL_I2C_ConfigSpeed+0x48>
 8003a4e:	693b      	ldr	r3, [r7, #16]
 8003a50:	3301      	adds	r3, #1
 8003a52:	e009      	b.n	8003a68 <LL_I2C_ConfigSpeed+0x5c>
 8003a54:	693b      	ldr	r3, [r7, #16]
 8003a56:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8003a5a:	fb01 f303 	mul.w	r3, r1, r3
 8003a5e:	4935      	ldr	r1, [pc, #212]	; (8003b34 <LL_I2C_ConfigSpeed+0x128>)
 8003a60:	fba1 1303 	umull	r1, r3, r1, r3
 8003a64:	099b      	lsrs	r3, r3, #6
 8003a66:	3301      	adds	r3, #1
 8003a68:	431a      	orrs	r2, r3
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	621a      	str	r2, [r3, #32]
  if (ClockSpeed > LL_I2C_MAX_SPEED_STANDARD)
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	4a2f      	ldr	r2, [pc, #188]	; (8003b30 <LL_I2C_ConfigSpeed+0x124>)
 8003a72:	4293      	cmp	r3, r2
 8003a74:	d939      	bls.n	8003aea <LL_I2C_ConfigSpeed+0xde>
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 8003a76:	683b      	ldr	r3, [r7, #0]
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d117      	bne.n	8003aac <LL_I2C_ConfigSpeed+0xa0>
                  __LL_I2C_SPEED_FAST_TO_CCR(PeriphClock, ClockSpeed, DutyCycle)        | \
 8003a7c:	687a      	ldr	r2, [r7, #4]
 8003a7e:	4613      	mov	r3, r2
 8003a80:	005b      	lsls	r3, r3, #1
 8003a82:	4413      	add	r3, r2
 8003a84:	68ba      	ldr	r2, [r7, #8]
 8003a86:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a8a:	f3c3 030b 	ubfx	r3, r3, #0, #12
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d009      	beq.n	8003aa6 <LL_I2C_ConfigSpeed+0x9a>
                  __LL_I2C_SPEED_FAST_TO_CCR(PeriphClock, ClockSpeed, DutyCycle)        | \
 8003a92:	687a      	ldr	r2, [r7, #4]
 8003a94:	4613      	mov	r3, r2
 8003a96:	005b      	lsls	r3, r3, #1
 8003a98:	4413      	add	r3, r2
 8003a9a:	68ba      	ldr	r2, [r7, #8]
 8003a9c:	fbb2 f3f3 	udiv	r3, r2, r3
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 8003aa0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003aa4:	e01d      	b.n	8003ae2 <LL_I2C_ConfigSpeed+0xd6>
 8003aa6:	f248 0301 	movw	r3, #32769	; 0x8001
 8003aaa:	e01a      	b.n	8003ae2 <LL_I2C_ConfigSpeed+0xd6>
                  __LL_I2C_SPEED_FAST_TO_CCR(PeriphClock, ClockSpeed, DutyCycle)        | \
 8003aac:	687a      	ldr	r2, [r7, #4]
 8003aae:	4613      	mov	r3, r2
 8003ab0:	009b      	lsls	r3, r3, #2
 8003ab2:	4413      	add	r3, r2
 8003ab4:	009a      	lsls	r2, r3, #2
 8003ab6:	4413      	add	r3, r2
 8003ab8:	68ba      	ldr	r2, [r7, #8]
 8003aba:	fbb2 f3f3 	udiv	r3, r2, r3
 8003abe:	f3c3 030b 	ubfx	r3, r3, #0, #12
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d00b      	beq.n	8003ade <LL_I2C_ConfigSpeed+0xd2>
                  __LL_I2C_SPEED_FAST_TO_CCR(PeriphClock, ClockSpeed, DutyCycle)        | \
 8003ac6:	687a      	ldr	r2, [r7, #4]
 8003ac8:	4613      	mov	r3, r2
 8003aca:	009b      	lsls	r3, r3, #2
 8003acc:	4413      	add	r3, r2
 8003ace:	009a      	lsls	r2, r3, #2
 8003ad0:	4413      	add	r3, r2
 8003ad2:	68ba      	ldr	r2, [r7, #8]
 8003ad4:	fbb2 f3f3 	udiv	r3, r2, r3
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 8003ad8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003adc:	e001      	b.n	8003ae2 <LL_I2C_ConfigSpeed+0xd6>
 8003ade:	f248 0301 	movw	r3, #32769	; 0x8001
 8003ae2:	683a      	ldr	r2, [r7, #0]
 8003ae4:	4313      	orrs	r3, r2
 8003ae6:	617b      	str	r3, [r7, #20]
 8003ae8:	e010      	b.n	8003b0c <LL_I2C_ConfigSpeed+0x100>
                  __LL_I2C_SPEED_STANDARD_TO_CCR(PeriphClock, ClockSpeed);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	005b      	lsls	r3, r3, #1
 8003aee:	68ba      	ldr	r2, [r7, #8]
 8003af0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003af4:	f3c3 030b 	ubfx	r3, r3, #0, #12
    clockconfig = LL_I2C_CLOCK_SPEED_STANDARD_MODE                                      | \
 8003af8:	2b03      	cmp	r3, #3
 8003afa:	d905      	bls.n	8003b08 <LL_I2C_ConfigSpeed+0xfc>
                  __LL_I2C_SPEED_STANDARD_TO_CCR(PeriphClock, ClockSpeed);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	005b      	lsls	r3, r3, #1
    clockconfig = LL_I2C_CLOCK_SPEED_STANDARD_MODE                                      | \
 8003b00:	68ba      	ldr	r2, [r7, #8]
 8003b02:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b06:	e000      	b.n	8003b0a <LL_I2C_ConfigSpeed+0xfe>
 8003b08:	2304      	movs	r3, #4
 8003b0a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(I2Cx->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), clockconfig);
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	69db      	ldr	r3, [r3, #28]
 8003b10:	f423 434f 	bic.w	r3, r3, #52992	; 0xcf00
 8003b14:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003b18:	697a      	ldr	r2, [r7, #20]
 8003b1a:	431a      	orrs	r2, r3
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	61da      	str	r2, [r3, #28]
}
 8003b20:	bf00      	nop
 8003b22:	371c      	adds	r7, #28
 8003b24:	46bd      	mov	sp, r7
 8003b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2a:	4770      	bx	lr
 8003b2c:	431bde83 	.word	0x431bde83
 8003b30:	000186a0 	.word	0x000186a0
 8003b34:	10624dd3 	.word	0x10624dd3

08003b38 <LL_I2C_SetMode>:
{
 8003b38:	b480      	push	{r7}
 8003b3a:	b083      	sub	sp, #12
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	6078      	str	r0, [r7, #4]
 8003b40:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_SMBUS | I2C_CR1_SMBTYPE | I2C_CR1_ENARP, PeripheralMode);
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f023 021a 	bic.w	r2, r3, #26
 8003b4a:	683b      	ldr	r3, [r7, #0]
 8003b4c:	431a      	orrs	r2, r3
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	601a      	str	r2, [r3, #0]
}
 8003b52:	bf00      	nop
 8003b54:	370c      	adds	r7, #12
 8003b56:	46bd      	mov	sp, r7
 8003b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5c:	4770      	bx	lr

08003b5e <LL_I2C_AcknowledgeNextData>:
{
 8003b5e:	b480      	push	{r7}
 8003b60:	b083      	sub	sp, #12
 8003b62:	af00      	add	r7, sp, #0
 8003b64:	6078      	str	r0, [r7, #4]
 8003b66:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_ACK, TypeAcknowledge);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003b70:	683b      	ldr	r3, [r7, #0]
 8003b72:	431a      	orrs	r2, r3
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	601a      	str	r2, [r3, #0]
}
 8003b78:	bf00      	nop
 8003b7a:	370c      	adds	r7, #12
 8003b7c:	46bd      	mov	sp, r7
 8003b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b82:	4770      	bx	lr

08003b84 <LL_I2C_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS  I2C registers are initialized
  *          - ERROR  Not applicable
  */
uint32_t LL_I2C_Init(I2C_TypeDef *I2Cx, LL_I2C_InitTypeDef *I2C_InitStruct)
{
 8003b84:	b580      	push	{r7, lr}
 8003b86:	b086      	sub	sp, #24
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	6078      	str	r0, [r7, #4]
 8003b8c:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_I2C_OWN_ADDRESS1(I2C_InitStruct->OwnAddress1));
  assert_param(IS_LL_I2C_TYPE_ACKNOWLEDGE(I2C_InitStruct->TypeAcknowledge));
  assert_param(IS_LL_I2C_OWN_ADDRSIZE(I2C_InitStruct->OwnAddrSize));

  /* Disable the selected I2Cx Peripheral */
  LL_I2C_Disable(I2Cx);
 8003b8e:	6878      	ldr	r0, [r7, #4]
 8003b90:	f7ff fefd 	bl	800398e <LL_I2C_Disable>

  /* Retrieve Clock frequencies */
  LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 8003b94:	f107 0308 	add.w	r3, r7, #8
 8003b98:	4618      	mov	r0, r3
 8003b9a:	f000 f89d 	bl	8003cd8 <LL_RCC_GetSystemClocksFreq>
  /*---------------------------- I2Cx FLTR Configuration -----------------------
   * Configure the analog and digital noise filters with parameters :
   * - AnalogFilter: I2C_FLTR_ANFOFF bit
   * - DigitalFilter: I2C_FLTR_DNF[3:0] bits
   */
  LL_I2C_ConfigFilters(I2Cx, I2C_InitStruct->AnalogFilter, I2C_InitStruct->DigitalFilter);
 8003b9e:	683b      	ldr	r3, [r7, #0]
 8003ba0:	68d9      	ldr	r1, [r3, #12]
 8003ba2:	683b      	ldr	r3, [r7, #0]
 8003ba4:	691b      	ldr	r3, [r3, #16]
 8003ba6:	461a      	mov	r2, r3
 8003ba8:	6878      	ldr	r0, [r7, #4]
 8003baa:	f7ff ff00 	bl	80039ae <LL_I2C_ConfigFilters>
   * Configure the SCL speed :
   * - ClockSpeed: I2C_CR2_FREQ[5:0], I2C_TRISE_TRISE[5:0], I2C_CCR_FS,
   *           and I2C_CCR_CCR[11:0] bits
   * - DutyCycle: I2C_CCR_DUTY[7:0] bits
   */
  LL_I2C_ConfigSpeed(I2Cx, rcc_clocks.PCLK1_Frequency, I2C_InitStruct->ClockSpeed, I2C_InitStruct->DutyCycle);
 8003bae:	6939      	ldr	r1, [r7, #16]
 8003bb0:	683b      	ldr	r3, [r7, #0]
 8003bb2:	685a      	ldr	r2, [r3, #4]
 8003bb4:	683b      	ldr	r3, [r7, #0]
 8003bb6:	689b      	ldr	r3, [r3, #8]
 8003bb8:	6878      	ldr	r0, [r7, #4]
 8003bba:	f7ff ff27 	bl	8003a0c <LL_I2C_ConfigSpeed>
  /*---------------------------- I2Cx OAR1 Configuration -----------------------
   * Disable, Configure and Enable I2Cx device own address 1 with parameters :
   * - OwnAddress1:  I2C_OAR1_ADD[9:8], I2C_OAR1_ADD[7:1] and I2C_OAR1_ADD0 bits
   * - OwnAddrSize:  I2C_OAR1_ADDMODE bit
   */
  LL_I2C_SetOwnAddress1(I2Cx, I2C_InitStruct->OwnAddress1, I2C_InitStruct->OwnAddrSize);
 8003bbe:	683b      	ldr	r3, [r7, #0]
 8003bc0:	6959      	ldr	r1, [r3, #20]
 8003bc2:	683b      	ldr	r3, [r7, #0]
 8003bc4:	69db      	ldr	r3, [r3, #28]
 8003bc6:	461a      	mov	r2, r3
 8003bc8:	6878      	ldr	r0, [r7, #4]
 8003bca:	f7ff ff06 	bl	80039da <LL_I2C_SetOwnAddress1>

  /*---------------------------- I2Cx MODE Configuration -----------------------
  * Configure I2Cx peripheral mode with parameter :
   * - PeripheralMode: I2C_CR1_SMBUS, I2C_CR1_SMBTYPE and I2C_CR1_ENARP bits
   */
  LL_I2C_SetMode(I2Cx, I2C_InitStruct->PeripheralMode);
 8003bce:	683b      	ldr	r3, [r7, #0]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	4619      	mov	r1, r3
 8003bd4:	6878      	ldr	r0, [r7, #4]
 8003bd6:	f7ff ffaf 	bl	8003b38 <LL_I2C_SetMode>

  /* Enable the selected I2Cx Peripheral */
  LL_I2C_Enable(I2Cx);
 8003bda:	6878      	ldr	r0, [r7, #4]
 8003bdc:	f7ff fec7 	bl	800396e <LL_I2C_Enable>
  /*---------------------------- I2Cx CR2 Configuration ------------------------
   * Configure the ACKnowledge or Non ACKnowledge condition
   * after the address receive match code or next received byte with parameter :
   * - TypeAcknowledge: I2C_CR2_NACK bit
   */
  LL_I2C_AcknowledgeNextData(I2Cx, I2C_InitStruct->TypeAcknowledge);
 8003be0:	683b      	ldr	r3, [r7, #0]
 8003be2:	699b      	ldr	r3, [r3, #24]
 8003be4:	4619      	mov	r1, r3
 8003be6:	6878      	ldr	r0, [r7, #4]
 8003be8:	f7ff ffb9 	bl	8003b5e <LL_I2C_AcknowledgeNextData>

  return SUCCESS;
 8003bec:	2300      	movs	r3, #0
}
 8003bee:	4618      	mov	r0, r3
 8003bf0:	3718      	adds	r7, #24
 8003bf2:	46bd      	mov	sp, r7
 8003bf4:	bd80      	pop	{r7, pc}
	...

08003bf8 <LL_RCC_GetSysClkSource>:
{
 8003bf8:	b480      	push	{r7}
 8003bfa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8003bfc:	4b04      	ldr	r3, [pc, #16]	; (8003c10 <LL_RCC_GetSysClkSource+0x18>)
 8003bfe:	689b      	ldr	r3, [r3, #8]
 8003c00:	f003 030c 	and.w	r3, r3, #12
}
 8003c04:	4618      	mov	r0, r3
 8003c06:	46bd      	mov	sp, r7
 8003c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0c:	4770      	bx	lr
 8003c0e:	bf00      	nop
 8003c10:	40023800 	.word	0x40023800

08003c14 <LL_RCC_GetAHBPrescaler>:
{
 8003c14:	b480      	push	{r7}
 8003c16:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8003c18:	4b04      	ldr	r3, [pc, #16]	; (8003c2c <LL_RCC_GetAHBPrescaler+0x18>)
 8003c1a:	689b      	ldr	r3, [r3, #8]
 8003c1c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8003c20:	4618      	mov	r0, r3
 8003c22:	46bd      	mov	sp, r7
 8003c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c28:	4770      	bx	lr
 8003c2a:	bf00      	nop
 8003c2c:	40023800 	.word	0x40023800

08003c30 <LL_RCC_GetAPB1Prescaler>:
{
 8003c30:	b480      	push	{r7}
 8003c32:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8003c34:	4b04      	ldr	r3, [pc, #16]	; (8003c48 <LL_RCC_GetAPB1Prescaler+0x18>)
 8003c36:	689b      	ldr	r3, [r3, #8]
 8003c38:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
}
 8003c3c:	4618      	mov	r0, r3
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c44:	4770      	bx	lr
 8003c46:	bf00      	nop
 8003c48:	40023800 	.word	0x40023800

08003c4c <LL_RCC_GetAPB2Prescaler>:
{
 8003c4c:	b480      	push	{r7}
 8003c4e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8003c50:	4b04      	ldr	r3, [pc, #16]	; (8003c64 <LL_RCC_GetAPB2Prescaler+0x18>)
 8003c52:	689b      	ldr	r3, [r3, #8]
 8003c54:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8003c58:	4618      	mov	r0, r3
 8003c5a:	46bd      	mov	sp, r7
 8003c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c60:	4770      	bx	lr
 8003c62:	bf00      	nop
 8003c64:	40023800 	.word	0x40023800

08003c68 <LL_RCC_PLL_GetMainSource>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8003c68:	b480      	push	{r7}
 8003c6a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8003c6c:	4b04      	ldr	r3, [pc, #16]	; (8003c80 <LL_RCC_PLL_GetMainSource+0x18>)
 8003c6e:	685b      	ldr	r3, [r3, #4]
 8003c70:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
}
 8003c74:	4618      	mov	r0, r3
 8003c76:	46bd      	mov	sp, r7
 8003c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7c:	4770      	bx	lr
 8003c7e:	bf00      	nop
 8003c80:	40023800 	.word	0x40023800

08003c84 <LL_RCC_PLL_GetN>:
  * @retval Between 50/192(*) and 432
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8003c84:	b480      	push	{r7}
 8003c86:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8003c88:	4b04      	ldr	r3, [pc, #16]	; (8003c9c <LL_RCC_PLL_GetN+0x18>)
 8003c8a:	685b      	ldr	r3, [r3, #4]
 8003c8c:	099b      	lsrs	r3, r3, #6
 8003c8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
}
 8003c92:	4618      	mov	r0, r3
 8003c94:	46bd      	mov	sp, r7
 8003c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c9a:	4770      	bx	lr
 8003c9c:	40023800 	.word	0x40023800

08003ca0 <LL_RCC_PLL_GetP>:
  *         @arg @ref LL_RCC_PLLP_DIV_4
  *         @arg @ref LL_RCC_PLLP_DIV_6
  *         @arg @ref LL_RCC_PLLP_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetP(void)
{
 8003ca0:	b480      	push	{r7}
 8003ca2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP));
 8003ca4:	4b04      	ldr	r3, [pc, #16]	; (8003cb8 <LL_RCC_PLL_GetP+0x18>)
 8003ca6:	685b      	ldr	r3, [r3, #4]
 8003ca8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
}
 8003cac:	4618      	mov	r0, r3
 8003cae:	46bd      	mov	sp, r7
 8003cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb4:	4770      	bx	lr
 8003cb6:	bf00      	nop
 8003cb8:	40023800 	.word	0x40023800

08003cbc <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_61
  *         @arg @ref LL_RCC_PLLM_DIV_62
  *         @arg @ref LL_RCC_PLLM_DIV_63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8003cbc:	b480      	push	{r7}
 8003cbe:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8003cc0:	4b04      	ldr	r3, [pc, #16]	; (8003cd4 <LL_RCC_PLL_GetDivider+0x18>)
 8003cc2:	685b      	ldr	r3, [r3, #4]
 8003cc4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
}
 8003cc8:	4618      	mov	r0, r3
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd0:	4770      	bx	lr
 8003cd2:	bf00      	nop
 8003cd4:	40023800 	.word	0x40023800

08003cd8 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 8003cd8:	b580      	push	{r7, lr}
 8003cda:	b082      	sub	sp, #8
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 8003ce0:	f000 f820 	bl	8003d24 <RCC_GetSystemClockFreq>
 8003ce4:	4602      	mov	r2, r0
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	4618      	mov	r0, r3
 8003cf0:	f000 f83e 	bl	8003d70 <RCC_GetHCLKClockFreq>
 8003cf4:	4602      	mov	r2, r0
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	685b      	ldr	r3, [r3, #4]
 8003cfe:	4618      	mov	r0, r3
 8003d00:	f000 f84c 	bl	8003d9c <RCC_GetPCLK1ClockFreq>
 8003d04:	4602      	mov	r2, r0
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	685b      	ldr	r3, [r3, #4]
 8003d0e:	4618      	mov	r0, r3
 8003d10:	f000 f858 	bl	8003dc4 <RCC_GetPCLK2ClockFreq>
 8003d14:	4602      	mov	r2, r0
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	60da      	str	r2, [r3, #12]
}
 8003d1a:	bf00      	nop
 8003d1c:	3708      	adds	r7, #8
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	bd80      	pop	{r7, pc}
	...

08003d24 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 8003d24:	b580      	push	{r7, lr}
 8003d26:	b082      	sub	sp, #8
 8003d28:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 8003d2a:	2300      	movs	r3, #0
 8003d2c:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8003d2e:	f7ff ff63 	bl	8003bf8 <LL_RCC_GetSysClkSource>
 8003d32:	4603      	mov	r3, r0
 8003d34:	2b04      	cmp	r3, #4
 8003d36:	d006      	beq.n	8003d46 <RCC_GetSystemClockFreq+0x22>
 8003d38:	2b08      	cmp	r3, #8
 8003d3a:	d007      	beq.n	8003d4c <RCC_GetSystemClockFreq+0x28>
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d10a      	bne.n	8003d56 <RCC_GetSystemClockFreq+0x32>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 8003d40:	4b09      	ldr	r3, [pc, #36]	; (8003d68 <RCC_GetSystemClockFreq+0x44>)
 8003d42:	607b      	str	r3, [r7, #4]
      break;
 8003d44:	e00a      	b.n	8003d5c <RCC_GetSystemClockFreq+0x38>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 8003d46:	4b09      	ldr	r3, [pc, #36]	; (8003d6c <RCC_GetSystemClockFreq+0x48>)
 8003d48:	607b      	str	r3, [r7, #4]
      break;
 8003d4a:	e007      	b.n	8003d5c <RCC_GetSystemClockFreq+0x38>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLL);
 8003d4c:	2008      	movs	r0, #8
 8003d4e:	f000 f84d 	bl	8003dec <RCC_PLL_GetFreqDomain_SYS>
 8003d52:	6078      	str	r0, [r7, #4]
      break;
 8003d54:	e002      	b.n	8003d5c <RCC_GetSystemClockFreq+0x38>
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLLR);
      break;
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

    default:
      frequency = HSI_VALUE;
 8003d56:	4b04      	ldr	r3, [pc, #16]	; (8003d68 <RCC_GetSystemClockFreq+0x44>)
 8003d58:	607b      	str	r3, [r7, #4]
      break;
 8003d5a:	bf00      	nop
  }

  return frequency;
 8003d5c:	687b      	ldr	r3, [r7, #4]
}
 8003d5e:	4618      	mov	r0, r3
 8003d60:	3708      	adds	r7, #8
 8003d62:	46bd      	mov	sp, r7
 8003d64:	bd80      	pop	{r7, pc}
 8003d66:	bf00      	nop
 8003d68:	00f42400 	.word	0x00f42400
 8003d6c:	017d7840 	.word	0x017d7840

08003d70 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8003d70:	b580      	push	{r7, lr}
 8003d72:	b082      	sub	sp, #8
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8003d78:	f7ff ff4c 	bl	8003c14 <LL_RCC_GetAHBPrescaler>
 8003d7c:	4603      	mov	r3, r0
 8003d7e:	091b      	lsrs	r3, r3, #4
 8003d80:	f003 030f 	and.w	r3, r3, #15
 8003d84:	4a04      	ldr	r2, [pc, #16]	; (8003d98 <RCC_GetHCLKClockFreq+0x28>)
 8003d86:	5cd3      	ldrb	r3, [r2, r3]
 8003d88:	461a      	mov	r2, r3
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	40d3      	lsrs	r3, r2
}
 8003d8e:	4618      	mov	r0, r3
 8003d90:	3708      	adds	r7, #8
 8003d92:	46bd      	mov	sp, r7
 8003d94:	bd80      	pop	{r7, pc}
 8003d96:	bf00      	nop
 8003d98:	08006e08 	.word	0x08006e08

08003d9c <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8003d9c:	b580      	push	{r7, lr}
 8003d9e:	b082      	sub	sp, #8
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8003da4:	f7ff ff44 	bl	8003c30 <LL_RCC_GetAPB1Prescaler>
 8003da8:	4603      	mov	r3, r0
 8003daa:	0a9b      	lsrs	r3, r3, #10
 8003dac:	4a04      	ldr	r2, [pc, #16]	; (8003dc0 <RCC_GetPCLK1ClockFreq+0x24>)
 8003dae:	5cd3      	ldrb	r3, [r2, r3]
 8003db0:	461a      	mov	r2, r3
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	40d3      	lsrs	r3, r2
}
 8003db6:	4618      	mov	r0, r3
 8003db8:	3708      	adds	r7, #8
 8003dba:	46bd      	mov	sp, r7
 8003dbc:	bd80      	pop	{r7, pc}
 8003dbe:	bf00      	nop
 8003dc0:	08006e18 	.word	0x08006e18

08003dc4 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8003dc4:	b580      	push	{r7, lr}
 8003dc6:	b082      	sub	sp, #8
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8003dcc:	f7ff ff3e 	bl	8003c4c <LL_RCC_GetAPB2Prescaler>
 8003dd0:	4603      	mov	r3, r0
 8003dd2:	0b5b      	lsrs	r3, r3, #13
 8003dd4:	4a04      	ldr	r2, [pc, #16]	; (8003de8 <RCC_GetPCLK2ClockFreq+0x24>)
 8003dd6:	5cd3      	ldrb	r3, [r2, r3]
 8003dd8:	461a      	mov	r2, r3
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	40d3      	lsrs	r3, r2
}
 8003dde:	4618      	mov	r0, r3
 8003de0:	3708      	adds	r7, #8
 8003de2:	46bd      	mov	sp, r7
 8003de4:	bd80      	pop	{r7, pc}
 8003de6:	bf00      	nop
 8003de8:	08006e18 	.word	0x08006e18

08003dec <RCC_PLL_GetFreqDomain_SYS>:
  * @brief  Return PLL clock frequency used for system domain
  * @param  SYSCLK_Source System clock source
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(uint32_t SYSCLK_Source)
{
 8003dec:	b590      	push	{r4, r7, lr}
 8003dee:	b087      	sub	sp, #28
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	6078      	str	r0, [r7, #4]
  uint32_t pllinputfreq = 0U, pllsource = 0U, plloutputfreq = 0U;
 8003df4:	2300      	movs	r3, #0
 8003df6:	617b      	str	r3, [r7, #20]
 8003df8:	2300      	movs	r3, #0
 8003dfa:	60fb      	str	r3, [r7, #12]
 8003dfc:	2300      	movs	r3, #0
 8003dfe:	613b      	str	r3, [r7, #16]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / (PLLP or PLLR)
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 8003e00:	f7ff ff32 	bl	8003c68 <LL_RCC_PLL_GetMainSource>
 8003e04:	60f8      	str	r0, [r7, #12]

  switch (pllsource)
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d003      	beq.n	8003e14 <RCC_PLL_GetFreqDomain_SYS+0x28>
 8003e0c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003e10:	d003      	beq.n	8003e1a <RCC_PLL_GetFreqDomain_SYS+0x2e>
 8003e12:	e005      	b.n	8003e20 <RCC_PLL_GetFreqDomain_SYS+0x34>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 8003e14:	4b12      	ldr	r3, [pc, #72]	; (8003e60 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8003e16:	617b      	str	r3, [r7, #20]
      break;
 8003e18:	e005      	b.n	8003e26 <RCC_PLL_GetFreqDomain_SYS+0x3a>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 8003e1a:	4b12      	ldr	r3, [pc, #72]	; (8003e64 <RCC_PLL_GetFreqDomain_SYS+0x78>)
 8003e1c:	617b      	str	r3, [r7, #20]
      break;
 8003e1e:	e002      	b.n	8003e26 <RCC_PLL_GetFreqDomain_SYS+0x3a>

    default:
      pllinputfreq = HSI_VALUE;
 8003e20:	4b0f      	ldr	r3, [pc, #60]	; (8003e60 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8003e22:	617b      	str	r3, [r7, #20]
      break;
 8003e24:	bf00      	nop
  }

  if (SYSCLK_Source == LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	2b08      	cmp	r3, #8
 8003e2a:	d113      	bne.n	8003e54 <RCC_PLL_GetFreqDomain_SYS+0x68>
  {
    plloutputfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8003e2c:	f7ff ff46 	bl	8003cbc <LL_RCC_PLL_GetDivider>
 8003e30:	4602      	mov	r2, r0
 8003e32:	697b      	ldr	r3, [r7, #20]
 8003e34:	fbb3 f4f2 	udiv	r4, r3, r2
 8003e38:	f7ff ff24 	bl	8003c84 <LL_RCC_PLL_GetN>
 8003e3c:	4603      	mov	r3, r0
 8003e3e:	fb03 f404 	mul.w	r4, r3, r4
 8003e42:	f7ff ff2d 	bl	8003ca0 <LL_RCC_PLL_GetP>
 8003e46:	4603      	mov	r3, r0
 8003e48:	0c1b      	lsrs	r3, r3, #16
 8003e4a:	3301      	adds	r3, #1
 8003e4c:	005b      	lsls	r3, r3, #1
 8003e4e:	fbb4 f3f3 	udiv	r3, r4, r3
 8003e52:	613b      	str	r3, [r7, #16]
    plloutputfreq = __LL_RCC_CALC_PLLRCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
                                        LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

  return plloutputfreq;
 8003e54:	693b      	ldr	r3, [r7, #16]
}
 8003e56:	4618      	mov	r0, r3
 8003e58:	371c      	adds	r7, #28
 8003e5a:	46bd      	mov	sp, r7
 8003e5c:	bd90      	pop	{r4, r7, pc}
 8003e5e:	bf00      	nop
 8003e60:	00f42400 	.word	0x00f42400
 8003e64:	017d7840 	.word	0x017d7840

08003e68 <LL_TIM_SetPrescaler>:
  * @param  TIMx Timer instance
  * @param  Prescaler between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetPrescaler(TIM_TypeDef *TIMx, uint32_t Prescaler)
{
 8003e68:	b480      	push	{r7}
 8003e6a:	b083      	sub	sp, #12
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	6078      	str	r0, [r7, #4]
 8003e70:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	683a      	ldr	r2, [r7, #0]
 8003e76:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003e78:	bf00      	nop
 8003e7a:	370c      	adds	r7, #12
 8003e7c:	46bd      	mov	sp, r7
 8003e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e82:	4770      	bx	lr

08003e84 <LL_TIM_SetAutoReload>:
  * @param  TIMx Timer instance
  * @param  AutoReload between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetAutoReload(TIM_TypeDef *TIMx, uint32_t AutoReload)
{
 8003e84:	b480      	push	{r7}
 8003e86:	b083      	sub	sp, #12
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	6078      	str	r0, [r7, #4]
 8003e8c:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	683a      	ldr	r2, [r7, #0]
 8003e92:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8003e94:	bf00      	nop
 8003e96:	370c      	adds	r7, #12
 8003e98:	46bd      	mov	sp, r7
 8003e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9e:	4770      	bx	lr

08003ea0 <LL_TIM_SetRepetitionCounter>:
  * @param  TIMx Timer instance
  * @param  RepetitionCounter between Min_Data=0 and Max_Data=255
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetRepetitionCounter(TIM_TypeDef *TIMx, uint32_t RepetitionCounter)
{
 8003ea0:	b480      	push	{r7}
 8003ea2:	b083      	sub	sp, #12
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	6078      	str	r0, [r7, #4]
 8003ea8:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	683a      	ldr	r2, [r7, #0]
 8003eae:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003eb0:	bf00      	nop
 8003eb2:	370c      	adds	r7, #12
 8003eb4:	46bd      	mov	sp, r7
 8003eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eba:	4770      	bx	lr

08003ebc <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 8003ebc:	b480      	push	{r7}
 8003ebe:	b083      	sub	sp, #12
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	695b      	ldr	r3, [r3, #20]
 8003ec8:	f043 0201 	orr.w	r2, r3, #1
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	615a      	str	r2, [r3, #20]
}
 8003ed0:	bf00      	nop
 8003ed2:	370c      	adds	r7, #12
 8003ed4:	46bd      	mov	sp, r7
 8003ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eda:	4770      	bx	lr

08003edc <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, LL_TIM_InitTypeDef *TIM_InitStruct)
{
 8003edc:	b580      	push	{r7, lr}
 8003ede:	b084      	sub	sp, #16
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	6078      	str	r0, [r7, #4]
 8003ee4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	4a31      	ldr	r2, [pc, #196]	; (8003fb4 <LL_TIM_Init+0xd8>)
 8003ef0:	4293      	cmp	r3, r2
 8003ef2:	d00f      	beq.n	8003f14 <LL_TIM_Init+0x38>
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003efa:	d00b      	beq.n	8003f14 <LL_TIM_Init+0x38>
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	4a2e      	ldr	r2, [pc, #184]	; (8003fb8 <LL_TIM_Init+0xdc>)
 8003f00:	4293      	cmp	r3, r2
 8003f02:	d007      	beq.n	8003f14 <LL_TIM_Init+0x38>
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	4a2d      	ldr	r2, [pc, #180]	; (8003fbc <LL_TIM_Init+0xe0>)
 8003f08:	4293      	cmp	r3, r2
 8003f0a:	d003      	beq.n	8003f14 <LL_TIM_Init+0x38>
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	4a2c      	ldr	r2, [pc, #176]	; (8003fc0 <LL_TIM_Init+0xe4>)
 8003f10:	4293      	cmp	r3, r2
 8003f12:	d106      	bne.n	8003f22 <LL_TIM_Init+0x46>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003f1a:	683b      	ldr	r3, [r7, #0]
 8003f1c:	685b      	ldr	r3, [r3, #4]
 8003f1e:	4313      	orrs	r3, r2
 8003f20:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	4a23      	ldr	r2, [pc, #140]	; (8003fb4 <LL_TIM_Init+0xd8>)
 8003f26:	4293      	cmp	r3, r2
 8003f28:	d01b      	beq.n	8003f62 <LL_TIM_Init+0x86>
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f30:	d017      	beq.n	8003f62 <LL_TIM_Init+0x86>
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	4a20      	ldr	r2, [pc, #128]	; (8003fb8 <LL_TIM_Init+0xdc>)
 8003f36:	4293      	cmp	r3, r2
 8003f38:	d013      	beq.n	8003f62 <LL_TIM_Init+0x86>
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	4a1f      	ldr	r2, [pc, #124]	; (8003fbc <LL_TIM_Init+0xe0>)
 8003f3e:	4293      	cmp	r3, r2
 8003f40:	d00f      	beq.n	8003f62 <LL_TIM_Init+0x86>
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	4a1e      	ldr	r2, [pc, #120]	; (8003fc0 <LL_TIM_Init+0xe4>)
 8003f46:	4293      	cmp	r3, r2
 8003f48:	d00b      	beq.n	8003f62 <LL_TIM_Init+0x86>
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	4a1d      	ldr	r2, [pc, #116]	; (8003fc4 <LL_TIM_Init+0xe8>)
 8003f4e:	4293      	cmp	r3, r2
 8003f50:	d007      	beq.n	8003f62 <LL_TIM_Init+0x86>
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	4a1c      	ldr	r2, [pc, #112]	; (8003fc8 <LL_TIM_Init+0xec>)
 8003f56:	4293      	cmp	r3, r2
 8003f58:	d003      	beq.n	8003f62 <LL_TIM_Init+0x86>
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	4a1b      	ldr	r2, [pc, #108]	; (8003fcc <LL_TIM_Init+0xf0>)
 8003f5e:	4293      	cmp	r3, r2
 8003f60:	d106      	bne.n	8003f70 <LL_TIM_Init+0x94>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003f68:	683b      	ldr	r3, [r7, #0]
 8003f6a:	68db      	ldr	r3, [r3, #12]
 8003f6c:	4313      	orrs	r3, r2
 8003f6e:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	68fa      	ldr	r2, [r7, #12]
 8003f74:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 8003f76:	683b      	ldr	r3, [r7, #0]
 8003f78:	689b      	ldr	r3, [r3, #8]
 8003f7a:	4619      	mov	r1, r3
 8003f7c:	6878      	ldr	r0, [r7, #4]
 8003f7e:	f7ff ff81 	bl	8003e84 <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 8003f82:	683b      	ldr	r3, [r7, #0]
 8003f84:	881b      	ldrh	r3, [r3, #0]
 8003f86:	4619      	mov	r1, r3
 8003f88:	6878      	ldr	r0, [r7, #4]
 8003f8a:	f7ff ff6d 	bl	8003e68 <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	4a08      	ldr	r2, [pc, #32]	; (8003fb4 <LL_TIM_Init+0xd8>)
 8003f92:	4293      	cmp	r3, r2
 8003f94:	d105      	bne.n	8003fa2 <LL_TIM_Init+0xc6>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 8003f96:	683b      	ldr	r3, [r7, #0]
 8003f98:	7c1b      	ldrb	r3, [r3, #16]
 8003f9a:	4619      	mov	r1, r3
 8003f9c:	6878      	ldr	r0, [r7, #4]
 8003f9e:	f7ff ff7f 	bl	8003ea0 <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 8003fa2:	6878      	ldr	r0, [r7, #4]
 8003fa4:	f7ff ff8a 	bl	8003ebc <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 8003fa8:	2300      	movs	r3, #0
}
 8003faa:	4618      	mov	r0, r3
 8003fac:	3710      	adds	r7, #16
 8003fae:	46bd      	mov	sp, r7
 8003fb0:	bd80      	pop	{r7, pc}
 8003fb2:	bf00      	nop
 8003fb4:	40010000 	.word	0x40010000
 8003fb8:	40000400 	.word	0x40000400
 8003fbc:	40000800 	.word	0x40000800
 8003fc0:	40000c00 	.word	0x40000c00
 8003fc4:	40014000 	.word	0x40014000
 8003fc8:	40014400 	.word	0x40014400
 8003fcc:	40014800 	.word	0x40014800

08003fd0 <LL_USART_IsEnabled>:
{
 8003fd0:	b480      	push	{r7}
 8003fd2:	b083      	sub	sp, #12
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	68db      	ldr	r3, [r3, #12]
 8003fdc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003fe0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003fe4:	bf0c      	ite	eq
 8003fe6:	2301      	moveq	r3, #1
 8003fe8:	2300      	movne	r3, #0
 8003fea:	b2db      	uxtb	r3, r3
}
 8003fec:	4618      	mov	r0, r3
 8003fee:	370c      	adds	r7, #12
 8003ff0:	46bd      	mov	sp, r7
 8003ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff6:	4770      	bx	lr

08003ff8 <LL_USART_SetStopBitsLength>:
{
 8003ff8:	b480      	push	{r7}
 8003ffa:	b083      	sub	sp, #12
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	6078      	str	r0, [r7, #4]
 8004000:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	691b      	ldr	r3, [r3, #16]
 8004006:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800400a:	683b      	ldr	r3, [r7, #0]
 800400c:	431a      	orrs	r2, r3
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	611a      	str	r2, [r3, #16]
}
 8004012:	bf00      	nop
 8004014:	370c      	adds	r7, #12
 8004016:	46bd      	mov	sp, r7
 8004018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401c:	4770      	bx	lr

0800401e <LL_USART_SetHWFlowCtrl>:
{
 800401e:	b480      	push	{r7}
 8004020:	b083      	sub	sp, #12
 8004022:	af00      	add	r7, sp, #0
 8004024:	6078      	str	r0, [r7, #4]
 8004026:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	695b      	ldr	r3, [r3, #20]
 800402c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004030:	683b      	ldr	r3, [r7, #0]
 8004032:	431a      	orrs	r2, r3
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	615a      	str	r2, [r3, #20]
}
 8004038:	bf00      	nop
 800403a:	370c      	adds	r7, #12
 800403c:	46bd      	mov	sp, r7
 800403e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004042:	4770      	bx	lr

08004044 <LL_USART_SetBaudRate>:
{
 8004044:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004048:	b085      	sub	sp, #20
 800404a:	af00      	add	r7, sp, #0
 800404c:	60f8      	str	r0, [r7, #12]
 800404e:	60b9      	str	r1, [r7, #8]
 8004050:	607a      	str	r2, [r7, #4]
 8004052:	603b      	str	r3, [r7, #0]
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800405a:	f040 80c1 	bne.w	80041e0 <LL_USART_SetBaudRate+0x19c>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 800405e:	68bb      	ldr	r3, [r7, #8]
 8004060:	461d      	mov	r5, r3
 8004062:	f04f 0600 	mov.w	r6, #0
 8004066:	46a8      	mov	r8, r5
 8004068:	46b1      	mov	r9, r6
 800406a:	eb18 0308 	adds.w	r3, r8, r8
 800406e:	eb49 0409 	adc.w	r4, r9, r9
 8004072:	4698      	mov	r8, r3
 8004074:	46a1      	mov	r9, r4
 8004076:	eb18 0805 	adds.w	r8, r8, r5
 800407a:	eb49 0906 	adc.w	r9, r9, r6
 800407e:	f04f 0100 	mov.w	r1, #0
 8004082:	f04f 0200 	mov.w	r2, #0
 8004086:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800408a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800408e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004092:	4688      	mov	r8, r1
 8004094:	4691      	mov	r9, r2
 8004096:	eb18 0005 	adds.w	r0, r8, r5
 800409a:	eb49 0106 	adc.w	r1, r9, r6
 800409e:	683b      	ldr	r3, [r7, #0]
 80040a0:	461d      	mov	r5, r3
 80040a2:	f04f 0600 	mov.w	r6, #0
 80040a6:	196b      	adds	r3, r5, r5
 80040a8:	eb46 0406 	adc.w	r4, r6, r6
 80040ac:	461a      	mov	r2, r3
 80040ae:	4623      	mov	r3, r4
 80040b0:	f7fc fdd2 	bl	8000c58 <__aeabi_uldivmod>
 80040b4:	4603      	mov	r3, r0
 80040b6:	460c      	mov	r4, r1
 80040b8:	461a      	mov	r2, r3
 80040ba:	4bb5      	ldr	r3, [pc, #724]	; (8004390 <LL_USART_SetBaudRate+0x34c>)
 80040bc:	fba3 2302 	umull	r2, r3, r3, r2
 80040c0:	095b      	lsrs	r3, r3, #5
 80040c2:	b29b      	uxth	r3, r3
 80040c4:	011b      	lsls	r3, r3, #4
 80040c6:	fa1f f883 	uxth.w	r8, r3
 80040ca:	68bb      	ldr	r3, [r7, #8]
 80040cc:	461d      	mov	r5, r3
 80040ce:	f04f 0600 	mov.w	r6, #0
 80040d2:	46a9      	mov	r9, r5
 80040d4:	46b2      	mov	sl, r6
 80040d6:	eb19 0309 	adds.w	r3, r9, r9
 80040da:	eb4a 040a 	adc.w	r4, sl, sl
 80040de:	4699      	mov	r9, r3
 80040e0:	46a2      	mov	sl, r4
 80040e2:	eb19 0905 	adds.w	r9, r9, r5
 80040e6:	eb4a 0a06 	adc.w	sl, sl, r6
 80040ea:	f04f 0100 	mov.w	r1, #0
 80040ee:	f04f 0200 	mov.w	r2, #0
 80040f2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80040f6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80040fa:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80040fe:	4689      	mov	r9, r1
 8004100:	4692      	mov	sl, r2
 8004102:	eb19 0005 	adds.w	r0, r9, r5
 8004106:	eb4a 0106 	adc.w	r1, sl, r6
 800410a:	683b      	ldr	r3, [r7, #0]
 800410c:	461d      	mov	r5, r3
 800410e:	f04f 0600 	mov.w	r6, #0
 8004112:	196b      	adds	r3, r5, r5
 8004114:	eb46 0406 	adc.w	r4, r6, r6
 8004118:	461a      	mov	r2, r3
 800411a:	4623      	mov	r3, r4
 800411c:	f7fc fd9c 	bl	8000c58 <__aeabi_uldivmod>
 8004120:	4603      	mov	r3, r0
 8004122:	460c      	mov	r4, r1
 8004124:	461a      	mov	r2, r3
 8004126:	4b9a      	ldr	r3, [pc, #616]	; (8004390 <LL_USART_SetBaudRate+0x34c>)
 8004128:	fba3 1302 	umull	r1, r3, r3, r2
 800412c:	095b      	lsrs	r3, r3, #5
 800412e:	2164      	movs	r1, #100	; 0x64
 8004130:	fb01 f303 	mul.w	r3, r1, r3
 8004134:	1ad3      	subs	r3, r2, r3
 8004136:	00db      	lsls	r3, r3, #3
 8004138:	3332      	adds	r3, #50	; 0x32
 800413a:	4a95      	ldr	r2, [pc, #596]	; (8004390 <LL_USART_SetBaudRate+0x34c>)
 800413c:	fba2 2303 	umull	r2, r3, r2, r3
 8004140:	095b      	lsrs	r3, r3, #5
 8004142:	b29b      	uxth	r3, r3
 8004144:	005b      	lsls	r3, r3, #1
 8004146:	b29b      	uxth	r3, r3
 8004148:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800414c:	b29b      	uxth	r3, r3
 800414e:	4443      	add	r3, r8
 8004150:	fa1f f883 	uxth.w	r8, r3
 8004154:	68bb      	ldr	r3, [r7, #8]
 8004156:	461d      	mov	r5, r3
 8004158:	f04f 0600 	mov.w	r6, #0
 800415c:	46a9      	mov	r9, r5
 800415e:	46b2      	mov	sl, r6
 8004160:	eb19 0309 	adds.w	r3, r9, r9
 8004164:	eb4a 040a 	adc.w	r4, sl, sl
 8004168:	4699      	mov	r9, r3
 800416a:	46a2      	mov	sl, r4
 800416c:	eb19 0905 	adds.w	r9, r9, r5
 8004170:	eb4a 0a06 	adc.w	sl, sl, r6
 8004174:	f04f 0100 	mov.w	r1, #0
 8004178:	f04f 0200 	mov.w	r2, #0
 800417c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004180:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004184:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004188:	4689      	mov	r9, r1
 800418a:	4692      	mov	sl, r2
 800418c:	eb19 0005 	adds.w	r0, r9, r5
 8004190:	eb4a 0106 	adc.w	r1, sl, r6
 8004194:	683b      	ldr	r3, [r7, #0]
 8004196:	461d      	mov	r5, r3
 8004198:	f04f 0600 	mov.w	r6, #0
 800419c:	196b      	adds	r3, r5, r5
 800419e:	eb46 0406 	adc.w	r4, r6, r6
 80041a2:	461a      	mov	r2, r3
 80041a4:	4623      	mov	r3, r4
 80041a6:	f7fc fd57 	bl	8000c58 <__aeabi_uldivmod>
 80041aa:	4603      	mov	r3, r0
 80041ac:	460c      	mov	r4, r1
 80041ae:	461a      	mov	r2, r3
 80041b0:	4b77      	ldr	r3, [pc, #476]	; (8004390 <LL_USART_SetBaudRate+0x34c>)
 80041b2:	fba3 1302 	umull	r1, r3, r3, r2
 80041b6:	095b      	lsrs	r3, r3, #5
 80041b8:	2164      	movs	r1, #100	; 0x64
 80041ba:	fb01 f303 	mul.w	r3, r1, r3
 80041be:	1ad3      	subs	r3, r2, r3
 80041c0:	00db      	lsls	r3, r3, #3
 80041c2:	3332      	adds	r3, #50	; 0x32
 80041c4:	4a72      	ldr	r2, [pc, #456]	; (8004390 <LL_USART_SetBaudRate+0x34c>)
 80041c6:	fba2 2303 	umull	r2, r3, r2, r3
 80041ca:	095b      	lsrs	r3, r3, #5
 80041cc:	b29b      	uxth	r3, r3
 80041ce:	f003 0307 	and.w	r3, r3, #7
 80041d2:	b29b      	uxth	r3, r3
 80041d4:	4443      	add	r3, r8
 80041d6:	b29b      	uxth	r3, r3
 80041d8:	461a      	mov	r2, r3
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	609a      	str	r2, [r3, #8]
}
 80041de:	e0d2      	b.n	8004386 <LL_USART_SetBaudRate+0x342>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 80041e0:	68bb      	ldr	r3, [r7, #8]
 80041e2:	469a      	mov	sl, r3
 80041e4:	f04f 0b00 	mov.w	fp, #0
 80041e8:	46d0      	mov	r8, sl
 80041ea:	46d9      	mov	r9, fp
 80041ec:	eb18 0308 	adds.w	r3, r8, r8
 80041f0:	eb49 0409 	adc.w	r4, r9, r9
 80041f4:	4698      	mov	r8, r3
 80041f6:	46a1      	mov	r9, r4
 80041f8:	eb18 080a 	adds.w	r8, r8, sl
 80041fc:	eb49 090b 	adc.w	r9, r9, fp
 8004200:	f04f 0100 	mov.w	r1, #0
 8004204:	f04f 0200 	mov.w	r2, #0
 8004208:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800420c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004210:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004214:	4688      	mov	r8, r1
 8004216:	4691      	mov	r9, r2
 8004218:	eb1a 0508 	adds.w	r5, sl, r8
 800421c:	eb4b 0609 	adc.w	r6, fp, r9
 8004220:	683b      	ldr	r3, [r7, #0]
 8004222:	4619      	mov	r1, r3
 8004224:	f04f 0200 	mov.w	r2, #0
 8004228:	f04f 0300 	mov.w	r3, #0
 800422c:	f04f 0400 	mov.w	r4, #0
 8004230:	0094      	lsls	r4, r2, #2
 8004232:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004236:	008b      	lsls	r3, r1, #2
 8004238:	461a      	mov	r2, r3
 800423a:	4623      	mov	r3, r4
 800423c:	4628      	mov	r0, r5
 800423e:	4631      	mov	r1, r6
 8004240:	f7fc fd0a 	bl	8000c58 <__aeabi_uldivmod>
 8004244:	4603      	mov	r3, r0
 8004246:	460c      	mov	r4, r1
 8004248:	461a      	mov	r2, r3
 800424a:	4b51      	ldr	r3, [pc, #324]	; (8004390 <LL_USART_SetBaudRate+0x34c>)
 800424c:	fba3 2302 	umull	r2, r3, r3, r2
 8004250:	095b      	lsrs	r3, r3, #5
 8004252:	b29b      	uxth	r3, r3
 8004254:	011b      	lsls	r3, r3, #4
 8004256:	fa1f f883 	uxth.w	r8, r3
 800425a:	68bb      	ldr	r3, [r7, #8]
 800425c:	469b      	mov	fp, r3
 800425e:	f04f 0c00 	mov.w	ip, #0
 8004262:	46d9      	mov	r9, fp
 8004264:	46e2      	mov	sl, ip
 8004266:	eb19 0309 	adds.w	r3, r9, r9
 800426a:	eb4a 040a 	adc.w	r4, sl, sl
 800426e:	4699      	mov	r9, r3
 8004270:	46a2      	mov	sl, r4
 8004272:	eb19 090b 	adds.w	r9, r9, fp
 8004276:	eb4a 0a0c 	adc.w	sl, sl, ip
 800427a:	f04f 0100 	mov.w	r1, #0
 800427e:	f04f 0200 	mov.w	r2, #0
 8004282:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004286:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800428a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800428e:	4689      	mov	r9, r1
 8004290:	4692      	mov	sl, r2
 8004292:	eb1b 0509 	adds.w	r5, fp, r9
 8004296:	eb4c 060a 	adc.w	r6, ip, sl
 800429a:	683b      	ldr	r3, [r7, #0]
 800429c:	4619      	mov	r1, r3
 800429e:	f04f 0200 	mov.w	r2, #0
 80042a2:	f04f 0300 	mov.w	r3, #0
 80042a6:	f04f 0400 	mov.w	r4, #0
 80042aa:	0094      	lsls	r4, r2, #2
 80042ac:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80042b0:	008b      	lsls	r3, r1, #2
 80042b2:	461a      	mov	r2, r3
 80042b4:	4623      	mov	r3, r4
 80042b6:	4628      	mov	r0, r5
 80042b8:	4631      	mov	r1, r6
 80042ba:	f7fc fccd 	bl	8000c58 <__aeabi_uldivmod>
 80042be:	4603      	mov	r3, r0
 80042c0:	460c      	mov	r4, r1
 80042c2:	461a      	mov	r2, r3
 80042c4:	4b32      	ldr	r3, [pc, #200]	; (8004390 <LL_USART_SetBaudRate+0x34c>)
 80042c6:	fba3 1302 	umull	r1, r3, r3, r2
 80042ca:	095b      	lsrs	r3, r3, #5
 80042cc:	2164      	movs	r1, #100	; 0x64
 80042ce:	fb01 f303 	mul.w	r3, r1, r3
 80042d2:	1ad3      	subs	r3, r2, r3
 80042d4:	011b      	lsls	r3, r3, #4
 80042d6:	3332      	adds	r3, #50	; 0x32
 80042d8:	4a2d      	ldr	r2, [pc, #180]	; (8004390 <LL_USART_SetBaudRate+0x34c>)
 80042da:	fba2 2303 	umull	r2, r3, r2, r3
 80042de:	095b      	lsrs	r3, r3, #5
 80042e0:	b29b      	uxth	r3, r3
 80042e2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80042e6:	b29b      	uxth	r3, r3
 80042e8:	4443      	add	r3, r8
 80042ea:	fa1f f883 	uxth.w	r8, r3
 80042ee:	68bb      	ldr	r3, [r7, #8]
 80042f0:	469b      	mov	fp, r3
 80042f2:	f04f 0c00 	mov.w	ip, #0
 80042f6:	46d9      	mov	r9, fp
 80042f8:	46e2      	mov	sl, ip
 80042fa:	eb19 0309 	adds.w	r3, r9, r9
 80042fe:	eb4a 040a 	adc.w	r4, sl, sl
 8004302:	4699      	mov	r9, r3
 8004304:	46a2      	mov	sl, r4
 8004306:	eb19 090b 	adds.w	r9, r9, fp
 800430a:	eb4a 0a0c 	adc.w	sl, sl, ip
 800430e:	f04f 0100 	mov.w	r1, #0
 8004312:	f04f 0200 	mov.w	r2, #0
 8004316:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800431a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800431e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004322:	4689      	mov	r9, r1
 8004324:	4692      	mov	sl, r2
 8004326:	eb1b 0509 	adds.w	r5, fp, r9
 800432a:	eb4c 060a 	adc.w	r6, ip, sl
 800432e:	683b      	ldr	r3, [r7, #0]
 8004330:	4619      	mov	r1, r3
 8004332:	f04f 0200 	mov.w	r2, #0
 8004336:	f04f 0300 	mov.w	r3, #0
 800433a:	f04f 0400 	mov.w	r4, #0
 800433e:	0094      	lsls	r4, r2, #2
 8004340:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004344:	008b      	lsls	r3, r1, #2
 8004346:	461a      	mov	r2, r3
 8004348:	4623      	mov	r3, r4
 800434a:	4628      	mov	r0, r5
 800434c:	4631      	mov	r1, r6
 800434e:	f7fc fc83 	bl	8000c58 <__aeabi_uldivmod>
 8004352:	4603      	mov	r3, r0
 8004354:	460c      	mov	r4, r1
 8004356:	461a      	mov	r2, r3
 8004358:	4b0d      	ldr	r3, [pc, #52]	; (8004390 <LL_USART_SetBaudRate+0x34c>)
 800435a:	fba3 1302 	umull	r1, r3, r3, r2
 800435e:	095b      	lsrs	r3, r3, #5
 8004360:	2164      	movs	r1, #100	; 0x64
 8004362:	fb01 f303 	mul.w	r3, r1, r3
 8004366:	1ad3      	subs	r3, r2, r3
 8004368:	011b      	lsls	r3, r3, #4
 800436a:	3332      	adds	r3, #50	; 0x32
 800436c:	4a08      	ldr	r2, [pc, #32]	; (8004390 <LL_USART_SetBaudRate+0x34c>)
 800436e:	fba2 2303 	umull	r2, r3, r2, r3
 8004372:	095b      	lsrs	r3, r3, #5
 8004374:	b29b      	uxth	r3, r3
 8004376:	f003 030f 	and.w	r3, r3, #15
 800437a:	b29b      	uxth	r3, r3
 800437c:	4443      	add	r3, r8
 800437e:	b29b      	uxth	r3, r3
 8004380:	461a      	mov	r2, r3
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	609a      	str	r2, [r3, #8]
}
 8004386:	bf00      	nop
 8004388:	3714      	adds	r7, #20
 800438a:	46bd      	mov	sp, r7
 800438c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004390:	51eb851f 	.word	0x51eb851f

08004394 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 8004394:	b580      	push	{r7, lr}
 8004396:	b088      	sub	sp, #32
 8004398:	af00      	add	r7, sp, #0
 800439a:	6078      	str	r0, [r7, #4]
 800439c:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 800439e:	2301      	movs	r3, #1
 80043a0:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 80043a2:	2300      	movs	r3, #0
 80043a4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 80043a6:	6878      	ldr	r0, [r7, #4]
 80043a8:	f7ff fe12 	bl	8003fd0 <LL_USART_IsEnabled>
 80043ac:	4603      	mov	r3, r0
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d149      	bne.n	8004446 <LL_USART_Init+0xb2>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	68db      	ldr	r3, [r3, #12]
 80043b6:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80043ba:	f023 030c 	bic.w	r3, r3, #12
 80043be:	683a      	ldr	r2, [r7, #0]
 80043c0:	6851      	ldr	r1, [r2, #4]
 80043c2:	683a      	ldr	r2, [r7, #0]
 80043c4:	68d2      	ldr	r2, [r2, #12]
 80043c6:	4311      	orrs	r1, r2
 80043c8:	683a      	ldr	r2, [r7, #0]
 80043ca:	6912      	ldr	r2, [r2, #16]
 80043cc:	4311      	orrs	r1, r2
 80043ce:	683a      	ldr	r2, [r7, #0]
 80043d0:	6992      	ldr	r2, [r2, #24]
 80043d2:	430a      	orrs	r2, r1
 80043d4:	431a      	orrs	r2, r3
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	60da      	str	r2, [r3, #12]
    /*---------------------------- USART CR2 Configuration -----------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 80043da:	683b      	ldr	r3, [r7, #0]
 80043dc:	689b      	ldr	r3, [r3, #8]
 80043de:	4619      	mov	r1, r3
 80043e0:	6878      	ldr	r0, [r7, #4]
 80043e2:	f7ff fe09 	bl	8003ff8 <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration -----------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 80043e6:	683b      	ldr	r3, [r7, #0]
 80043e8:	695b      	ldr	r3, [r3, #20]
 80043ea:	4619      	mov	r1, r3
 80043ec:	6878      	ldr	r0, [r7, #4]
 80043ee:	f7ff fe16 	bl	800401e <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration -----------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 80043f2:	f107 0308 	add.w	r3, r7, #8
 80043f6:	4618      	mov	r0, r3
 80043f8:	f7ff fc6e 	bl	8003cd8 <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	4a14      	ldr	r2, [pc, #80]	; (8004450 <LL_USART_Init+0xbc>)
 8004400:	4293      	cmp	r3, r2
 8004402:	d102      	bne.n	800440a <LL_USART_Init+0x76>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8004404:	697b      	ldr	r3, [r7, #20]
 8004406:	61bb      	str	r3, [r7, #24]
 8004408:	e00c      	b.n	8004424 <LL_USART_Init+0x90>
    }
    else if (USARTx == USART2)
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	4a11      	ldr	r2, [pc, #68]	; (8004454 <LL_USART_Init+0xc0>)
 800440e:	4293      	cmp	r3, r2
 8004410:	d102      	bne.n	8004418 <LL_USART_Init+0x84>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8004412:	693b      	ldr	r3, [r7, #16]
 8004414:	61bb      	str	r3, [r7, #24]
 8004416:	e005      	b.n	8004424 <LL_USART_Init+0x90>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
    }
#endif /* USART3 */
#if defined(USART6)
    else if (USARTx == USART6)
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	4a0f      	ldr	r2, [pc, #60]	; (8004458 <LL_USART_Init+0xc4>)
 800441c:	4293      	cmp	r3, r2
 800441e:	d101      	bne.n	8004424 <LL_USART_Init+0x90>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8004420:	697b      	ldr	r3, [r7, #20]
 8004422:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8004424:	69bb      	ldr	r3, [r7, #24]
 8004426:	2b00      	cmp	r3, #0
 8004428:	d00d      	beq.n	8004446 <LL_USART_Init+0xb2>
        && (USART_InitStruct->BaudRate != 0U))
 800442a:	683b      	ldr	r3, [r7, #0]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	2b00      	cmp	r3, #0
 8004430:	d009      	beq.n	8004446 <LL_USART_Init+0xb2>
    {
      status = SUCCESS;
 8004432:	2300      	movs	r3, #0
 8004434:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
 8004436:	683b      	ldr	r3, [r7, #0]
 8004438:	699a      	ldr	r2, [r3, #24]
 800443a:	683b      	ldr	r3, [r7, #0]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	69b9      	ldr	r1, [r7, #24]
 8004440:	6878      	ldr	r0, [r7, #4]
 8004442:	f7ff fdff 	bl	8004044 <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MAX(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8004446:	7ffb      	ldrb	r3, [r7, #31]
}
 8004448:	4618      	mov	r0, r3
 800444a:	3720      	adds	r7, #32
 800444c:	46bd      	mov	sp, r7
 800444e:	bd80      	pop	{r7, pc}
 8004450:	40011000 	.word	0x40011000
 8004454:	40004400 	.word	0x40004400
 8004458:	40011400 	.word	0x40011400

0800445c <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 800445c:	b480      	push	{r7}
 800445e:	b083      	sub	sp, #12
 8004460:	af00      	add	r7, sp, #0
 8004462:	6078      	str	r0, [r7, #4]
 8004464:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 8004466:	687a      	ldr	r2, [r7, #4]
 8004468:	683b      	ldr	r3, [r7, #0]
 800446a:	fbb2 f3f3 	udiv	r3, r2, r3
 800446e:	4a07      	ldr	r2, [pc, #28]	; (800448c <LL_InitTick+0x30>)
 8004470:	3b01      	subs	r3, #1
 8004472:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8004474:	4b05      	ldr	r3, [pc, #20]	; (800448c <LL_InitTick+0x30>)
 8004476:	2200      	movs	r2, #0
 8004478:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800447a:	4b04      	ldr	r3, [pc, #16]	; (800448c <LL_InitTick+0x30>)
 800447c:	2205      	movs	r2, #5
 800447e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 8004480:	bf00      	nop
 8004482:	370c      	adds	r7, #12
 8004484:	46bd      	mov	sp, r7
 8004486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800448a:	4770      	bx	lr
 800448c:	e000e010 	.word	0xe000e010

08004490 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 8004490:	b580      	push	{r7, lr}
 8004492:	b082      	sub	sp, #8
 8004494:	af00      	add	r7, sp, #0
 8004496:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 8004498:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800449c:	6878      	ldr	r0, [r7, #4]
 800449e:	f7ff ffdd 	bl	800445c <LL_InitTick>
}
 80044a2:	bf00      	nop
 80044a4:	3708      	adds	r7, #8
 80044a6:	46bd      	mov	sp, r7
 80044a8:	bd80      	pop	{r7, pc}
	...

080044ac <LL_mDelay>:
  *         will configure Systick to 1ms
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
 80044ac:	b480      	push	{r7}
 80044ae:	b085      	sub	sp, #20
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 80044b4:	4b0e      	ldr	r3, [pc, #56]	; (80044f0 <LL_mDelay+0x44>)
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	60fb      	str	r3, [r7, #12]
  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 80044ba:	68fb      	ldr	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if(Delay < LL_MAX_DELAY)
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80044c2:	d00c      	beq.n	80044de <LL_mDelay+0x32>
  {
    Delay++;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	3301      	adds	r3, #1
 80044c8:	607b      	str	r3, [r7, #4]
  }

  while (Delay)
 80044ca:	e008      	b.n	80044de <LL_mDelay+0x32>
  {
    if((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 80044cc:	4b08      	ldr	r3, [pc, #32]	; (80044f0 <LL_mDelay+0x44>)
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d002      	beq.n	80044de <LL_mDelay+0x32>
    {
      Delay--;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	3b01      	subs	r3, #1
 80044dc:	607b      	str	r3, [r7, #4]
  while (Delay)
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d1f3      	bne.n	80044cc <LL_mDelay+0x20>
    }
  }
}
 80044e4:	bf00      	nop
 80044e6:	3714      	adds	r7, #20
 80044e8:	46bd      	mov	sp, r7
 80044ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ee:	4770      	bx	lr
 80044f0:	e000e010 	.word	0xe000e010

080044f4 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 80044f4:	b480      	push	{r7}
 80044f6:	b083      	sub	sp, #12
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 80044fc:	4a04      	ldr	r2, [pc, #16]	; (8004510 <LL_SetSystemCoreClock+0x1c>)
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	6013      	str	r3, [r2, #0]
}
 8004502:	bf00      	nop
 8004504:	370c      	adds	r7, #12
 8004506:	46bd      	mov	sp, r7
 8004508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800450c:	4770      	bx	lr
 800450e:	bf00      	nop
 8004510:	20000000 	.word	0x20000000

08004514 <__errno>:
 8004514:	4b01      	ldr	r3, [pc, #4]	; (800451c <__errno+0x8>)
 8004516:	6818      	ldr	r0, [r3, #0]
 8004518:	4770      	bx	lr
 800451a:	bf00      	nop
 800451c:	20000004 	.word	0x20000004

08004520 <__libc_init_array>:
 8004520:	b570      	push	{r4, r5, r6, lr}
 8004522:	4e0d      	ldr	r6, [pc, #52]	; (8004558 <__libc_init_array+0x38>)
 8004524:	4c0d      	ldr	r4, [pc, #52]	; (800455c <__libc_init_array+0x3c>)
 8004526:	1ba4      	subs	r4, r4, r6
 8004528:	10a4      	asrs	r4, r4, #2
 800452a:	2500      	movs	r5, #0
 800452c:	42a5      	cmp	r5, r4
 800452e:	d109      	bne.n	8004544 <__libc_init_array+0x24>
 8004530:	4e0b      	ldr	r6, [pc, #44]	; (8004560 <__libc_init_array+0x40>)
 8004532:	4c0c      	ldr	r4, [pc, #48]	; (8004564 <__libc_init_array+0x44>)
 8004534:	f002 fc52 	bl	8006ddc <_init>
 8004538:	1ba4      	subs	r4, r4, r6
 800453a:	10a4      	asrs	r4, r4, #2
 800453c:	2500      	movs	r5, #0
 800453e:	42a5      	cmp	r5, r4
 8004540:	d105      	bne.n	800454e <__libc_init_array+0x2e>
 8004542:	bd70      	pop	{r4, r5, r6, pc}
 8004544:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004548:	4798      	blx	r3
 800454a:	3501      	adds	r5, #1
 800454c:	e7ee      	b.n	800452c <__libc_init_array+0xc>
 800454e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004552:	4798      	blx	r3
 8004554:	3501      	adds	r5, #1
 8004556:	e7f2      	b.n	800453e <__libc_init_array+0x1e>
 8004558:	080070f0 	.word	0x080070f0
 800455c:	080070f0 	.word	0x080070f0
 8004560:	080070f0 	.word	0x080070f0
 8004564:	080070f4 	.word	0x080070f4

08004568 <memset>:
 8004568:	4402      	add	r2, r0
 800456a:	4603      	mov	r3, r0
 800456c:	4293      	cmp	r3, r2
 800456e:	d100      	bne.n	8004572 <memset+0xa>
 8004570:	4770      	bx	lr
 8004572:	f803 1b01 	strb.w	r1, [r3], #1
 8004576:	e7f9      	b.n	800456c <memset+0x4>

08004578 <__cvt>:
 8004578:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800457c:	ec55 4b10 	vmov	r4, r5, d0
 8004580:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8004582:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8004586:	2d00      	cmp	r5, #0
 8004588:	460e      	mov	r6, r1
 800458a:	4691      	mov	r9, r2
 800458c:	4619      	mov	r1, r3
 800458e:	bfb8      	it	lt
 8004590:	4622      	movlt	r2, r4
 8004592:	462b      	mov	r3, r5
 8004594:	f027 0720 	bic.w	r7, r7, #32
 8004598:	bfbb      	ittet	lt
 800459a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800459e:	461d      	movlt	r5, r3
 80045a0:	2300      	movge	r3, #0
 80045a2:	232d      	movlt	r3, #45	; 0x2d
 80045a4:	bfb8      	it	lt
 80045a6:	4614      	movlt	r4, r2
 80045a8:	2f46      	cmp	r7, #70	; 0x46
 80045aa:	700b      	strb	r3, [r1, #0]
 80045ac:	d004      	beq.n	80045b8 <__cvt+0x40>
 80045ae:	2f45      	cmp	r7, #69	; 0x45
 80045b0:	d100      	bne.n	80045b4 <__cvt+0x3c>
 80045b2:	3601      	adds	r6, #1
 80045b4:	2102      	movs	r1, #2
 80045b6:	e000      	b.n	80045ba <__cvt+0x42>
 80045b8:	2103      	movs	r1, #3
 80045ba:	ab03      	add	r3, sp, #12
 80045bc:	9301      	str	r3, [sp, #4]
 80045be:	ab02      	add	r3, sp, #8
 80045c0:	9300      	str	r3, [sp, #0]
 80045c2:	4632      	mov	r2, r6
 80045c4:	4653      	mov	r3, sl
 80045c6:	ec45 4b10 	vmov	d0, r4, r5
 80045ca:	f000 fcd5 	bl	8004f78 <_dtoa_r>
 80045ce:	2f47      	cmp	r7, #71	; 0x47
 80045d0:	4680      	mov	r8, r0
 80045d2:	d102      	bne.n	80045da <__cvt+0x62>
 80045d4:	f019 0f01 	tst.w	r9, #1
 80045d8:	d026      	beq.n	8004628 <__cvt+0xb0>
 80045da:	2f46      	cmp	r7, #70	; 0x46
 80045dc:	eb08 0906 	add.w	r9, r8, r6
 80045e0:	d111      	bne.n	8004606 <__cvt+0x8e>
 80045e2:	f898 3000 	ldrb.w	r3, [r8]
 80045e6:	2b30      	cmp	r3, #48	; 0x30
 80045e8:	d10a      	bne.n	8004600 <__cvt+0x88>
 80045ea:	2200      	movs	r2, #0
 80045ec:	2300      	movs	r3, #0
 80045ee:	4620      	mov	r0, r4
 80045f0:	4629      	mov	r1, r5
 80045f2:	f7fc fa71 	bl	8000ad8 <__aeabi_dcmpeq>
 80045f6:	b918      	cbnz	r0, 8004600 <__cvt+0x88>
 80045f8:	f1c6 0601 	rsb	r6, r6, #1
 80045fc:	f8ca 6000 	str.w	r6, [sl]
 8004600:	f8da 3000 	ldr.w	r3, [sl]
 8004604:	4499      	add	r9, r3
 8004606:	2200      	movs	r2, #0
 8004608:	2300      	movs	r3, #0
 800460a:	4620      	mov	r0, r4
 800460c:	4629      	mov	r1, r5
 800460e:	f7fc fa63 	bl	8000ad8 <__aeabi_dcmpeq>
 8004612:	b938      	cbnz	r0, 8004624 <__cvt+0xac>
 8004614:	2230      	movs	r2, #48	; 0x30
 8004616:	9b03      	ldr	r3, [sp, #12]
 8004618:	454b      	cmp	r3, r9
 800461a:	d205      	bcs.n	8004628 <__cvt+0xb0>
 800461c:	1c59      	adds	r1, r3, #1
 800461e:	9103      	str	r1, [sp, #12]
 8004620:	701a      	strb	r2, [r3, #0]
 8004622:	e7f8      	b.n	8004616 <__cvt+0x9e>
 8004624:	f8cd 900c 	str.w	r9, [sp, #12]
 8004628:	9b03      	ldr	r3, [sp, #12]
 800462a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800462c:	eba3 0308 	sub.w	r3, r3, r8
 8004630:	4640      	mov	r0, r8
 8004632:	6013      	str	r3, [r2, #0]
 8004634:	b004      	add	sp, #16
 8004636:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800463a <__exponent>:
 800463a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800463c:	2900      	cmp	r1, #0
 800463e:	4604      	mov	r4, r0
 8004640:	bfba      	itte	lt
 8004642:	4249      	neglt	r1, r1
 8004644:	232d      	movlt	r3, #45	; 0x2d
 8004646:	232b      	movge	r3, #43	; 0x2b
 8004648:	2909      	cmp	r1, #9
 800464a:	f804 2b02 	strb.w	r2, [r4], #2
 800464e:	7043      	strb	r3, [r0, #1]
 8004650:	dd20      	ble.n	8004694 <__exponent+0x5a>
 8004652:	f10d 0307 	add.w	r3, sp, #7
 8004656:	461f      	mov	r7, r3
 8004658:	260a      	movs	r6, #10
 800465a:	fb91 f5f6 	sdiv	r5, r1, r6
 800465e:	fb06 1115 	mls	r1, r6, r5, r1
 8004662:	3130      	adds	r1, #48	; 0x30
 8004664:	2d09      	cmp	r5, #9
 8004666:	f803 1c01 	strb.w	r1, [r3, #-1]
 800466a:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
 800466e:	4629      	mov	r1, r5
 8004670:	dc09      	bgt.n	8004686 <__exponent+0x4c>
 8004672:	3130      	adds	r1, #48	; 0x30
 8004674:	3b02      	subs	r3, #2
 8004676:	f802 1c01 	strb.w	r1, [r2, #-1]
 800467a:	42bb      	cmp	r3, r7
 800467c:	4622      	mov	r2, r4
 800467e:	d304      	bcc.n	800468a <__exponent+0x50>
 8004680:	1a10      	subs	r0, r2, r0
 8004682:	b003      	add	sp, #12
 8004684:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004686:	4613      	mov	r3, r2
 8004688:	e7e7      	b.n	800465a <__exponent+0x20>
 800468a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800468e:	f804 2b01 	strb.w	r2, [r4], #1
 8004692:	e7f2      	b.n	800467a <__exponent+0x40>
 8004694:	2330      	movs	r3, #48	; 0x30
 8004696:	4419      	add	r1, r3
 8004698:	7083      	strb	r3, [r0, #2]
 800469a:	1d02      	adds	r2, r0, #4
 800469c:	70c1      	strb	r1, [r0, #3]
 800469e:	e7ef      	b.n	8004680 <__exponent+0x46>

080046a0 <_printf_float>:
 80046a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80046a4:	b08d      	sub	sp, #52	; 0x34
 80046a6:	460c      	mov	r4, r1
 80046a8:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 80046ac:	4616      	mov	r6, r2
 80046ae:	461f      	mov	r7, r3
 80046b0:	4605      	mov	r5, r0
 80046b2:	f001 fae3 	bl	8005c7c <_localeconv_r>
 80046b6:	6803      	ldr	r3, [r0, #0]
 80046b8:	9304      	str	r3, [sp, #16]
 80046ba:	4618      	mov	r0, r3
 80046bc:	f7fb fd90 	bl	80001e0 <strlen>
 80046c0:	2300      	movs	r3, #0
 80046c2:	930a      	str	r3, [sp, #40]	; 0x28
 80046c4:	f8d8 3000 	ldr.w	r3, [r8]
 80046c8:	9005      	str	r0, [sp, #20]
 80046ca:	3307      	adds	r3, #7
 80046cc:	f023 0307 	bic.w	r3, r3, #7
 80046d0:	f103 0208 	add.w	r2, r3, #8
 80046d4:	f894 a018 	ldrb.w	sl, [r4, #24]
 80046d8:	f8d4 b000 	ldr.w	fp, [r4]
 80046dc:	f8c8 2000 	str.w	r2, [r8]
 80046e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046e4:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80046e8:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80046ec:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80046f0:	9307      	str	r3, [sp, #28]
 80046f2:	f8cd 8018 	str.w	r8, [sp, #24]
 80046f6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80046fa:	4ba7      	ldr	r3, [pc, #668]	; (8004998 <_printf_float+0x2f8>)
 80046fc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004700:	f7fc fa1c 	bl	8000b3c <__aeabi_dcmpun>
 8004704:	bb70      	cbnz	r0, 8004764 <_printf_float+0xc4>
 8004706:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800470a:	4ba3      	ldr	r3, [pc, #652]	; (8004998 <_printf_float+0x2f8>)
 800470c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004710:	f7fc f9f6 	bl	8000b00 <__aeabi_dcmple>
 8004714:	bb30      	cbnz	r0, 8004764 <_printf_float+0xc4>
 8004716:	2200      	movs	r2, #0
 8004718:	2300      	movs	r3, #0
 800471a:	4640      	mov	r0, r8
 800471c:	4649      	mov	r1, r9
 800471e:	f7fc f9e5 	bl	8000aec <__aeabi_dcmplt>
 8004722:	b110      	cbz	r0, 800472a <_printf_float+0x8a>
 8004724:	232d      	movs	r3, #45	; 0x2d
 8004726:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800472a:	4a9c      	ldr	r2, [pc, #624]	; (800499c <_printf_float+0x2fc>)
 800472c:	4b9c      	ldr	r3, [pc, #624]	; (80049a0 <_printf_float+0x300>)
 800472e:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8004732:	bf8c      	ite	hi
 8004734:	4690      	movhi	r8, r2
 8004736:	4698      	movls	r8, r3
 8004738:	2303      	movs	r3, #3
 800473a:	f02b 0204 	bic.w	r2, fp, #4
 800473e:	6123      	str	r3, [r4, #16]
 8004740:	6022      	str	r2, [r4, #0]
 8004742:	f04f 0900 	mov.w	r9, #0
 8004746:	9700      	str	r7, [sp, #0]
 8004748:	4633      	mov	r3, r6
 800474a:	aa0b      	add	r2, sp, #44	; 0x2c
 800474c:	4621      	mov	r1, r4
 800474e:	4628      	mov	r0, r5
 8004750:	f000 f9e6 	bl	8004b20 <_printf_common>
 8004754:	3001      	adds	r0, #1
 8004756:	f040 808d 	bne.w	8004874 <_printf_float+0x1d4>
 800475a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800475e:	b00d      	add	sp, #52	; 0x34
 8004760:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004764:	4642      	mov	r2, r8
 8004766:	464b      	mov	r3, r9
 8004768:	4640      	mov	r0, r8
 800476a:	4649      	mov	r1, r9
 800476c:	f7fc f9e6 	bl	8000b3c <__aeabi_dcmpun>
 8004770:	b110      	cbz	r0, 8004778 <_printf_float+0xd8>
 8004772:	4a8c      	ldr	r2, [pc, #560]	; (80049a4 <_printf_float+0x304>)
 8004774:	4b8c      	ldr	r3, [pc, #560]	; (80049a8 <_printf_float+0x308>)
 8004776:	e7da      	b.n	800472e <_printf_float+0x8e>
 8004778:	6861      	ldr	r1, [r4, #4]
 800477a:	1c4b      	adds	r3, r1, #1
 800477c:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8004780:	a80a      	add	r0, sp, #40	; 0x28
 8004782:	d13e      	bne.n	8004802 <_printf_float+0x162>
 8004784:	2306      	movs	r3, #6
 8004786:	6063      	str	r3, [r4, #4]
 8004788:	2300      	movs	r3, #0
 800478a:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800478e:	ab09      	add	r3, sp, #36	; 0x24
 8004790:	9300      	str	r3, [sp, #0]
 8004792:	ec49 8b10 	vmov	d0, r8, r9
 8004796:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800479a:	6022      	str	r2, [r4, #0]
 800479c:	f8cd a004 	str.w	sl, [sp, #4]
 80047a0:	6861      	ldr	r1, [r4, #4]
 80047a2:	4628      	mov	r0, r5
 80047a4:	f7ff fee8 	bl	8004578 <__cvt>
 80047a8:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 80047ac:	2b47      	cmp	r3, #71	; 0x47
 80047ae:	4680      	mov	r8, r0
 80047b0:	d109      	bne.n	80047c6 <_printf_float+0x126>
 80047b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80047b4:	1cd8      	adds	r0, r3, #3
 80047b6:	db02      	blt.n	80047be <_printf_float+0x11e>
 80047b8:	6862      	ldr	r2, [r4, #4]
 80047ba:	4293      	cmp	r3, r2
 80047bc:	dd47      	ble.n	800484e <_printf_float+0x1ae>
 80047be:	f1aa 0a02 	sub.w	sl, sl, #2
 80047c2:	fa5f fa8a 	uxtb.w	sl, sl
 80047c6:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 80047ca:	9909      	ldr	r1, [sp, #36]	; 0x24
 80047cc:	d824      	bhi.n	8004818 <_printf_float+0x178>
 80047ce:	3901      	subs	r1, #1
 80047d0:	4652      	mov	r2, sl
 80047d2:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80047d6:	9109      	str	r1, [sp, #36]	; 0x24
 80047d8:	f7ff ff2f 	bl	800463a <__exponent>
 80047dc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80047de:	1813      	adds	r3, r2, r0
 80047e0:	2a01      	cmp	r2, #1
 80047e2:	4681      	mov	r9, r0
 80047e4:	6123      	str	r3, [r4, #16]
 80047e6:	dc02      	bgt.n	80047ee <_printf_float+0x14e>
 80047e8:	6822      	ldr	r2, [r4, #0]
 80047ea:	07d1      	lsls	r1, r2, #31
 80047ec:	d501      	bpl.n	80047f2 <_printf_float+0x152>
 80047ee:	3301      	adds	r3, #1
 80047f0:	6123      	str	r3, [r4, #16]
 80047f2:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d0a5      	beq.n	8004746 <_printf_float+0xa6>
 80047fa:	232d      	movs	r3, #45	; 0x2d
 80047fc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004800:	e7a1      	b.n	8004746 <_printf_float+0xa6>
 8004802:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8004806:	f000 8177 	beq.w	8004af8 <_printf_float+0x458>
 800480a:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800480e:	d1bb      	bne.n	8004788 <_printf_float+0xe8>
 8004810:	2900      	cmp	r1, #0
 8004812:	d1b9      	bne.n	8004788 <_printf_float+0xe8>
 8004814:	2301      	movs	r3, #1
 8004816:	e7b6      	b.n	8004786 <_printf_float+0xe6>
 8004818:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 800481c:	d119      	bne.n	8004852 <_printf_float+0x1b2>
 800481e:	2900      	cmp	r1, #0
 8004820:	6863      	ldr	r3, [r4, #4]
 8004822:	dd0c      	ble.n	800483e <_printf_float+0x19e>
 8004824:	6121      	str	r1, [r4, #16]
 8004826:	b913      	cbnz	r3, 800482e <_printf_float+0x18e>
 8004828:	6822      	ldr	r2, [r4, #0]
 800482a:	07d2      	lsls	r2, r2, #31
 800482c:	d502      	bpl.n	8004834 <_printf_float+0x194>
 800482e:	3301      	adds	r3, #1
 8004830:	440b      	add	r3, r1
 8004832:	6123      	str	r3, [r4, #16]
 8004834:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004836:	65a3      	str	r3, [r4, #88]	; 0x58
 8004838:	f04f 0900 	mov.w	r9, #0
 800483c:	e7d9      	b.n	80047f2 <_printf_float+0x152>
 800483e:	b913      	cbnz	r3, 8004846 <_printf_float+0x1a6>
 8004840:	6822      	ldr	r2, [r4, #0]
 8004842:	07d0      	lsls	r0, r2, #31
 8004844:	d501      	bpl.n	800484a <_printf_float+0x1aa>
 8004846:	3302      	adds	r3, #2
 8004848:	e7f3      	b.n	8004832 <_printf_float+0x192>
 800484a:	2301      	movs	r3, #1
 800484c:	e7f1      	b.n	8004832 <_printf_float+0x192>
 800484e:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8004852:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8004856:	4293      	cmp	r3, r2
 8004858:	db05      	blt.n	8004866 <_printf_float+0x1c6>
 800485a:	6822      	ldr	r2, [r4, #0]
 800485c:	6123      	str	r3, [r4, #16]
 800485e:	07d1      	lsls	r1, r2, #31
 8004860:	d5e8      	bpl.n	8004834 <_printf_float+0x194>
 8004862:	3301      	adds	r3, #1
 8004864:	e7e5      	b.n	8004832 <_printf_float+0x192>
 8004866:	2b00      	cmp	r3, #0
 8004868:	bfd4      	ite	le
 800486a:	f1c3 0302 	rsble	r3, r3, #2
 800486e:	2301      	movgt	r3, #1
 8004870:	4413      	add	r3, r2
 8004872:	e7de      	b.n	8004832 <_printf_float+0x192>
 8004874:	6823      	ldr	r3, [r4, #0]
 8004876:	055a      	lsls	r2, r3, #21
 8004878:	d407      	bmi.n	800488a <_printf_float+0x1ea>
 800487a:	6923      	ldr	r3, [r4, #16]
 800487c:	4642      	mov	r2, r8
 800487e:	4631      	mov	r1, r6
 8004880:	4628      	mov	r0, r5
 8004882:	47b8      	blx	r7
 8004884:	3001      	adds	r0, #1
 8004886:	d12b      	bne.n	80048e0 <_printf_float+0x240>
 8004888:	e767      	b.n	800475a <_printf_float+0xba>
 800488a:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800488e:	f240 80dc 	bls.w	8004a4a <_printf_float+0x3aa>
 8004892:	2200      	movs	r2, #0
 8004894:	2300      	movs	r3, #0
 8004896:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800489a:	f7fc f91d 	bl	8000ad8 <__aeabi_dcmpeq>
 800489e:	2800      	cmp	r0, #0
 80048a0:	d033      	beq.n	800490a <_printf_float+0x26a>
 80048a2:	2301      	movs	r3, #1
 80048a4:	4a41      	ldr	r2, [pc, #260]	; (80049ac <_printf_float+0x30c>)
 80048a6:	4631      	mov	r1, r6
 80048a8:	4628      	mov	r0, r5
 80048aa:	47b8      	blx	r7
 80048ac:	3001      	adds	r0, #1
 80048ae:	f43f af54 	beq.w	800475a <_printf_float+0xba>
 80048b2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80048b6:	429a      	cmp	r2, r3
 80048b8:	db02      	blt.n	80048c0 <_printf_float+0x220>
 80048ba:	6823      	ldr	r3, [r4, #0]
 80048bc:	07d8      	lsls	r0, r3, #31
 80048be:	d50f      	bpl.n	80048e0 <_printf_float+0x240>
 80048c0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80048c4:	4631      	mov	r1, r6
 80048c6:	4628      	mov	r0, r5
 80048c8:	47b8      	blx	r7
 80048ca:	3001      	adds	r0, #1
 80048cc:	f43f af45 	beq.w	800475a <_printf_float+0xba>
 80048d0:	f04f 0800 	mov.w	r8, #0
 80048d4:	f104 091a 	add.w	r9, r4, #26
 80048d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80048da:	3b01      	subs	r3, #1
 80048dc:	4543      	cmp	r3, r8
 80048de:	dc09      	bgt.n	80048f4 <_printf_float+0x254>
 80048e0:	6823      	ldr	r3, [r4, #0]
 80048e2:	079b      	lsls	r3, r3, #30
 80048e4:	f100 8103 	bmi.w	8004aee <_printf_float+0x44e>
 80048e8:	68e0      	ldr	r0, [r4, #12]
 80048ea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80048ec:	4298      	cmp	r0, r3
 80048ee:	bfb8      	it	lt
 80048f0:	4618      	movlt	r0, r3
 80048f2:	e734      	b.n	800475e <_printf_float+0xbe>
 80048f4:	2301      	movs	r3, #1
 80048f6:	464a      	mov	r2, r9
 80048f8:	4631      	mov	r1, r6
 80048fa:	4628      	mov	r0, r5
 80048fc:	47b8      	blx	r7
 80048fe:	3001      	adds	r0, #1
 8004900:	f43f af2b 	beq.w	800475a <_printf_float+0xba>
 8004904:	f108 0801 	add.w	r8, r8, #1
 8004908:	e7e6      	b.n	80048d8 <_printf_float+0x238>
 800490a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800490c:	2b00      	cmp	r3, #0
 800490e:	dc2b      	bgt.n	8004968 <_printf_float+0x2c8>
 8004910:	2301      	movs	r3, #1
 8004912:	4a26      	ldr	r2, [pc, #152]	; (80049ac <_printf_float+0x30c>)
 8004914:	4631      	mov	r1, r6
 8004916:	4628      	mov	r0, r5
 8004918:	47b8      	blx	r7
 800491a:	3001      	adds	r0, #1
 800491c:	f43f af1d 	beq.w	800475a <_printf_float+0xba>
 8004920:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004922:	b923      	cbnz	r3, 800492e <_printf_float+0x28e>
 8004924:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004926:	b913      	cbnz	r3, 800492e <_printf_float+0x28e>
 8004928:	6823      	ldr	r3, [r4, #0]
 800492a:	07d9      	lsls	r1, r3, #31
 800492c:	d5d8      	bpl.n	80048e0 <_printf_float+0x240>
 800492e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004932:	4631      	mov	r1, r6
 8004934:	4628      	mov	r0, r5
 8004936:	47b8      	blx	r7
 8004938:	3001      	adds	r0, #1
 800493a:	f43f af0e 	beq.w	800475a <_printf_float+0xba>
 800493e:	f04f 0900 	mov.w	r9, #0
 8004942:	f104 0a1a 	add.w	sl, r4, #26
 8004946:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004948:	425b      	negs	r3, r3
 800494a:	454b      	cmp	r3, r9
 800494c:	dc01      	bgt.n	8004952 <_printf_float+0x2b2>
 800494e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004950:	e794      	b.n	800487c <_printf_float+0x1dc>
 8004952:	2301      	movs	r3, #1
 8004954:	4652      	mov	r2, sl
 8004956:	4631      	mov	r1, r6
 8004958:	4628      	mov	r0, r5
 800495a:	47b8      	blx	r7
 800495c:	3001      	adds	r0, #1
 800495e:	f43f aefc 	beq.w	800475a <_printf_float+0xba>
 8004962:	f109 0901 	add.w	r9, r9, #1
 8004966:	e7ee      	b.n	8004946 <_printf_float+0x2a6>
 8004968:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800496a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800496c:	429a      	cmp	r2, r3
 800496e:	bfa8      	it	ge
 8004970:	461a      	movge	r2, r3
 8004972:	2a00      	cmp	r2, #0
 8004974:	4691      	mov	r9, r2
 8004976:	dd07      	ble.n	8004988 <_printf_float+0x2e8>
 8004978:	4613      	mov	r3, r2
 800497a:	4631      	mov	r1, r6
 800497c:	4642      	mov	r2, r8
 800497e:	4628      	mov	r0, r5
 8004980:	47b8      	blx	r7
 8004982:	3001      	adds	r0, #1
 8004984:	f43f aee9 	beq.w	800475a <_printf_float+0xba>
 8004988:	f104 031a 	add.w	r3, r4, #26
 800498c:	f04f 0b00 	mov.w	fp, #0
 8004990:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004994:	9306      	str	r3, [sp, #24]
 8004996:	e015      	b.n	80049c4 <_printf_float+0x324>
 8004998:	7fefffff 	.word	0x7fefffff
 800499c:	08006e28 	.word	0x08006e28
 80049a0:	08006e24 	.word	0x08006e24
 80049a4:	08006e30 	.word	0x08006e30
 80049a8:	08006e2c 	.word	0x08006e2c
 80049ac:	08006e34 	.word	0x08006e34
 80049b0:	2301      	movs	r3, #1
 80049b2:	9a06      	ldr	r2, [sp, #24]
 80049b4:	4631      	mov	r1, r6
 80049b6:	4628      	mov	r0, r5
 80049b8:	47b8      	blx	r7
 80049ba:	3001      	adds	r0, #1
 80049bc:	f43f aecd 	beq.w	800475a <_printf_float+0xba>
 80049c0:	f10b 0b01 	add.w	fp, fp, #1
 80049c4:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80049c8:	ebaa 0309 	sub.w	r3, sl, r9
 80049cc:	455b      	cmp	r3, fp
 80049ce:	dcef      	bgt.n	80049b0 <_printf_float+0x310>
 80049d0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80049d4:	429a      	cmp	r2, r3
 80049d6:	44d0      	add	r8, sl
 80049d8:	db15      	blt.n	8004a06 <_printf_float+0x366>
 80049da:	6823      	ldr	r3, [r4, #0]
 80049dc:	07da      	lsls	r2, r3, #31
 80049de:	d412      	bmi.n	8004a06 <_printf_float+0x366>
 80049e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80049e2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80049e4:	eba3 020a 	sub.w	r2, r3, sl
 80049e8:	eba3 0a01 	sub.w	sl, r3, r1
 80049ec:	4592      	cmp	sl, r2
 80049ee:	bfa8      	it	ge
 80049f0:	4692      	movge	sl, r2
 80049f2:	f1ba 0f00 	cmp.w	sl, #0
 80049f6:	dc0e      	bgt.n	8004a16 <_printf_float+0x376>
 80049f8:	f04f 0800 	mov.w	r8, #0
 80049fc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8004a00:	f104 091a 	add.w	r9, r4, #26
 8004a04:	e019      	b.n	8004a3a <_printf_float+0x39a>
 8004a06:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004a0a:	4631      	mov	r1, r6
 8004a0c:	4628      	mov	r0, r5
 8004a0e:	47b8      	blx	r7
 8004a10:	3001      	adds	r0, #1
 8004a12:	d1e5      	bne.n	80049e0 <_printf_float+0x340>
 8004a14:	e6a1      	b.n	800475a <_printf_float+0xba>
 8004a16:	4653      	mov	r3, sl
 8004a18:	4642      	mov	r2, r8
 8004a1a:	4631      	mov	r1, r6
 8004a1c:	4628      	mov	r0, r5
 8004a1e:	47b8      	blx	r7
 8004a20:	3001      	adds	r0, #1
 8004a22:	d1e9      	bne.n	80049f8 <_printf_float+0x358>
 8004a24:	e699      	b.n	800475a <_printf_float+0xba>
 8004a26:	2301      	movs	r3, #1
 8004a28:	464a      	mov	r2, r9
 8004a2a:	4631      	mov	r1, r6
 8004a2c:	4628      	mov	r0, r5
 8004a2e:	47b8      	blx	r7
 8004a30:	3001      	adds	r0, #1
 8004a32:	f43f ae92 	beq.w	800475a <_printf_float+0xba>
 8004a36:	f108 0801 	add.w	r8, r8, #1
 8004a3a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004a3e:	1a9b      	subs	r3, r3, r2
 8004a40:	eba3 030a 	sub.w	r3, r3, sl
 8004a44:	4543      	cmp	r3, r8
 8004a46:	dcee      	bgt.n	8004a26 <_printf_float+0x386>
 8004a48:	e74a      	b.n	80048e0 <_printf_float+0x240>
 8004a4a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004a4c:	2a01      	cmp	r2, #1
 8004a4e:	dc01      	bgt.n	8004a54 <_printf_float+0x3b4>
 8004a50:	07db      	lsls	r3, r3, #31
 8004a52:	d53a      	bpl.n	8004aca <_printf_float+0x42a>
 8004a54:	2301      	movs	r3, #1
 8004a56:	4642      	mov	r2, r8
 8004a58:	4631      	mov	r1, r6
 8004a5a:	4628      	mov	r0, r5
 8004a5c:	47b8      	blx	r7
 8004a5e:	3001      	adds	r0, #1
 8004a60:	f43f ae7b 	beq.w	800475a <_printf_float+0xba>
 8004a64:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004a68:	4631      	mov	r1, r6
 8004a6a:	4628      	mov	r0, r5
 8004a6c:	47b8      	blx	r7
 8004a6e:	3001      	adds	r0, #1
 8004a70:	f108 0801 	add.w	r8, r8, #1
 8004a74:	f43f ae71 	beq.w	800475a <_printf_float+0xba>
 8004a78:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004a7a:	2200      	movs	r2, #0
 8004a7c:	f103 3aff 	add.w	sl, r3, #4294967295	; 0xffffffff
 8004a80:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004a84:	2300      	movs	r3, #0
 8004a86:	f7fc f827 	bl	8000ad8 <__aeabi_dcmpeq>
 8004a8a:	b9c8      	cbnz	r0, 8004ac0 <_printf_float+0x420>
 8004a8c:	4653      	mov	r3, sl
 8004a8e:	4642      	mov	r2, r8
 8004a90:	4631      	mov	r1, r6
 8004a92:	4628      	mov	r0, r5
 8004a94:	47b8      	blx	r7
 8004a96:	3001      	adds	r0, #1
 8004a98:	d10e      	bne.n	8004ab8 <_printf_float+0x418>
 8004a9a:	e65e      	b.n	800475a <_printf_float+0xba>
 8004a9c:	2301      	movs	r3, #1
 8004a9e:	4652      	mov	r2, sl
 8004aa0:	4631      	mov	r1, r6
 8004aa2:	4628      	mov	r0, r5
 8004aa4:	47b8      	blx	r7
 8004aa6:	3001      	adds	r0, #1
 8004aa8:	f43f ae57 	beq.w	800475a <_printf_float+0xba>
 8004aac:	f108 0801 	add.w	r8, r8, #1
 8004ab0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004ab2:	3b01      	subs	r3, #1
 8004ab4:	4543      	cmp	r3, r8
 8004ab6:	dcf1      	bgt.n	8004a9c <_printf_float+0x3fc>
 8004ab8:	464b      	mov	r3, r9
 8004aba:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004abe:	e6de      	b.n	800487e <_printf_float+0x1de>
 8004ac0:	f04f 0800 	mov.w	r8, #0
 8004ac4:	f104 0a1a 	add.w	sl, r4, #26
 8004ac8:	e7f2      	b.n	8004ab0 <_printf_float+0x410>
 8004aca:	2301      	movs	r3, #1
 8004acc:	e7df      	b.n	8004a8e <_printf_float+0x3ee>
 8004ace:	2301      	movs	r3, #1
 8004ad0:	464a      	mov	r2, r9
 8004ad2:	4631      	mov	r1, r6
 8004ad4:	4628      	mov	r0, r5
 8004ad6:	47b8      	blx	r7
 8004ad8:	3001      	adds	r0, #1
 8004ada:	f43f ae3e 	beq.w	800475a <_printf_float+0xba>
 8004ade:	f108 0801 	add.w	r8, r8, #1
 8004ae2:	68e3      	ldr	r3, [r4, #12]
 8004ae4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004ae6:	1a9b      	subs	r3, r3, r2
 8004ae8:	4543      	cmp	r3, r8
 8004aea:	dcf0      	bgt.n	8004ace <_printf_float+0x42e>
 8004aec:	e6fc      	b.n	80048e8 <_printf_float+0x248>
 8004aee:	f04f 0800 	mov.w	r8, #0
 8004af2:	f104 0919 	add.w	r9, r4, #25
 8004af6:	e7f4      	b.n	8004ae2 <_printf_float+0x442>
 8004af8:	2900      	cmp	r1, #0
 8004afa:	f43f ae8b 	beq.w	8004814 <_printf_float+0x174>
 8004afe:	2300      	movs	r3, #0
 8004b00:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8004b04:	ab09      	add	r3, sp, #36	; 0x24
 8004b06:	9300      	str	r3, [sp, #0]
 8004b08:	ec49 8b10 	vmov	d0, r8, r9
 8004b0c:	6022      	str	r2, [r4, #0]
 8004b0e:	f8cd a004 	str.w	sl, [sp, #4]
 8004b12:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8004b16:	4628      	mov	r0, r5
 8004b18:	f7ff fd2e 	bl	8004578 <__cvt>
 8004b1c:	4680      	mov	r8, r0
 8004b1e:	e648      	b.n	80047b2 <_printf_float+0x112>

08004b20 <_printf_common>:
 8004b20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004b24:	4691      	mov	r9, r2
 8004b26:	461f      	mov	r7, r3
 8004b28:	688a      	ldr	r2, [r1, #8]
 8004b2a:	690b      	ldr	r3, [r1, #16]
 8004b2c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004b30:	4293      	cmp	r3, r2
 8004b32:	bfb8      	it	lt
 8004b34:	4613      	movlt	r3, r2
 8004b36:	f8c9 3000 	str.w	r3, [r9]
 8004b3a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004b3e:	4606      	mov	r6, r0
 8004b40:	460c      	mov	r4, r1
 8004b42:	b112      	cbz	r2, 8004b4a <_printf_common+0x2a>
 8004b44:	3301      	adds	r3, #1
 8004b46:	f8c9 3000 	str.w	r3, [r9]
 8004b4a:	6823      	ldr	r3, [r4, #0]
 8004b4c:	0699      	lsls	r1, r3, #26
 8004b4e:	bf42      	ittt	mi
 8004b50:	f8d9 3000 	ldrmi.w	r3, [r9]
 8004b54:	3302      	addmi	r3, #2
 8004b56:	f8c9 3000 	strmi.w	r3, [r9]
 8004b5a:	6825      	ldr	r5, [r4, #0]
 8004b5c:	f015 0506 	ands.w	r5, r5, #6
 8004b60:	d107      	bne.n	8004b72 <_printf_common+0x52>
 8004b62:	f104 0a19 	add.w	sl, r4, #25
 8004b66:	68e3      	ldr	r3, [r4, #12]
 8004b68:	f8d9 2000 	ldr.w	r2, [r9]
 8004b6c:	1a9b      	subs	r3, r3, r2
 8004b6e:	42ab      	cmp	r3, r5
 8004b70:	dc28      	bgt.n	8004bc4 <_printf_common+0xa4>
 8004b72:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8004b76:	6822      	ldr	r2, [r4, #0]
 8004b78:	3300      	adds	r3, #0
 8004b7a:	bf18      	it	ne
 8004b7c:	2301      	movne	r3, #1
 8004b7e:	0692      	lsls	r2, r2, #26
 8004b80:	d42d      	bmi.n	8004bde <_printf_common+0xbe>
 8004b82:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004b86:	4639      	mov	r1, r7
 8004b88:	4630      	mov	r0, r6
 8004b8a:	47c0      	blx	r8
 8004b8c:	3001      	adds	r0, #1
 8004b8e:	d020      	beq.n	8004bd2 <_printf_common+0xb2>
 8004b90:	6823      	ldr	r3, [r4, #0]
 8004b92:	68e5      	ldr	r5, [r4, #12]
 8004b94:	f8d9 2000 	ldr.w	r2, [r9]
 8004b98:	f003 0306 	and.w	r3, r3, #6
 8004b9c:	2b04      	cmp	r3, #4
 8004b9e:	bf08      	it	eq
 8004ba0:	1aad      	subeq	r5, r5, r2
 8004ba2:	68a3      	ldr	r3, [r4, #8]
 8004ba4:	6922      	ldr	r2, [r4, #16]
 8004ba6:	bf0c      	ite	eq
 8004ba8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004bac:	2500      	movne	r5, #0
 8004bae:	4293      	cmp	r3, r2
 8004bb0:	bfc4      	itt	gt
 8004bb2:	1a9b      	subgt	r3, r3, r2
 8004bb4:	18ed      	addgt	r5, r5, r3
 8004bb6:	f04f 0900 	mov.w	r9, #0
 8004bba:	341a      	adds	r4, #26
 8004bbc:	454d      	cmp	r5, r9
 8004bbe:	d11a      	bne.n	8004bf6 <_printf_common+0xd6>
 8004bc0:	2000      	movs	r0, #0
 8004bc2:	e008      	b.n	8004bd6 <_printf_common+0xb6>
 8004bc4:	2301      	movs	r3, #1
 8004bc6:	4652      	mov	r2, sl
 8004bc8:	4639      	mov	r1, r7
 8004bca:	4630      	mov	r0, r6
 8004bcc:	47c0      	blx	r8
 8004bce:	3001      	adds	r0, #1
 8004bd0:	d103      	bne.n	8004bda <_printf_common+0xba>
 8004bd2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004bd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004bda:	3501      	adds	r5, #1
 8004bdc:	e7c3      	b.n	8004b66 <_printf_common+0x46>
 8004bde:	18e1      	adds	r1, r4, r3
 8004be0:	1c5a      	adds	r2, r3, #1
 8004be2:	2030      	movs	r0, #48	; 0x30
 8004be4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004be8:	4422      	add	r2, r4
 8004bea:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004bee:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004bf2:	3302      	adds	r3, #2
 8004bf4:	e7c5      	b.n	8004b82 <_printf_common+0x62>
 8004bf6:	2301      	movs	r3, #1
 8004bf8:	4622      	mov	r2, r4
 8004bfa:	4639      	mov	r1, r7
 8004bfc:	4630      	mov	r0, r6
 8004bfe:	47c0      	blx	r8
 8004c00:	3001      	adds	r0, #1
 8004c02:	d0e6      	beq.n	8004bd2 <_printf_common+0xb2>
 8004c04:	f109 0901 	add.w	r9, r9, #1
 8004c08:	e7d8      	b.n	8004bbc <_printf_common+0x9c>
	...

08004c0c <_printf_i>:
 8004c0c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004c10:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8004c14:	460c      	mov	r4, r1
 8004c16:	7e09      	ldrb	r1, [r1, #24]
 8004c18:	b085      	sub	sp, #20
 8004c1a:	296e      	cmp	r1, #110	; 0x6e
 8004c1c:	4617      	mov	r7, r2
 8004c1e:	4606      	mov	r6, r0
 8004c20:	4698      	mov	r8, r3
 8004c22:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004c24:	f000 80b3 	beq.w	8004d8e <_printf_i+0x182>
 8004c28:	d822      	bhi.n	8004c70 <_printf_i+0x64>
 8004c2a:	2963      	cmp	r1, #99	; 0x63
 8004c2c:	d036      	beq.n	8004c9c <_printf_i+0x90>
 8004c2e:	d80a      	bhi.n	8004c46 <_printf_i+0x3a>
 8004c30:	2900      	cmp	r1, #0
 8004c32:	f000 80b9 	beq.w	8004da8 <_printf_i+0x19c>
 8004c36:	2958      	cmp	r1, #88	; 0x58
 8004c38:	f000 8083 	beq.w	8004d42 <_printf_i+0x136>
 8004c3c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004c40:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8004c44:	e032      	b.n	8004cac <_printf_i+0xa0>
 8004c46:	2964      	cmp	r1, #100	; 0x64
 8004c48:	d001      	beq.n	8004c4e <_printf_i+0x42>
 8004c4a:	2969      	cmp	r1, #105	; 0x69
 8004c4c:	d1f6      	bne.n	8004c3c <_printf_i+0x30>
 8004c4e:	6820      	ldr	r0, [r4, #0]
 8004c50:	6813      	ldr	r3, [r2, #0]
 8004c52:	0605      	lsls	r5, r0, #24
 8004c54:	f103 0104 	add.w	r1, r3, #4
 8004c58:	d52a      	bpl.n	8004cb0 <_printf_i+0xa4>
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	6011      	str	r1, [r2, #0]
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	da03      	bge.n	8004c6a <_printf_i+0x5e>
 8004c62:	222d      	movs	r2, #45	; 0x2d
 8004c64:	425b      	negs	r3, r3
 8004c66:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8004c6a:	486f      	ldr	r0, [pc, #444]	; (8004e28 <_printf_i+0x21c>)
 8004c6c:	220a      	movs	r2, #10
 8004c6e:	e039      	b.n	8004ce4 <_printf_i+0xd8>
 8004c70:	2973      	cmp	r1, #115	; 0x73
 8004c72:	f000 809d 	beq.w	8004db0 <_printf_i+0x1a4>
 8004c76:	d808      	bhi.n	8004c8a <_printf_i+0x7e>
 8004c78:	296f      	cmp	r1, #111	; 0x6f
 8004c7a:	d020      	beq.n	8004cbe <_printf_i+0xb2>
 8004c7c:	2970      	cmp	r1, #112	; 0x70
 8004c7e:	d1dd      	bne.n	8004c3c <_printf_i+0x30>
 8004c80:	6823      	ldr	r3, [r4, #0]
 8004c82:	f043 0320 	orr.w	r3, r3, #32
 8004c86:	6023      	str	r3, [r4, #0]
 8004c88:	e003      	b.n	8004c92 <_printf_i+0x86>
 8004c8a:	2975      	cmp	r1, #117	; 0x75
 8004c8c:	d017      	beq.n	8004cbe <_printf_i+0xb2>
 8004c8e:	2978      	cmp	r1, #120	; 0x78
 8004c90:	d1d4      	bne.n	8004c3c <_printf_i+0x30>
 8004c92:	2378      	movs	r3, #120	; 0x78
 8004c94:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004c98:	4864      	ldr	r0, [pc, #400]	; (8004e2c <_printf_i+0x220>)
 8004c9a:	e055      	b.n	8004d48 <_printf_i+0x13c>
 8004c9c:	6813      	ldr	r3, [r2, #0]
 8004c9e:	1d19      	adds	r1, r3, #4
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	6011      	str	r1, [r2, #0]
 8004ca4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004ca8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004cac:	2301      	movs	r3, #1
 8004cae:	e08c      	b.n	8004dca <_printf_i+0x1be>
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	6011      	str	r1, [r2, #0]
 8004cb4:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004cb8:	bf18      	it	ne
 8004cba:	b21b      	sxthne	r3, r3
 8004cbc:	e7cf      	b.n	8004c5e <_printf_i+0x52>
 8004cbe:	6813      	ldr	r3, [r2, #0]
 8004cc0:	6825      	ldr	r5, [r4, #0]
 8004cc2:	1d18      	adds	r0, r3, #4
 8004cc4:	6010      	str	r0, [r2, #0]
 8004cc6:	0628      	lsls	r0, r5, #24
 8004cc8:	d501      	bpl.n	8004cce <_printf_i+0xc2>
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	e002      	b.n	8004cd4 <_printf_i+0xc8>
 8004cce:	0668      	lsls	r0, r5, #25
 8004cd0:	d5fb      	bpl.n	8004cca <_printf_i+0xbe>
 8004cd2:	881b      	ldrh	r3, [r3, #0]
 8004cd4:	4854      	ldr	r0, [pc, #336]	; (8004e28 <_printf_i+0x21c>)
 8004cd6:	296f      	cmp	r1, #111	; 0x6f
 8004cd8:	bf14      	ite	ne
 8004cda:	220a      	movne	r2, #10
 8004cdc:	2208      	moveq	r2, #8
 8004cde:	2100      	movs	r1, #0
 8004ce0:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004ce4:	6865      	ldr	r5, [r4, #4]
 8004ce6:	60a5      	str	r5, [r4, #8]
 8004ce8:	2d00      	cmp	r5, #0
 8004cea:	f2c0 8095 	blt.w	8004e18 <_printf_i+0x20c>
 8004cee:	6821      	ldr	r1, [r4, #0]
 8004cf0:	f021 0104 	bic.w	r1, r1, #4
 8004cf4:	6021      	str	r1, [r4, #0]
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d13d      	bne.n	8004d76 <_printf_i+0x16a>
 8004cfa:	2d00      	cmp	r5, #0
 8004cfc:	f040 808e 	bne.w	8004e1c <_printf_i+0x210>
 8004d00:	4665      	mov	r5, ip
 8004d02:	2a08      	cmp	r2, #8
 8004d04:	d10b      	bne.n	8004d1e <_printf_i+0x112>
 8004d06:	6823      	ldr	r3, [r4, #0]
 8004d08:	07db      	lsls	r3, r3, #31
 8004d0a:	d508      	bpl.n	8004d1e <_printf_i+0x112>
 8004d0c:	6923      	ldr	r3, [r4, #16]
 8004d0e:	6862      	ldr	r2, [r4, #4]
 8004d10:	429a      	cmp	r2, r3
 8004d12:	bfde      	ittt	le
 8004d14:	2330      	movle	r3, #48	; 0x30
 8004d16:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004d1a:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8004d1e:	ebac 0305 	sub.w	r3, ip, r5
 8004d22:	6123      	str	r3, [r4, #16]
 8004d24:	f8cd 8000 	str.w	r8, [sp]
 8004d28:	463b      	mov	r3, r7
 8004d2a:	aa03      	add	r2, sp, #12
 8004d2c:	4621      	mov	r1, r4
 8004d2e:	4630      	mov	r0, r6
 8004d30:	f7ff fef6 	bl	8004b20 <_printf_common>
 8004d34:	3001      	adds	r0, #1
 8004d36:	d14d      	bne.n	8004dd4 <_printf_i+0x1c8>
 8004d38:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004d3c:	b005      	add	sp, #20
 8004d3e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004d42:	4839      	ldr	r0, [pc, #228]	; (8004e28 <_printf_i+0x21c>)
 8004d44:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8004d48:	6813      	ldr	r3, [r2, #0]
 8004d4a:	6821      	ldr	r1, [r4, #0]
 8004d4c:	1d1d      	adds	r5, r3, #4
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	6015      	str	r5, [r2, #0]
 8004d52:	060a      	lsls	r2, r1, #24
 8004d54:	d50b      	bpl.n	8004d6e <_printf_i+0x162>
 8004d56:	07ca      	lsls	r2, r1, #31
 8004d58:	bf44      	itt	mi
 8004d5a:	f041 0120 	orrmi.w	r1, r1, #32
 8004d5e:	6021      	strmi	r1, [r4, #0]
 8004d60:	b91b      	cbnz	r3, 8004d6a <_printf_i+0x15e>
 8004d62:	6822      	ldr	r2, [r4, #0]
 8004d64:	f022 0220 	bic.w	r2, r2, #32
 8004d68:	6022      	str	r2, [r4, #0]
 8004d6a:	2210      	movs	r2, #16
 8004d6c:	e7b7      	b.n	8004cde <_printf_i+0xd2>
 8004d6e:	064d      	lsls	r5, r1, #25
 8004d70:	bf48      	it	mi
 8004d72:	b29b      	uxthmi	r3, r3
 8004d74:	e7ef      	b.n	8004d56 <_printf_i+0x14a>
 8004d76:	4665      	mov	r5, ip
 8004d78:	fbb3 f1f2 	udiv	r1, r3, r2
 8004d7c:	fb02 3311 	mls	r3, r2, r1, r3
 8004d80:	5cc3      	ldrb	r3, [r0, r3]
 8004d82:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8004d86:	460b      	mov	r3, r1
 8004d88:	2900      	cmp	r1, #0
 8004d8a:	d1f5      	bne.n	8004d78 <_printf_i+0x16c>
 8004d8c:	e7b9      	b.n	8004d02 <_printf_i+0xf6>
 8004d8e:	6813      	ldr	r3, [r2, #0]
 8004d90:	6825      	ldr	r5, [r4, #0]
 8004d92:	6961      	ldr	r1, [r4, #20]
 8004d94:	1d18      	adds	r0, r3, #4
 8004d96:	6010      	str	r0, [r2, #0]
 8004d98:	0628      	lsls	r0, r5, #24
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	d501      	bpl.n	8004da2 <_printf_i+0x196>
 8004d9e:	6019      	str	r1, [r3, #0]
 8004da0:	e002      	b.n	8004da8 <_printf_i+0x19c>
 8004da2:	066a      	lsls	r2, r5, #25
 8004da4:	d5fb      	bpl.n	8004d9e <_printf_i+0x192>
 8004da6:	8019      	strh	r1, [r3, #0]
 8004da8:	2300      	movs	r3, #0
 8004daa:	6123      	str	r3, [r4, #16]
 8004dac:	4665      	mov	r5, ip
 8004dae:	e7b9      	b.n	8004d24 <_printf_i+0x118>
 8004db0:	6813      	ldr	r3, [r2, #0]
 8004db2:	1d19      	adds	r1, r3, #4
 8004db4:	6011      	str	r1, [r2, #0]
 8004db6:	681d      	ldr	r5, [r3, #0]
 8004db8:	6862      	ldr	r2, [r4, #4]
 8004dba:	2100      	movs	r1, #0
 8004dbc:	4628      	mov	r0, r5
 8004dbe:	f7fb fa17 	bl	80001f0 <memchr>
 8004dc2:	b108      	cbz	r0, 8004dc8 <_printf_i+0x1bc>
 8004dc4:	1b40      	subs	r0, r0, r5
 8004dc6:	6060      	str	r0, [r4, #4]
 8004dc8:	6863      	ldr	r3, [r4, #4]
 8004dca:	6123      	str	r3, [r4, #16]
 8004dcc:	2300      	movs	r3, #0
 8004dce:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004dd2:	e7a7      	b.n	8004d24 <_printf_i+0x118>
 8004dd4:	6923      	ldr	r3, [r4, #16]
 8004dd6:	462a      	mov	r2, r5
 8004dd8:	4639      	mov	r1, r7
 8004dda:	4630      	mov	r0, r6
 8004ddc:	47c0      	blx	r8
 8004dde:	3001      	adds	r0, #1
 8004de0:	d0aa      	beq.n	8004d38 <_printf_i+0x12c>
 8004de2:	6823      	ldr	r3, [r4, #0]
 8004de4:	079b      	lsls	r3, r3, #30
 8004de6:	d413      	bmi.n	8004e10 <_printf_i+0x204>
 8004de8:	68e0      	ldr	r0, [r4, #12]
 8004dea:	9b03      	ldr	r3, [sp, #12]
 8004dec:	4298      	cmp	r0, r3
 8004dee:	bfb8      	it	lt
 8004df0:	4618      	movlt	r0, r3
 8004df2:	e7a3      	b.n	8004d3c <_printf_i+0x130>
 8004df4:	2301      	movs	r3, #1
 8004df6:	464a      	mov	r2, r9
 8004df8:	4639      	mov	r1, r7
 8004dfa:	4630      	mov	r0, r6
 8004dfc:	47c0      	blx	r8
 8004dfe:	3001      	adds	r0, #1
 8004e00:	d09a      	beq.n	8004d38 <_printf_i+0x12c>
 8004e02:	3501      	adds	r5, #1
 8004e04:	68e3      	ldr	r3, [r4, #12]
 8004e06:	9a03      	ldr	r2, [sp, #12]
 8004e08:	1a9b      	subs	r3, r3, r2
 8004e0a:	42ab      	cmp	r3, r5
 8004e0c:	dcf2      	bgt.n	8004df4 <_printf_i+0x1e8>
 8004e0e:	e7eb      	b.n	8004de8 <_printf_i+0x1dc>
 8004e10:	2500      	movs	r5, #0
 8004e12:	f104 0919 	add.w	r9, r4, #25
 8004e16:	e7f5      	b.n	8004e04 <_printf_i+0x1f8>
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d1ac      	bne.n	8004d76 <_printf_i+0x16a>
 8004e1c:	7803      	ldrb	r3, [r0, #0]
 8004e1e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004e22:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004e26:	e76c      	b.n	8004d02 <_printf_i+0xf6>
 8004e28:	08006e36 	.word	0x08006e36
 8004e2c:	08006e47 	.word	0x08006e47

08004e30 <iprintf>:
 8004e30:	b40f      	push	{r0, r1, r2, r3}
 8004e32:	4b0a      	ldr	r3, [pc, #40]	; (8004e5c <iprintf+0x2c>)
 8004e34:	b513      	push	{r0, r1, r4, lr}
 8004e36:	681c      	ldr	r4, [r3, #0]
 8004e38:	b124      	cbz	r4, 8004e44 <iprintf+0x14>
 8004e3a:	69a3      	ldr	r3, [r4, #24]
 8004e3c:	b913      	cbnz	r3, 8004e44 <iprintf+0x14>
 8004e3e:	4620      	mov	r0, r4
 8004e40:	f000 fe92 	bl	8005b68 <__sinit>
 8004e44:	ab05      	add	r3, sp, #20
 8004e46:	9a04      	ldr	r2, [sp, #16]
 8004e48:	68a1      	ldr	r1, [r4, #8]
 8004e4a:	9301      	str	r3, [sp, #4]
 8004e4c:	4620      	mov	r0, r4
 8004e4e:	f001 faf1 	bl	8006434 <_vfiprintf_r>
 8004e52:	b002      	add	sp, #8
 8004e54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004e58:	b004      	add	sp, #16
 8004e5a:	4770      	bx	lr
 8004e5c:	20000004 	.word	0x20000004

08004e60 <quorem>:
 8004e60:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e64:	6903      	ldr	r3, [r0, #16]
 8004e66:	690c      	ldr	r4, [r1, #16]
 8004e68:	42a3      	cmp	r3, r4
 8004e6a:	4680      	mov	r8, r0
 8004e6c:	f2c0 8082 	blt.w	8004f74 <quorem+0x114>
 8004e70:	3c01      	subs	r4, #1
 8004e72:	f101 0714 	add.w	r7, r1, #20
 8004e76:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8004e7a:	f100 0614 	add.w	r6, r0, #20
 8004e7e:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8004e82:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8004e86:	eb06 030c 	add.w	r3, r6, ip
 8004e8a:	3501      	adds	r5, #1
 8004e8c:	eb07 090c 	add.w	r9, r7, ip
 8004e90:	9301      	str	r3, [sp, #4]
 8004e92:	fbb0 f5f5 	udiv	r5, r0, r5
 8004e96:	b395      	cbz	r5, 8004efe <quorem+0x9e>
 8004e98:	f04f 0a00 	mov.w	sl, #0
 8004e9c:	4638      	mov	r0, r7
 8004e9e:	46b6      	mov	lr, r6
 8004ea0:	46d3      	mov	fp, sl
 8004ea2:	f850 2b04 	ldr.w	r2, [r0], #4
 8004ea6:	b293      	uxth	r3, r2
 8004ea8:	fb05 a303 	mla	r3, r5, r3, sl
 8004eac:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8004eb0:	b29b      	uxth	r3, r3
 8004eb2:	ebab 0303 	sub.w	r3, fp, r3
 8004eb6:	0c12      	lsrs	r2, r2, #16
 8004eb8:	f8de b000 	ldr.w	fp, [lr]
 8004ebc:	fb05 a202 	mla	r2, r5, r2, sl
 8004ec0:	fa13 f38b 	uxtah	r3, r3, fp
 8004ec4:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8004ec8:	fa1f fb82 	uxth.w	fp, r2
 8004ecc:	f8de 2000 	ldr.w	r2, [lr]
 8004ed0:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8004ed4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004ed8:	b29b      	uxth	r3, r3
 8004eda:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004ede:	4581      	cmp	r9, r0
 8004ee0:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8004ee4:	f84e 3b04 	str.w	r3, [lr], #4
 8004ee8:	d2db      	bcs.n	8004ea2 <quorem+0x42>
 8004eea:	f856 300c 	ldr.w	r3, [r6, ip]
 8004eee:	b933      	cbnz	r3, 8004efe <quorem+0x9e>
 8004ef0:	9b01      	ldr	r3, [sp, #4]
 8004ef2:	3b04      	subs	r3, #4
 8004ef4:	429e      	cmp	r6, r3
 8004ef6:	461a      	mov	r2, r3
 8004ef8:	d330      	bcc.n	8004f5c <quorem+0xfc>
 8004efa:	f8c8 4010 	str.w	r4, [r8, #16]
 8004efe:	4640      	mov	r0, r8
 8004f00:	f001 f8f2 	bl	80060e8 <__mcmp>
 8004f04:	2800      	cmp	r0, #0
 8004f06:	db25      	blt.n	8004f54 <quorem+0xf4>
 8004f08:	3501      	adds	r5, #1
 8004f0a:	4630      	mov	r0, r6
 8004f0c:	f04f 0c00 	mov.w	ip, #0
 8004f10:	f857 2b04 	ldr.w	r2, [r7], #4
 8004f14:	f8d0 e000 	ldr.w	lr, [r0]
 8004f18:	b293      	uxth	r3, r2
 8004f1a:	ebac 0303 	sub.w	r3, ip, r3
 8004f1e:	0c12      	lsrs	r2, r2, #16
 8004f20:	fa13 f38e 	uxtah	r3, r3, lr
 8004f24:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8004f28:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004f2c:	b29b      	uxth	r3, r3
 8004f2e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004f32:	45b9      	cmp	r9, r7
 8004f34:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8004f38:	f840 3b04 	str.w	r3, [r0], #4
 8004f3c:	d2e8      	bcs.n	8004f10 <quorem+0xb0>
 8004f3e:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8004f42:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8004f46:	b92a      	cbnz	r2, 8004f54 <quorem+0xf4>
 8004f48:	3b04      	subs	r3, #4
 8004f4a:	429e      	cmp	r6, r3
 8004f4c:	461a      	mov	r2, r3
 8004f4e:	d30b      	bcc.n	8004f68 <quorem+0x108>
 8004f50:	f8c8 4010 	str.w	r4, [r8, #16]
 8004f54:	4628      	mov	r0, r5
 8004f56:	b003      	add	sp, #12
 8004f58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f5c:	6812      	ldr	r2, [r2, #0]
 8004f5e:	3b04      	subs	r3, #4
 8004f60:	2a00      	cmp	r2, #0
 8004f62:	d1ca      	bne.n	8004efa <quorem+0x9a>
 8004f64:	3c01      	subs	r4, #1
 8004f66:	e7c5      	b.n	8004ef4 <quorem+0x94>
 8004f68:	6812      	ldr	r2, [r2, #0]
 8004f6a:	3b04      	subs	r3, #4
 8004f6c:	2a00      	cmp	r2, #0
 8004f6e:	d1ef      	bne.n	8004f50 <quorem+0xf0>
 8004f70:	3c01      	subs	r4, #1
 8004f72:	e7ea      	b.n	8004f4a <quorem+0xea>
 8004f74:	2000      	movs	r0, #0
 8004f76:	e7ee      	b.n	8004f56 <quorem+0xf6>

08004f78 <_dtoa_r>:
 8004f78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f7c:	ec57 6b10 	vmov	r6, r7, d0
 8004f80:	b097      	sub	sp, #92	; 0x5c
 8004f82:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8004f84:	9106      	str	r1, [sp, #24]
 8004f86:	4604      	mov	r4, r0
 8004f88:	920b      	str	r2, [sp, #44]	; 0x2c
 8004f8a:	9312      	str	r3, [sp, #72]	; 0x48
 8004f8c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8004f90:	e9cd 6700 	strd	r6, r7, [sp]
 8004f94:	b93d      	cbnz	r5, 8004fa6 <_dtoa_r+0x2e>
 8004f96:	2010      	movs	r0, #16
 8004f98:	f000 fe7e 	bl	8005c98 <malloc>
 8004f9c:	6260      	str	r0, [r4, #36]	; 0x24
 8004f9e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8004fa2:	6005      	str	r5, [r0, #0]
 8004fa4:	60c5      	str	r5, [r0, #12]
 8004fa6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004fa8:	6819      	ldr	r1, [r3, #0]
 8004faa:	b151      	cbz	r1, 8004fc2 <_dtoa_r+0x4a>
 8004fac:	685a      	ldr	r2, [r3, #4]
 8004fae:	604a      	str	r2, [r1, #4]
 8004fb0:	2301      	movs	r3, #1
 8004fb2:	4093      	lsls	r3, r2
 8004fb4:	608b      	str	r3, [r1, #8]
 8004fb6:	4620      	mov	r0, r4
 8004fb8:	f000 feb5 	bl	8005d26 <_Bfree>
 8004fbc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004fbe:	2200      	movs	r2, #0
 8004fc0:	601a      	str	r2, [r3, #0]
 8004fc2:	1e3b      	subs	r3, r7, #0
 8004fc4:	bfbb      	ittet	lt
 8004fc6:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8004fca:	9301      	strlt	r3, [sp, #4]
 8004fcc:	2300      	movge	r3, #0
 8004fce:	2201      	movlt	r2, #1
 8004fd0:	bfac      	ite	ge
 8004fd2:	f8c8 3000 	strge.w	r3, [r8]
 8004fd6:	f8c8 2000 	strlt.w	r2, [r8]
 8004fda:	4baf      	ldr	r3, [pc, #700]	; (8005298 <_dtoa_r+0x320>)
 8004fdc:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8004fe0:	ea33 0308 	bics.w	r3, r3, r8
 8004fe4:	d114      	bne.n	8005010 <_dtoa_r+0x98>
 8004fe6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8004fe8:	f242 730f 	movw	r3, #9999	; 0x270f
 8004fec:	6013      	str	r3, [r2, #0]
 8004fee:	9b00      	ldr	r3, [sp, #0]
 8004ff0:	b923      	cbnz	r3, 8004ffc <_dtoa_r+0x84>
 8004ff2:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8004ff6:	2800      	cmp	r0, #0
 8004ff8:	f000 8542 	beq.w	8005a80 <_dtoa_r+0xb08>
 8004ffc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004ffe:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 80052ac <_dtoa_r+0x334>
 8005002:	2b00      	cmp	r3, #0
 8005004:	f000 8544 	beq.w	8005a90 <_dtoa_r+0xb18>
 8005008:	f10b 0303 	add.w	r3, fp, #3
 800500c:	f000 bd3e 	b.w	8005a8c <_dtoa_r+0xb14>
 8005010:	e9dd 6700 	ldrd	r6, r7, [sp]
 8005014:	2200      	movs	r2, #0
 8005016:	2300      	movs	r3, #0
 8005018:	4630      	mov	r0, r6
 800501a:	4639      	mov	r1, r7
 800501c:	f7fb fd5c 	bl	8000ad8 <__aeabi_dcmpeq>
 8005020:	4681      	mov	r9, r0
 8005022:	b168      	cbz	r0, 8005040 <_dtoa_r+0xc8>
 8005024:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005026:	2301      	movs	r3, #1
 8005028:	6013      	str	r3, [r2, #0]
 800502a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800502c:	2b00      	cmp	r3, #0
 800502e:	f000 8524 	beq.w	8005a7a <_dtoa_r+0xb02>
 8005032:	4b9a      	ldr	r3, [pc, #616]	; (800529c <_dtoa_r+0x324>)
 8005034:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005036:	f103 3bff 	add.w	fp, r3, #4294967295	; 0xffffffff
 800503a:	6013      	str	r3, [r2, #0]
 800503c:	f000 bd28 	b.w	8005a90 <_dtoa_r+0xb18>
 8005040:	aa14      	add	r2, sp, #80	; 0x50
 8005042:	a915      	add	r1, sp, #84	; 0x54
 8005044:	ec47 6b10 	vmov	d0, r6, r7
 8005048:	4620      	mov	r0, r4
 800504a:	f001 f8c4 	bl	80061d6 <__d2b>
 800504e:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8005052:	9004      	str	r0, [sp, #16]
 8005054:	2d00      	cmp	r5, #0
 8005056:	d07c      	beq.n	8005152 <_dtoa_r+0x1da>
 8005058:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800505c:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8005060:	46b2      	mov	sl, r6
 8005062:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 8005066:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800506a:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 800506e:	2200      	movs	r2, #0
 8005070:	4b8b      	ldr	r3, [pc, #556]	; (80052a0 <_dtoa_r+0x328>)
 8005072:	4650      	mov	r0, sl
 8005074:	4659      	mov	r1, fp
 8005076:	f7fb f90f 	bl	8000298 <__aeabi_dsub>
 800507a:	a381      	add	r3, pc, #516	; (adr r3, 8005280 <_dtoa_r+0x308>)
 800507c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005080:	f7fb fac2 	bl	8000608 <__aeabi_dmul>
 8005084:	a380      	add	r3, pc, #512	; (adr r3, 8005288 <_dtoa_r+0x310>)
 8005086:	e9d3 2300 	ldrd	r2, r3, [r3]
 800508a:	f7fb f907 	bl	800029c <__adddf3>
 800508e:	4606      	mov	r6, r0
 8005090:	4628      	mov	r0, r5
 8005092:	460f      	mov	r7, r1
 8005094:	f7fb fa4e 	bl	8000534 <__aeabi_i2d>
 8005098:	a37d      	add	r3, pc, #500	; (adr r3, 8005290 <_dtoa_r+0x318>)
 800509a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800509e:	f7fb fab3 	bl	8000608 <__aeabi_dmul>
 80050a2:	4602      	mov	r2, r0
 80050a4:	460b      	mov	r3, r1
 80050a6:	4630      	mov	r0, r6
 80050a8:	4639      	mov	r1, r7
 80050aa:	f7fb f8f7 	bl	800029c <__adddf3>
 80050ae:	4606      	mov	r6, r0
 80050b0:	460f      	mov	r7, r1
 80050b2:	f7fb fd59 	bl	8000b68 <__aeabi_d2iz>
 80050b6:	2200      	movs	r2, #0
 80050b8:	4682      	mov	sl, r0
 80050ba:	2300      	movs	r3, #0
 80050bc:	4630      	mov	r0, r6
 80050be:	4639      	mov	r1, r7
 80050c0:	f7fb fd14 	bl	8000aec <__aeabi_dcmplt>
 80050c4:	b148      	cbz	r0, 80050da <_dtoa_r+0x162>
 80050c6:	4650      	mov	r0, sl
 80050c8:	f7fb fa34 	bl	8000534 <__aeabi_i2d>
 80050cc:	4632      	mov	r2, r6
 80050ce:	463b      	mov	r3, r7
 80050d0:	f7fb fd02 	bl	8000ad8 <__aeabi_dcmpeq>
 80050d4:	b908      	cbnz	r0, 80050da <_dtoa_r+0x162>
 80050d6:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80050da:	f1ba 0f16 	cmp.w	sl, #22
 80050de:	d859      	bhi.n	8005194 <_dtoa_r+0x21c>
 80050e0:	4970      	ldr	r1, [pc, #448]	; (80052a4 <_dtoa_r+0x32c>)
 80050e2:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 80050e6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80050ea:	e9d1 0100 	ldrd	r0, r1, [r1]
 80050ee:	f7fb fd1b 	bl	8000b28 <__aeabi_dcmpgt>
 80050f2:	2800      	cmp	r0, #0
 80050f4:	d050      	beq.n	8005198 <_dtoa_r+0x220>
 80050f6:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80050fa:	2300      	movs	r3, #0
 80050fc:	930f      	str	r3, [sp, #60]	; 0x3c
 80050fe:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005100:	1b5d      	subs	r5, r3, r5
 8005102:	f1b5 0801 	subs.w	r8, r5, #1
 8005106:	bf49      	itett	mi
 8005108:	f1c5 0301 	rsbmi	r3, r5, #1
 800510c:	2300      	movpl	r3, #0
 800510e:	9305      	strmi	r3, [sp, #20]
 8005110:	f04f 0800 	movmi.w	r8, #0
 8005114:	bf58      	it	pl
 8005116:	9305      	strpl	r3, [sp, #20]
 8005118:	f1ba 0f00 	cmp.w	sl, #0
 800511c:	db3e      	blt.n	800519c <_dtoa_r+0x224>
 800511e:	2300      	movs	r3, #0
 8005120:	44d0      	add	r8, sl
 8005122:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8005126:	9307      	str	r3, [sp, #28]
 8005128:	9b06      	ldr	r3, [sp, #24]
 800512a:	2b09      	cmp	r3, #9
 800512c:	f200 8090 	bhi.w	8005250 <_dtoa_r+0x2d8>
 8005130:	2b05      	cmp	r3, #5
 8005132:	bfc4      	itt	gt
 8005134:	3b04      	subgt	r3, #4
 8005136:	9306      	strgt	r3, [sp, #24]
 8005138:	9b06      	ldr	r3, [sp, #24]
 800513a:	f1a3 0302 	sub.w	r3, r3, #2
 800513e:	bfcc      	ite	gt
 8005140:	2500      	movgt	r5, #0
 8005142:	2501      	movle	r5, #1
 8005144:	2b03      	cmp	r3, #3
 8005146:	f200 808f 	bhi.w	8005268 <_dtoa_r+0x2f0>
 800514a:	e8df f003 	tbb	[pc, r3]
 800514e:	7f7d      	.short	0x7f7d
 8005150:	7131      	.short	0x7131
 8005152:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8005156:	441d      	add	r5, r3
 8005158:	f205 4032 	addw	r0, r5, #1074	; 0x432
 800515c:	2820      	cmp	r0, #32
 800515e:	dd13      	ble.n	8005188 <_dtoa_r+0x210>
 8005160:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8005164:	9b00      	ldr	r3, [sp, #0]
 8005166:	fa08 f800 	lsl.w	r8, r8, r0
 800516a:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800516e:	fa23 f000 	lsr.w	r0, r3, r0
 8005172:	ea48 0000 	orr.w	r0, r8, r0
 8005176:	f7fb f9cd 	bl	8000514 <__aeabi_ui2d>
 800517a:	2301      	movs	r3, #1
 800517c:	4682      	mov	sl, r0
 800517e:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 8005182:	3d01      	subs	r5, #1
 8005184:	9313      	str	r3, [sp, #76]	; 0x4c
 8005186:	e772      	b.n	800506e <_dtoa_r+0xf6>
 8005188:	9b00      	ldr	r3, [sp, #0]
 800518a:	f1c0 0020 	rsb	r0, r0, #32
 800518e:	fa03 f000 	lsl.w	r0, r3, r0
 8005192:	e7f0      	b.n	8005176 <_dtoa_r+0x1fe>
 8005194:	2301      	movs	r3, #1
 8005196:	e7b1      	b.n	80050fc <_dtoa_r+0x184>
 8005198:	900f      	str	r0, [sp, #60]	; 0x3c
 800519a:	e7b0      	b.n	80050fe <_dtoa_r+0x186>
 800519c:	9b05      	ldr	r3, [sp, #20]
 800519e:	eba3 030a 	sub.w	r3, r3, sl
 80051a2:	9305      	str	r3, [sp, #20]
 80051a4:	f1ca 0300 	rsb	r3, sl, #0
 80051a8:	9307      	str	r3, [sp, #28]
 80051aa:	2300      	movs	r3, #0
 80051ac:	930e      	str	r3, [sp, #56]	; 0x38
 80051ae:	e7bb      	b.n	8005128 <_dtoa_r+0x1b0>
 80051b0:	2301      	movs	r3, #1
 80051b2:	930a      	str	r3, [sp, #40]	; 0x28
 80051b4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	dd59      	ble.n	800526e <_dtoa_r+0x2f6>
 80051ba:	9302      	str	r3, [sp, #8]
 80051bc:	4699      	mov	r9, r3
 80051be:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80051c0:	2200      	movs	r2, #0
 80051c2:	6072      	str	r2, [r6, #4]
 80051c4:	2204      	movs	r2, #4
 80051c6:	f102 0014 	add.w	r0, r2, #20
 80051ca:	4298      	cmp	r0, r3
 80051cc:	6871      	ldr	r1, [r6, #4]
 80051ce:	d953      	bls.n	8005278 <_dtoa_r+0x300>
 80051d0:	4620      	mov	r0, r4
 80051d2:	f000 fd74 	bl	8005cbe <_Balloc>
 80051d6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80051d8:	6030      	str	r0, [r6, #0]
 80051da:	f1b9 0f0e 	cmp.w	r9, #14
 80051de:	f8d3 b000 	ldr.w	fp, [r3]
 80051e2:	f200 80e6 	bhi.w	80053b2 <_dtoa_r+0x43a>
 80051e6:	2d00      	cmp	r5, #0
 80051e8:	f000 80e3 	beq.w	80053b2 <_dtoa_r+0x43a>
 80051ec:	ed9d 7b00 	vldr	d7, [sp]
 80051f0:	f1ba 0f00 	cmp.w	sl, #0
 80051f4:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 80051f8:	dd74      	ble.n	80052e4 <_dtoa_r+0x36c>
 80051fa:	4a2a      	ldr	r2, [pc, #168]	; (80052a4 <_dtoa_r+0x32c>)
 80051fc:	f00a 030f 	and.w	r3, sl, #15
 8005200:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8005204:	ed93 7b00 	vldr	d7, [r3]
 8005208:	ea4f 162a 	mov.w	r6, sl, asr #4
 800520c:	06f0      	lsls	r0, r6, #27
 800520e:	ed8d 7b08 	vstr	d7, [sp, #32]
 8005212:	d565      	bpl.n	80052e0 <_dtoa_r+0x368>
 8005214:	4b24      	ldr	r3, [pc, #144]	; (80052a8 <_dtoa_r+0x330>)
 8005216:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800521a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800521e:	f7fb fb1d 	bl	800085c <__aeabi_ddiv>
 8005222:	e9cd 0100 	strd	r0, r1, [sp]
 8005226:	f006 060f 	and.w	r6, r6, #15
 800522a:	2503      	movs	r5, #3
 800522c:	4f1e      	ldr	r7, [pc, #120]	; (80052a8 <_dtoa_r+0x330>)
 800522e:	e04c      	b.n	80052ca <_dtoa_r+0x352>
 8005230:	2301      	movs	r3, #1
 8005232:	930a      	str	r3, [sp, #40]	; 0x28
 8005234:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005236:	4453      	add	r3, sl
 8005238:	f103 0901 	add.w	r9, r3, #1
 800523c:	9302      	str	r3, [sp, #8]
 800523e:	464b      	mov	r3, r9
 8005240:	2b01      	cmp	r3, #1
 8005242:	bfb8      	it	lt
 8005244:	2301      	movlt	r3, #1
 8005246:	e7ba      	b.n	80051be <_dtoa_r+0x246>
 8005248:	2300      	movs	r3, #0
 800524a:	e7b2      	b.n	80051b2 <_dtoa_r+0x23a>
 800524c:	2300      	movs	r3, #0
 800524e:	e7f0      	b.n	8005232 <_dtoa_r+0x2ba>
 8005250:	2501      	movs	r5, #1
 8005252:	2300      	movs	r3, #0
 8005254:	9306      	str	r3, [sp, #24]
 8005256:	950a      	str	r5, [sp, #40]	; 0x28
 8005258:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800525c:	9302      	str	r3, [sp, #8]
 800525e:	4699      	mov	r9, r3
 8005260:	2200      	movs	r2, #0
 8005262:	2312      	movs	r3, #18
 8005264:	920b      	str	r2, [sp, #44]	; 0x2c
 8005266:	e7aa      	b.n	80051be <_dtoa_r+0x246>
 8005268:	2301      	movs	r3, #1
 800526a:	930a      	str	r3, [sp, #40]	; 0x28
 800526c:	e7f4      	b.n	8005258 <_dtoa_r+0x2e0>
 800526e:	2301      	movs	r3, #1
 8005270:	9302      	str	r3, [sp, #8]
 8005272:	4699      	mov	r9, r3
 8005274:	461a      	mov	r2, r3
 8005276:	e7f5      	b.n	8005264 <_dtoa_r+0x2ec>
 8005278:	3101      	adds	r1, #1
 800527a:	6071      	str	r1, [r6, #4]
 800527c:	0052      	lsls	r2, r2, #1
 800527e:	e7a2      	b.n	80051c6 <_dtoa_r+0x24e>
 8005280:	636f4361 	.word	0x636f4361
 8005284:	3fd287a7 	.word	0x3fd287a7
 8005288:	8b60c8b3 	.word	0x8b60c8b3
 800528c:	3fc68a28 	.word	0x3fc68a28
 8005290:	509f79fb 	.word	0x509f79fb
 8005294:	3fd34413 	.word	0x3fd34413
 8005298:	7ff00000 	.word	0x7ff00000
 800529c:	08006e35 	.word	0x08006e35
 80052a0:	3ff80000 	.word	0x3ff80000
 80052a4:	08006ef0 	.word	0x08006ef0
 80052a8:	08006ec8 	.word	0x08006ec8
 80052ac:	08006e61 	.word	0x08006e61
 80052b0:	07f1      	lsls	r1, r6, #31
 80052b2:	d508      	bpl.n	80052c6 <_dtoa_r+0x34e>
 80052b4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80052b8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80052bc:	f7fb f9a4 	bl	8000608 <__aeabi_dmul>
 80052c0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80052c4:	3501      	adds	r5, #1
 80052c6:	1076      	asrs	r6, r6, #1
 80052c8:	3708      	adds	r7, #8
 80052ca:	2e00      	cmp	r6, #0
 80052cc:	d1f0      	bne.n	80052b0 <_dtoa_r+0x338>
 80052ce:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80052d2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80052d6:	f7fb fac1 	bl	800085c <__aeabi_ddiv>
 80052da:	e9cd 0100 	strd	r0, r1, [sp]
 80052de:	e01a      	b.n	8005316 <_dtoa_r+0x39e>
 80052e0:	2502      	movs	r5, #2
 80052e2:	e7a3      	b.n	800522c <_dtoa_r+0x2b4>
 80052e4:	f000 80a0 	beq.w	8005428 <_dtoa_r+0x4b0>
 80052e8:	f1ca 0600 	rsb	r6, sl, #0
 80052ec:	4b9f      	ldr	r3, [pc, #636]	; (800556c <_dtoa_r+0x5f4>)
 80052ee:	4fa0      	ldr	r7, [pc, #640]	; (8005570 <_dtoa_r+0x5f8>)
 80052f0:	f006 020f 	and.w	r2, r6, #15
 80052f4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80052f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052fc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005300:	f7fb f982 	bl	8000608 <__aeabi_dmul>
 8005304:	e9cd 0100 	strd	r0, r1, [sp]
 8005308:	1136      	asrs	r6, r6, #4
 800530a:	2300      	movs	r3, #0
 800530c:	2502      	movs	r5, #2
 800530e:	2e00      	cmp	r6, #0
 8005310:	d17f      	bne.n	8005412 <_dtoa_r+0x49a>
 8005312:	2b00      	cmp	r3, #0
 8005314:	d1e1      	bne.n	80052da <_dtoa_r+0x362>
 8005316:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005318:	2b00      	cmp	r3, #0
 800531a:	f000 8087 	beq.w	800542c <_dtoa_r+0x4b4>
 800531e:	e9dd 6700 	ldrd	r6, r7, [sp]
 8005322:	2200      	movs	r2, #0
 8005324:	4b93      	ldr	r3, [pc, #588]	; (8005574 <_dtoa_r+0x5fc>)
 8005326:	4630      	mov	r0, r6
 8005328:	4639      	mov	r1, r7
 800532a:	f7fb fbdf 	bl	8000aec <__aeabi_dcmplt>
 800532e:	2800      	cmp	r0, #0
 8005330:	d07c      	beq.n	800542c <_dtoa_r+0x4b4>
 8005332:	f1b9 0f00 	cmp.w	r9, #0
 8005336:	d079      	beq.n	800542c <_dtoa_r+0x4b4>
 8005338:	9b02      	ldr	r3, [sp, #8]
 800533a:	2b00      	cmp	r3, #0
 800533c:	dd35      	ble.n	80053aa <_dtoa_r+0x432>
 800533e:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 8005342:	9308      	str	r3, [sp, #32]
 8005344:	4639      	mov	r1, r7
 8005346:	2200      	movs	r2, #0
 8005348:	4b8b      	ldr	r3, [pc, #556]	; (8005578 <_dtoa_r+0x600>)
 800534a:	4630      	mov	r0, r6
 800534c:	f7fb f95c 	bl	8000608 <__aeabi_dmul>
 8005350:	e9cd 0100 	strd	r0, r1, [sp]
 8005354:	9f02      	ldr	r7, [sp, #8]
 8005356:	3501      	adds	r5, #1
 8005358:	4628      	mov	r0, r5
 800535a:	f7fb f8eb 	bl	8000534 <__aeabi_i2d>
 800535e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005362:	f7fb f951 	bl	8000608 <__aeabi_dmul>
 8005366:	2200      	movs	r2, #0
 8005368:	4b84      	ldr	r3, [pc, #528]	; (800557c <_dtoa_r+0x604>)
 800536a:	f7fa ff97 	bl	800029c <__adddf3>
 800536e:	4605      	mov	r5, r0
 8005370:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8005374:	2f00      	cmp	r7, #0
 8005376:	d15d      	bne.n	8005434 <_dtoa_r+0x4bc>
 8005378:	2200      	movs	r2, #0
 800537a:	4b81      	ldr	r3, [pc, #516]	; (8005580 <_dtoa_r+0x608>)
 800537c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005380:	f7fa ff8a 	bl	8000298 <__aeabi_dsub>
 8005384:	462a      	mov	r2, r5
 8005386:	4633      	mov	r3, r6
 8005388:	e9cd 0100 	strd	r0, r1, [sp]
 800538c:	f7fb fbcc 	bl	8000b28 <__aeabi_dcmpgt>
 8005390:	2800      	cmp	r0, #0
 8005392:	f040 8288 	bne.w	80058a6 <_dtoa_r+0x92e>
 8005396:	462a      	mov	r2, r5
 8005398:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800539c:	e9dd 0100 	ldrd	r0, r1, [sp]
 80053a0:	f7fb fba4 	bl	8000aec <__aeabi_dcmplt>
 80053a4:	2800      	cmp	r0, #0
 80053a6:	f040 827c 	bne.w	80058a2 <_dtoa_r+0x92a>
 80053aa:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80053ae:	e9cd 2300 	strd	r2, r3, [sp]
 80053b2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	f2c0 8150 	blt.w	800565a <_dtoa_r+0x6e2>
 80053ba:	f1ba 0f0e 	cmp.w	sl, #14
 80053be:	f300 814c 	bgt.w	800565a <_dtoa_r+0x6e2>
 80053c2:	4b6a      	ldr	r3, [pc, #424]	; (800556c <_dtoa_r+0x5f4>)
 80053c4:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80053c8:	ed93 7b00 	vldr	d7, [r3]
 80053cc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	ed8d 7b02 	vstr	d7, [sp, #8]
 80053d4:	f280 80d8 	bge.w	8005588 <_dtoa_r+0x610>
 80053d8:	f1b9 0f00 	cmp.w	r9, #0
 80053dc:	f300 80d4 	bgt.w	8005588 <_dtoa_r+0x610>
 80053e0:	f040 825e 	bne.w	80058a0 <_dtoa_r+0x928>
 80053e4:	2200      	movs	r2, #0
 80053e6:	4b66      	ldr	r3, [pc, #408]	; (8005580 <_dtoa_r+0x608>)
 80053e8:	ec51 0b17 	vmov	r0, r1, d7
 80053ec:	f7fb f90c 	bl	8000608 <__aeabi_dmul>
 80053f0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80053f4:	f7fb fb8e 	bl	8000b14 <__aeabi_dcmpge>
 80053f8:	464f      	mov	r7, r9
 80053fa:	464e      	mov	r6, r9
 80053fc:	2800      	cmp	r0, #0
 80053fe:	f040 8234 	bne.w	800586a <_dtoa_r+0x8f2>
 8005402:	2331      	movs	r3, #49	; 0x31
 8005404:	f10b 0501 	add.w	r5, fp, #1
 8005408:	f88b 3000 	strb.w	r3, [fp]
 800540c:	f10a 0a01 	add.w	sl, sl, #1
 8005410:	e22f      	b.n	8005872 <_dtoa_r+0x8fa>
 8005412:	07f2      	lsls	r2, r6, #31
 8005414:	d505      	bpl.n	8005422 <_dtoa_r+0x4aa>
 8005416:	e9d7 2300 	ldrd	r2, r3, [r7]
 800541a:	f7fb f8f5 	bl	8000608 <__aeabi_dmul>
 800541e:	3501      	adds	r5, #1
 8005420:	2301      	movs	r3, #1
 8005422:	1076      	asrs	r6, r6, #1
 8005424:	3708      	adds	r7, #8
 8005426:	e772      	b.n	800530e <_dtoa_r+0x396>
 8005428:	2502      	movs	r5, #2
 800542a:	e774      	b.n	8005316 <_dtoa_r+0x39e>
 800542c:	f8cd a020 	str.w	sl, [sp, #32]
 8005430:	464f      	mov	r7, r9
 8005432:	e791      	b.n	8005358 <_dtoa_r+0x3e0>
 8005434:	4b4d      	ldr	r3, [pc, #308]	; (800556c <_dtoa_r+0x5f4>)
 8005436:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800543a:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800543e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005440:	2b00      	cmp	r3, #0
 8005442:	d047      	beq.n	80054d4 <_dtoa_r+0x55c>
 8005444:	4602      	mov	r2, r0
 8005446:	460b      	mov	r3, r1
 8005448:	2000      	movs	r0, #0
 800544a:	494e      	ldr	r1, [pc, #312]	; (8005584 <_dtoa_r+0x60c>)
 800544c:	f7fb fa06 	bl	800085c <__aeabi_ddiv>
 8005450:	462a      	mov	r2, r5
 8005452:	4633      	mov	r3, r6
 8005454:	f7fa ff20 	bl	8000298 <__aeabi_dsub>
 8005458:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800545c:	465d      	mov	r5, fp
 800545e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005462:	f7fb fb81 	bl	8000b68 <__aeabi_d2iz>
 8005466:	4606      	mov	r6, r0
 8005468:	f7fb f864 	bl	8000534 <__aeabi_i2d>
 800546c:	4602      	mov	r2, r0
 800546e:	460b      	mov	r3, r1
 8005470:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005474:	f7fa ff10 	bl	8000298 <__aeabi_dsub>
 8005478:	3630      	adds	r6, #48	; 0x30
 800547a:	f805 6b01 	strb.w	r6, [r5], #1
 800547e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8005482:	e9cd 0100 	strd	r0, r1, [sp]
 8005486:	f7fb fb31 	bl	8000aec <__aeabi_dcmplt>
 800548a:	2800      	cmp	r0, #0
 800548c:	d163      	bne.n	8005556 <_dtoa_r+0x5de>
 800548e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005492:	2000      	movs	r0, #0
 8005494:	4937      	ldr	r1, [pc, #220]	; (8005574 <_dtoa_r+0x5fc>)
 8005496:	f7fa feff 	bl	8000298 <__aeabi_dsub>
 800549a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800549e:	f7fb fb25 	bl	8000aec <__aeabi_dcmplt>
 80054a2:	2800      	cmp	r0, #0
 80054a4:	f040 80b7 	bne.w	8005616 <_dtoa_r+0x69e>
 80054a8:	eba5 030b 	sub.w	r3, r5, fp
 80054ac:	429f      	cmp	r7, r3
 80054ae:	f77f af7c 	ble.w	80053aa <_dtoa_r+0x432>
 80054b2:	2200      	movs	r2, #0
 80054b4:	4b30      	ldr	r3, [pc, #192]	; (8005578 <_dtoa_r+0x600>)
 80054b6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80054ba:	f7fb f8a5 	bl	8000608 <__aeabi_dmul>
 80054be:	2200      	movs	r2, #0
 80054c0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80054c4:	4b2c      	ldr	r3, [pc, #176]	; (8005578 <_dtoa_r+0x600>)
 80054c6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80054ca:	f7fb f89d 	bl	8000608 <__aeabi_dmul>
 80054ce:	e9cd 0100 	strd	r0, r1, [sp]
 80054d2:	e7c4      	b.n	800545e <_dtoa_r+0x4e6>
 80054d4:	462a      	mov	r2, r5
 80054d6:	4633      	mov	r3, r6
 80054d8:	f7fb f896 	bl	8000608 <__aeabi_dmul>
 80054dc:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80054e0:	eb0b 0507 	add.w	r5, fp, r7
 80054e4:	465e      	mov	r6, fp
 80054e6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80054ea:	f7fb fb3d 	bl	8000b68 <__aeabi_d2iz>
 80054ee:	4607      	mov	r7, r0
 80054f0:	f7fb f820 	bl	8000534 <__aeabi_i2d>
 80054f4:	3730      	adds	r7, #48	; 0x30
 80054f6:	4602      	mov	r2, r0
 80054f8:	460b      	mov	r3, r1
 80054fa:	e9dd 0100 	ldrd	r0, r1, [sp]
 80054fe:	f7fa fecb 	bl	8000298 <__aeabi_dsub>
 8005502:	f806 7b01 	strb.w	r7, [r6], #1
 8005506:	42ae      	cmp	r6, r5
 8005508:	e9cd 0100 	strd	r0, r1, [sp]
 800550c:	f04f 0200 	mov.w	r2, #0
 8005510:	d126      	bne.n	8005560 <_dtoa_r+0x5e8>
 8005512:	4b1c      	ldr	r3, [pc, #112]	; (8005584 <_dtoa_r+0x60c>)
 8005514:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005518:	f7fa fec0 	bl	800029c <__adddf3>
 800551c:	4602      	mov	r2, r0
 800551e:	460b      	mov	r3, r1
 8005520:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005524:	f7fb fb00 	bl	8000b28 <__aeabi_dcmpgt>
 8005528:	2800      	cmp	r0, #0
 800552a:	d174      	bne.n	8005616 <_dtoa_r+0x69e>
 800552c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8005530:	2000      	movs	r0, #0
 8005532:	4914      	ldr	r1, [pc, #80]	; (8005584 <_dtoa_r+0x60c>)
 8005534:	f7fa feb0 	bl	8000298 <__aeabi_dsub>
 8005538:	4602      	mov	r2, r0
 800553a:	460b      	mov	r3, r1
 800553c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005540:	f7fb fad4 	bl	8000aec <__aeabi_dcmplt>
 8005544:	2800      	cmp	r0, #0
 8005546:	f43f af30 	beq.w	80053aa <_dtoa_r+0x432>
 800554a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800554e:	2b30      	cmp	r3, #48	; 0x30
 8005550:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 8005554:	d002      	beq.n	800555c <_dtoa_r+0x5e4>
 8005556:	f8dd a020 	ldr.w	sl, [sp, #32]
 800555a:	e04a      	b.n	80055f2 <_dtoa_r+0x67a>
 800555c:	4615      	mov	r5, r2
 800555e:	e7f4      	b.n	800554a <_dtoa_r+0x5d2>
 8005560:	4b05      	ldr	r3, [pc, #20]	; (8005578 <_dtoa_r+0x600>)
 8005562:	f7fb f851 	bl	8000608 <__aeabi_dmul>
 8005566:	e9cd 0100 	strd	r0, r1, [sp]
 800556a:	e7bc      	b.n	80054e6 <_dtoa_r+0x56e>
 800556c:	08006ef0 	.word	0x08006ef0
 8005570:	08006ec8 	.word	0x08006ec8
 8005574:	3ff00000 	.word	0x3ff00000
 8005578:	40240000 	.word	0x40240000
 800557c:	401c0000 	.word	0x401c0000
 8005580:	40140000 	.word	0x40140000
 8005584:	3fe00000 	.word	0x3fe00000
 8005588:	e9dd 6700 	ldrd	r6, r7, [sp]
 800558c:	465d      	mov	r5, fp
 800558e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005592:	4630      	mov	r0, r6
 8005594:	4639      	mov	r1, r7
 8005596:	f7fb f961 	bl	800085c <__aeabi_ddiv>
 800559a:	f7fb fae5 	bl	8000b68 <__aeabi_d2iz>
 800559e:	4680      	mov	r8, r0
 80055a0:	f7fa ffc8 	bl	8000534 <__aeabi_i2d>
 80055a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80055a8:	f7fb f82e 	bl	8000608 <__aeabi_dmul>
 80055ac:	4602      	mov	r2, r0
 80055ae:	460b      	mov	r3, r1
 80055b0:	4630      	mov	r0, r6
 80055b2:	4639      	mov	r1, r7
 80055b4:	f108 0630 	add.w	r6, r8, #48	; 0x30
 80055b8:	f7fa fe6e 	bl	8000298 <__aeabi_dsub>
 80055bc:	f805 6b01 	strb.w	r6, [r5], #1
 80055c0:	eba5 060b 	sub.w	r6, r5, fp
 80055c4:	45b1      	cmp	r9, r6
 80055c6:	4602      	mov	r2, r0
 80055c8:	460b      	mov	r3, r1
 80055ca:	d139      	bne.n	8005640 <_dtoa_r+0x6c8>
 80055cc:	f7fa fe66 	bl	800029c <__adddf3>
 80055d0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80055d4:	4606      	mov	r6, r0
 80055d6:	460f      	mov	r7, r1
 80055d8:	f7fb faa6 	bl	8000b28 <__aeabi_dcmpgt>
 80055dc:	b9c8      	cbnz	r0, 8005612 <_dtoa_r+0x69a>
 80055de:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80055e2:	4630      	mov	r0, r6
 80055e4:	4639      	mov	r1, r7
 80055e6:	f7fb fa77 	bl	8000ad8 <__aeabi_dcmpeq>
 80055ea:	b110      	cbz	r0, 80055f2 <_dtoa_r+0x67a>
 80055ec:	f018 0f01 	tst.w	r8, #1
 80055f0:	d10f      	bne.n	8005612 <_dtoa_r+0x69a>
 80055f2:	9904      	ldr	r1, [sp, #16]
 80055f4:	4620      	mov	r0, r4
 80055f6:	f000 fb96 	bl	8005d26 <_Bfree>
 80055fa:	2300      	movs	r3, #0
 80055fc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80055fe:	702b      	strb	r3, [r5, #0]
 8005600:	f10a 0301 	add.w	r3, sl, #1
 8005604:	6013      	str	r3, [r2, #0]
 8005606:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005608:	2b00      	cmp	r3, #0
 800560a:	f000 8241 	beq.w	8005a90 <_dtoa_r+0xb18>
 800560e:	601d      	str	r5, [r3, #0]
 8005610:	e23e      	b.n	8005a90 <_dtoa_r+0xb18>
 8005612:	f8cd a020 	str.w	sl, [sp, #32]
 8005616:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800561a:	2a39      	cmp	r2, #57	; 0x39
 800561c:	f105 33ff 	add.w	r3, r5, #4294967295	; 0xffffffff
 8005620:	d108      	bne.n	8005634 <_dtoa_r+0x6bc>
 8005622:	459b      	cmp	fp, r3
 8005624:	d10a      	bne.n	800563c <_dtoa_r+0x6c4>
 8005626:	9b08      	ldr	r3, [sp, #32]
 8005628:	3301      	adds	r3, #1
 800562a:	9308      	str	r3, [sp, #32]
 800562c:	2330      	movs	r3, #48	; 0x30
 800562e:	f88b 3000 	strb.w	r3, [fp]
 8005632:	465b      	mov	r3, fp
 8005634:	781a      	ldrb	r2, [r3, #0]
 8005636:	3201      	adds	r2, #1
 8005638:	701a      	strb	r2, [r3, #0]
 800563a:	e78c      	b.n	8005556 <_dtoa_r+0x5de>
 800563c:	461d      	mov	r5, r3
 800563e:	e7ea      	b.n	8005616 <_dtoa_r+0x69e>
 8005640:	2200      	movs	r2, #0
 8005642:	4b9b      	ldr	r3, [pc, #620]	; (80058b0 <_dtoa_r+0x938>)
 8005644:	f7fa ffe0 	bl	8000608 <__aeabi_dmul>
 8005648:	2200      	movs	r2, #0
 800564a:	2300      	movs	r3, #0
 800564c:	4606      	mov	r6, r0
 800564e:	460f      	mov	r7, r1
 8005650:	f7fb fa42 	bl	8000ad8 <__aeabi_dcmpeq>
 8005654:	2800      	cmp	r0, #0
 8005656:	d09a      	beq.n	800558e <_dtoa_r+0x616>
 8005658:	e7cb      	b.n	80055f2 <_dtoa_r+0x67a>
 800565a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800565c:	2a00      	cmp	r2, #0
 800565e:	f000 808b 	beq.w	8005778 <_dtoa_r+0x800>
 8005662:	9a06      	ldr	r2, [sp, #24]
 8005664:	2a01      	cmp	r2, #1
 8005666:	dc6e      	bgt.n	8005746 <_dtoa_r+0x7ce>
 8005668:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800566a:	2a00      	cmp	r2, #0
 800566c:	d067      	beq.n	800573e <_dtoa_r+0x7c6>
 800566e:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8005672:	9f07      	ldr	r7, [sp, #28]
 8005674:	9d05      	ldr	r5, [sp, #20]
 8005676:	9a05      	ldr	r2, [sp, #20]
 8005678:	2101      	movs	r1, #1
 800567a:	441a      	add	r2, r3
 800567c:	4620      	mov	r0, r4
 800567e:	9205      	str	r2, [sp, #20]
 8005680:	4498      	add	r8, r3
 8005682:	f000 fbf0 	bl	8005e66 <__i2b>
 8005686:	4606      	mov	r6, r0
 8005688:	2d00      	cmp	r5, #0
 800568a:	dd0c      	ble.n	80056a6 <_dtoa_r+0x72e>
 800568c:	f1b8 0f00 	cmp.w	r8, #0
 8005690:	dd09      	ble.n	80056a6 <_dtoa_r+0x72e>
 8005692:	4545      	cmp	r5, r8
 8005694:	9a05      	ldr	r2, [sp, #20]
 8005696:	462b      	mov	r3, r5
 8005698:	bfa8      	it	ge
 800569a:	4643      	movge	r3, r8
 800569c:	1ad2      	subs	r2, r2, r3
 800569e:	9205      	str	r2, [sp, #20]
 80056a0:	1aed      	subs	r5, r5, r3
 80056a2:	eba8 0803 	sub.w	r8, r8, r3
 80056a6:	9b07      	ldr	r3, [sp, #28]
 80056a8:	b1eb      	cbz	r3, 80056e6 <_dtoa_r+0x76e>
 80056aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d067      	beq.n	8005780 <_dtoa_r+0x808>
 80056b0:	b18f      	cbz	r7, 80056d6 <_dtoa_r+0x75e>
 80056b2:	4631      	mov	r1, r6
 80056b4:	463a      	mov	r2, r7
 80056b6:	4620      	mov	r0, r4
 80056b8:	f000 fc74 	bl	8005fa4 <__pow5mult>
 80056bc:	9a04      	ldr	r2, [sp, #16]
 80056be:	4601      	mov	r1, r0
 80056c0:	4606      	mov	r6, r0
 80056c2:	4620      	mov	r0, r4
 80056c4:	f000 fbd8 	bl	8005e78 <__multiply>
 80056c8:	9904      	ldr	r1, [sp, #16]
 80056ca:	9008      	str	r0, [sp, #32]
 80056cc:	4620      	mov	r0, r4
 80056ce:	f000 fb2a 	bl	8005d26 <_Bfree>
 80056d2:	9b08      	ldr	r3, [sp, #32]
 80056d4:	9304      	str	r3, [sp, #16]
 80056d6:	9b07      	ldr	r3, [sp, #28]
 80056d8:	1bda      	subs	r2, r3, r7
 80056da:	d004      	beq.n	80056e6 <_dtoa_r+0x76e>
 80056dc:	9904      	ldr	r1, [sp, #16]
 80056de:	4620      	mov	r0, r4
 80056e0:	f000 fc60 	bl	8005fa4 <__pow5mult>
 80056e4:	9004      	str	r0, [sp, #16]
 80056e6:	2101      	movs	r1, #1
 80056e8:	4620      	mov	r0, r4
 80056ea:	f000 fbbc 	bl	8005e66 <__i2b>
 80056ee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80056f0:	4607      	mov	r7, r0
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	f000 81d0 	beq.w	8005a98 <_dtoa_r+0xb20>
 80056f8:	461a      	mov	r2, r3
 80056fa:	4601      	mov	r1, r0
 80056fc:	4620      	mov	r0, r4
 80056fe:	f000 fc51 	bl	8005fa4 <__pow5mult>
 8005702:	9b06      	ldr	r3, [sp, #24]
 8005704:	2b01      	cmp	r3, #1
 8005706:	4607      	mov	r7, r0
 8005708:	dc40      	bgt.n	800578c <_dtoa_r+0x814>
 800570a:	9b00      	ldr	r3, [sp, #0]
 800570c:	2b00      	cmp	r3, #0
 800570e:	d139      	bne.n	8005784 <_dtoa_r+0x80c>
 8005710:	9b01      	ldr	r3, [sp, #4]
 8005712:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005716:	2b00      	cmp	r3, #0
 8005718:	d136      	bne.n	8005788 <_dtoa_r+0x810>
 800571a:	9b01      	ldr	r3, [sp, #4]
 800571c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005720:	0d1b      	lsrs	r3, r3, #20
 8005722:	051b      	lsls	r3, r3, #20
 8005724:	b12b      	cbz	r3, 8005732 <_dtoa_r+0x7ba>
 8005726:	9b05      	ldr	r3, [sp, #20]
 8005728:	3301      	adds	r3, #1
 800572a:	9305      	str	r3, [sp, #20]
 800572c:	f108 0801 	add.w	r8, r8, #1
 8005730:	2301      	movs	r3, #1
 8005732:	9307      	str	r3, [sp, #28]
 8005734:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005736:	2b00      	cmp	r3, #0
 8005738:	d12a      	bne.n	8005790 <_dtoa_r+0x818>
 800573a:	2001      	movs	r0, #1
 800573c:	e030      	b.n	80057a0 <_dtoa_r+0x828>
 800573e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005740:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8005744:	e795      	b.n	8005672 <_dtoa_r+0x6fa>
 8005746:	9b07      	ldr	r3, [sp, #28]
 8005748:	f109 37ff 	add.w	r7, r9, #4294967295	; 0xffffffff
 800574c:	42bb      	cmp	r3, r7
 800574e:	bfbf      	itttt	lt
 8005750:	9b07      	ldrlt	r3, [sp, #28]
 8005752:	9707      	strlt	r7, [sp, #28]
 8005754:	1afa      	sublt	r2, r7, r3
 8005756:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8005758:	bfbb      	ittet	lt
 800575a:	189b      	addlt	r3, r3, r2
 800575c:	930e      	strlt	r3, [sp, #56]	; 0x38
 800575e:	1bdf      	subge	r7, r3, r7
 8005760:	2700      	movlt	r7, #0
 8005762:	f1b9 0f00 	cmp.w	r9, #0
 8005766:	bfb5      	itete	lt
 8005768:	9b05      	ldrlt	r3, [sp, #20]
 800576a:	9d05      	ldrge	r5, [sp, #20]
 800576c:	eba3 0509 	sublt.w	r5, r3, r9
 8005770:	464b      	movge	r3, r9
 8005772:	bfb8      	it	lt
 8005774:	2300      	movlt	r3, #0
 8005776:	e77e      	b.n	8005676 <_dtoa_r+0x6fe>
 8005778:	9f07      	ldr	r7, [sp, #28]
 800577a:	9d05      	ldr	r5, [sp, #20]
 800577c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800577e:	e783      	b.n	8005688 <_dtoa_r+0x710>
 8005780:	9a07      	ldr	r2, [sp, #28]
 8005782:	e7ab      	b.n	80056dc <_dtoa_r+0x764>
 8005784:	2300      	movs	r3, #0
 8005786:	e7d4      	b.n	8005732 <_dtoa_r+0x7ba>
 8005788:	9b00      	ldr	r3, [sp, #0]
 800578a:	e7d2      	b.n	8005732 <_dtoa_r+0x7ba>
 800578c:	2300      	movs	r3, #0
 800578e:	9307      	str	r3, [sp, #28]
 8005790:	693b      	ldr	r3, [r7, #16]
 8005792:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8005796:	6918      	ldr	r0, [r3, #16]
 8005798:	f000 fb17 	bl	8005dca <__hi0bits>
 800579c:	f1c0 0020 	rsb	r0, r0, #32
 80057a0:	4440      	add	r0, r8
 80057a2:	f010 001f 	ands.w	r0, r0, #31
 80057a6:	d047      	beq.n	8005838 <_dtoa_r+0x8c0>
 80057a8:	f1c0 0320 	rsb	r3, r0, #32
 80057ac:	2b04      	cmp	r3, #4
 80057ae:	dd3b      	ble.n	8005828 <_dtoa_r+0x8b0>
 80057b0:	9b05      	ldr	r3, [sp, #20]
 80057b2:	f1c0 001c 	rsb	r0, r0, #28
 80057b6:	4403      	add	r3, r0
 80057b8:	9305      	str	r3, [sp, #20]
 80057ba:	4405      	add	r5, r0
 80057bc:	4480      	add	r8, r0
 80057be:	9b05      	ldr	r3, [sp, #20]
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	dd05      	ble.n	80057d0 <_dtoa_r+0x858>
 80057c4:	461a      	mov	r2, r3
 80057c6:	9904      	ldr	r1, [sp, #16]
 80057c8:	4620      	mov	r0, r4
 80057ca:	f000 fc39 	bl	8006040 <__lshift>
 80057ce:	9004      	str	r0, [sp, #16]
 80057d0:	f1b8 0f00 	cmp.w	r8, #0
 80057d4:	dd05      	ble.n	80057e2 <_dtoa_r+0x86a>
 80057d6:	4639      	mov	r1, r7
 80057d8:	4642      	mov	r2, r8
 80057da:	4620      	mov	r0, r4
 80057dc:	f000 fc30 	bl	8006040 <__lshift>
 80057e0:	4607      	mov	r7, r0
 80057e2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80057e4:	b353      	cbz	r3, 800583c <_dtoa_r+0x8c4>
 80057e6:	4639      	mov	r1, r7
 80057e8:	9804      	ldr	r0, [sp, #16]
 80057ea:	f000 fc7d 	bl	80060e8 <__mcmp>
 80057ee:	2800      	cmp	r0, #0
 80057f0:	da24      	bge.n	800583c <_dtoa_r+0x8c4>
 80057f2:	2300      	movs	r3, #0
 80057f4:	220a      	movs	r2, #10
 80057f6:	9904      	ldr	r1, [sp, #16]
 80057f8:	4620      	mov	r0, r4
 80057fa:	f000 faab 	bl	8005d54 <__multadd>
 80057fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005800:	9004      	str	r0, [sp, #16]
 8005802:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8005806:	2b00      	cmp	r3, #0
 8005808:	f000 814d 	beq.w	8005aa6 <_dtoa_r+0xb2e>
 800580c:	2300      	movs	r3, #0
 800580e:	4631      	mov	r1, r6
 8005810:	220a      	movs	r2, #10
 8005812:	4620      	mov	r0, r4
 8005814:	f000 fa9e 	bl	8005d54 <__multadd>
 8005818:	9b02      	ldr	r3, [sp, #8]
 800581a:	2b00      	cmp	r3, #0
 800581c:	4606      	mov	r6, r0
 800581e:	dc4f      	bgt.n	80058c0 <_dtoa_r+0x948>
 8005820:	9b06      	ldr	r3, [sp, #24]
 8005822:	2b02      	cmp	r3, #2
 8005824:	dd4c      	ble.n	80058c0 <_dtoa_r+0x948>
 8005826:	e011      	b.n	800584c <_dtoa_r+0x8d4>
 8005828:	d0c9      	beq.n	80057be <_dtoa_r+0x846>
 800582a:	9a05      	ldr	r2, [sp, #20]
 800582c:	331c      	adds	r3, #28
 800582e:	441a      	add	r2, r3
 8005830:	9205      	str	r2, [sp, #20]
 8005832:	441d      	add	r5, r3
 8005834:	4498      	add	r8, r3
 8005836:	e7c2      	b.n	80057be <_dtoa_r+0x846>
 8005838:	4603      	mov	r3, r0
 800583a:	e7f6      	b.n	800582a <_dtoa_r+0x8b2>
 800583c:	f1b9 0f00 	cmp.w	r9, #0
 8005840:	dc38      	bgt.n	80058b4 <_dtoa_r+0x93c>
 8005842:	9b06      	ldr	r3, [sp, #24]
 8005844:	2b02      	cmp	r3, #2
 8005846:	dd35      	ble.n	80058b4 <_dtoa_r+0x93c>
 8005848:	f8cd 9008 	str.w	r9, [sp, #8]
 800584c:	9b02      	ldr	r3, [sp, #8]
 800584e:	b963      	cbnz	r3, 800586a <_dtoa_r+0x8f2>
 8005850:	4639      	mov	r1, r7
 8005852:	2205      	movs	r2, #5
 8005854:	4620      	mov	r0, r4
 8005856:	f000 fa7d 	bl	8005d54 <__multadd>
 800585a:	4601      	mov	r1, r0
 800585c:	4607      	mov	r7, r0
 800585e:	9804      	ldr	r0, [sp, #16]
 8005860:	f000 fc42 	bl	80060e8 <__mcmp>
 8005864:	2800      	cmp	r0, #0
 8005866:	f73f adcc 	bgt.w	8005402 <_dtoa_r+0x48a>
 800586a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800586c:	465d      	mov	r5, fp
 800586e:	ea6f 0a03 	mvn.w	sl, r3
 8005872:	f04f 0900 	mov.w	r9, #0
 8005876:	4639      	mov	r1, r7
 8005878:	4620      	mov	r0, r4
 800587a:	f000 fa54 	bl	8005d26 <_Bfree>
 800587e:	2e00      	cmp	r6, #0
 8005880:	f43f aeb7 	beq.w	80055f2 <_dtoa_r+0x67a>
 8005884:	f1b9 0f00 	cmp.w	r9, #0
 8005888:	d005      	beq.n	8005896 <_dtoa_r+0x91e>
 800588a:	45b1      	cmp	r9, r6
 800588c:	d003      	beq.n	8005896 <_dtoa_r+0x91e>
 800588e:	4649      	mov	r1, r9
 8005890:	4620      	mov	r0, r4
 8005892:	f000 fa48 	bl	8005d26 <_Bfree>
 8005896:	4631      	mov	r1, r6
 8005898:	4620      	mov	r0, r4
 800589a:	f000 fa44 	bl	8005d26 <_Bfree>
 800589e:	e6a8      	b.n	80055f2 <_dtoa_r+0x67a>
 80058a0:	2700      	movs	r7, #0
 80058a2:	463e      	mov	r6, r7
 80058a4:	e7e1      	b.n	800586a <_dtoa_r+0x8f2>
 80058a6:	f8dd a020 	ldr.w	sl, [sp, #32]
 80058aa:	463e      	mov	r6, r7
 80058ac:	e5a9      	b.n	8005402 <_dtoa_r+0x48a>
 80058ae:	bf00      	nop
 80058b0:	40240000 	.word	0x40240000
 80058b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80058b6:	f8cd 9008 	str.w	r9, [sp, #8]
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	f000 80fa 	beq.w	8005ab4 <_dtoa_r+0xb3c>
 80058c0:	2d00      	cmp	r5, #0
 80058c2:	dd05      	ble.n	80058d0 <_dtoa_r+0x958>
 80058c4:	4631      	mov	r1, r6
 80058c6:	462a      	mov	r2, r5
 80058c8:	4620      	mov	r0, r4
 80058ca:	f000 fbb9 	bl	8006040 <__lshift>
 80058ce:	4606      	mov	r6, r0
 80058d0:	9b07      	ldr	r3, [sp, #28]
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d04c      	beq.n	8005970 <_dtoa_r+0x9f8>
 80058d6:	6871      	ldr	r1, [r6, #4]
 80058d8:	4620      	mov	r0, r4
 80058da:	f000 f9f0 	bl	8005cbe <_Balloc>
 80058de:	6932      	ldr	r2, [r6, #16]
 80058e0:	3202      	adds	r2, #2
 80058e2:	4605      	mov	r5, r0
 80058e4:	0092      	lsls	r2, r2, #2
 80058e6:	f106 010c 	add.w	r1, r6, #12
 80058ea:	300c      	adds	r0, #12
 80058ec:	f000 f9dc 	bl	8005ca8 <memcpy>
 80058f0:	2201      	movs	r2, #1
 80058f2:	4629      	mov	r1, r5
 80058f4:	4620      	mov	r0, r4
 80058f6:	f000 fba3 	bl	8006040 <__lshift>
 80058fa:	9b00      	ldr	r3, [sp, #0]
 80058fc:	f8cd b014 	str.w	fp, [sp, #20]
 8005900:	f003 0301 	and.w	r3, r3, #1
 8005904:	46b1      	mov	r9, r6
 8005906:	9307      	str	r3, [sp, #28]
 8005908:	4606      	mov	r6, r0
 800590a:	4639      	mov	r1, r7
 800590c:	9804      	ldr	r0, [sp, #16]
 800590e:	f7ff faa7 	bl	8004e60 <quorem>
 8005912:	4649      	mov	r1, r9
 8005914:	4605      	mov	r5, r0
 8005916:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800591a:	9804      	ldr	r0, [sp, #16]
 800591c:	f000 fbe4 	bl	80060e8 <__mcmp>
 8005920:	4632      	mov	r2, r6
 8005922:	9000      	str	r0, [sp, #0]
 8005924:	4639      	mov	r1, r7
 8005926:	4620      	mov	r0, r4
 8005928:	f000 fbf8 	bl	800611c <__mdiff>
 800592c:	68c3      	ldr	r3, [r0, #12]
 800592e:	4602      	mov	r2, r0
 8005930:	bb03      	cbnz	r3, 8005974 <_dtoa_r+0x9fc>
 8005932:	4601      	mov	r1, r0
 8005934:	9008      	str	r0, [sp, #32]
 8005936:	9804      	ldr	r0, [sp, #16]
 8005938:	f000 fbd6 	bl	80060e8 <__mcmp>
 800593c:	9a08      	ldr	r2, [sp, #32]
 800593e:	4603      	mov	r3, r0
 8005940:	4611      	mov	r1, r2
 8005942:	4620      	mov	r0, r4
 8005944:	9308      	str	r3, [sp, #32]
 8005946:	f000 f9ee 	bl	8005d26 <_Bfree>
 800594a:	9b08      	ldr	r3, [sp, #32]
 800594c:	b9a3      	cbnz	r3, 8005978 <_dtoa_r+0xa00>
 800594e:	9a06      	ldr	r2, [sp, #24]
 8005950:	b992      	cbnz	r2, 8005978 <_dtoa_r+0xa00>
 8005952:	9a07      	ldr	r2, [sp, #28]
 8005954:	b982      	cbnz	r2, 8005978 <_dtoa_r+0xa00>
 8005956:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800595a:	d029      	beq.n	80059b0 <_dtoa_r+0xa38>
 800595c:	9b00      	ldr	r3, [sp, #0]
 800595e:	2b00      	cmp	r3, #0
 8005960:	dd01      	ble.n	8005966 <_dtoa_r+0x9ee>
 8005962:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8005966:	9b05      	ldr	r3, [sp, #20]
 8005968:	1c5d      	adds	r5, r3, #1
 800596a:	f883 8000 	strb.w	r8, [r3]
 800596e:	e782      	b.n	8005876 <_dtoa_r+0x8fe>
 8005970:	4630      	mov	r0, r6
 8005972:	e7c2      	b.n	80058fa <_dtoa_r+0x982>
 8005974:	2301      	movs	r3, #1
 8005976:	e7e3      	b.n	8005940 <_dtoa_r+0x9c8>
 8005978:	9a00      	ldr	r2, [sp, #0]
 800597a:	2a00      	cmp	r2, #0
 800597c:	db04      	blt.n	8005988 <_dtoa_r+0xa10>
 800597e:	d125      	bne.n	80059cc <_dtoa_r+0xa54>
 8005980:	9a06      	ldr	r2, [sp, #24]
 8005982:	bb1a      	cbnz	r2, 80059cc <_dtoa_r+0xa54>
 8005984:	9a07      	ldr	r2, [sp, #28]
 8005986:	bb0a      	cbnz	r2, 80059cc <_dtoa_r+0xa54>
 8005988:	2b00      	cmp	r3, #0
 800598a:	ddec      	ble.n	8005966 <_dtoa_r+0x9ee>
 800598c:	2201      	movs	r2, #1
 800598e:	9904      	ldr	r1, [sp, #16]
 8005990:	4620      	mov	r0, r4
 8005992:	f000 fb55 	bl	8006040 <__lshift>
 8005996:	4639      	mov	r1, r7
 8005998:	9004      	str	r0, [sp, #16]
 800599a:	f000 fba5 	bl	80060e8 <__mcmp>
 800599e:	2800      	cmp	r0, #0
 80059a0:	dc03      	bgt.n	80059aa <_dtoa_r+0xa32>
 80059a2:	d1e0      	bne.n	8005966 <_dtoa_r+0x9ee>
 80059a4:	f018 0f01 	tst.w	r8, #1
 80059a8:	d0dd      	beq.n	8005966 <_dtoa_r+0x9ee>
 80059aa:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80059ae:	d1d8      	bne.n	8005962 <_dtoa_r+0x9ea>
 80059b0:	9b05      	ldr	r3, [sp, #20]
 80059b2:	9a05      	ldr	r2, [sp, #20]
 80059b4:	1c5d      	adds	r5, r3, #1
 80059b6:	2339      	movs	r3, #57	; 0x39
 80059b8:	7013      	strb	r3, [r2, #0]
 80059ba:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80059be:	2b39      	cmp	r3, #57	; 0x39
 80059c0:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 80059c4:	d04f      	beq.n	8005a66 <_dtoa_r+0xaee>
 80059c6:	3301      	adds	r3, #1
 80059c8:	7013      	strb	r3, [r2, #0]
 80059ca:	e754      	b.n	8005876 <_dtoa_r+0x8fe>
 80059cc:	9a05      	ldr	r2, [sp, #20]
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	f102 0501 	add.w	r5, r2, #1
 80059d4:	dd06      	ble.n	80059e4 <_dtoa_r+0xa6c>
 80059d6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80059da:	d0e9      	beq.n	80059b0 <_dtoa_r+0xa38>
 80059dc:	f108 0801 	add.w	r8, r8, #1
 80059e0:	9b05      	ldr	r3, [sp, #20]
 80059e2:	e7c2      	b.n	800596a <_dtoa_r+0x9f2>
 80059e4:	9a02      	ldr	r2, [sp, #8]
 80059e6:	f805 8c01 	strb.w	r8, [r5, #-1]
 80059ea:	eba5 030b 	sub.w	r3, r5, fp
 80059ee:	4293      	cmp	r3, r2
 80059f0:	d021      	beq.n	8005a36 <_dtoa_r+0xabe>
 80059f2:	2300      	movs	r3, #0
 80059f4:	220a      	movs	r2, #10
 80059f6:	9904      	ldr	r1, [sp, #16]
 80059f8:	4620      	mov	r0, r4
 80059fa:	f000 f9ab 	bl	8005d54 <__multadd>
 80059fe:	45b1      	cmp	r9, r6
 8005a00:	9004      	str	r0, [sp, #16]
 8005a02:	f04f 0300 	mov.w	r3, #0
 8005a06:	f04f 020a 	mov.w	r2, #10
 8005a0a:	4649      	mov	r1, r9
 8005a0c:	4620      	mov	r0, r4
 8005a0e:	d105      	bne.n	8005a1c <_dtoa_r+0xaa4>
 8005a10:	f000 f9a0 	bl	8005d54 <__multadd>
 8005a14:	4681      	mov	r9, r0
 8005a16:	4606      	mov	r6, r0
 8005a18:	9505      	str	r5, [sp, #20]
 8005a1a:	e776      	b.n	800590a <_dtoa_r+0x992>
 8005a1c:	f000 f99a 	bl	8005d54 <__multadd>
 8005a20:	4631      	mov	r1, r6
 8005a22:	4681      	mov	r9, r0
 8005a24:	2300      	movs	r3, #0
 8005a26:	220a      	movs	r2, #10
 8005a28:	4620      	mov	r0, r4
 8005a2a:	f000 f993 	bl	8005d54 <__multadd>
 8005a2e:	4606      	mov	r6, r0
 8005a30:	e7f2      	b.n	8005a18 <_dtoa_r+0xaa0>
 8005a32:	f04f 0900 	mov.w	r9, #0
 8005a36:	2201      	movs	r2, #1
 8005a38:	9904      	ldr	r1, [sp, #16]
 8005a3a:	4620      	mov	r0, r4
 8005a3c:	f000 fb00 	bl	8006040 <__lshift>
 8005a40:	4639      	mov	r1, r7
 8005a42:	9004      	str	r0, [sp, #16]
 8005a44:	f000 fb50 	bl	80060e8 <__mcmp>
 8005a48:	2800      	cmp	r0, #0
 8005a4a:	dcb6      	bgt.n	80059ba <_dtoa_r+0xa42>
 8005a4c:	d102      	bne.n	8005a54 <_dtoa_r+0xadc>
 8005a4e:	f018 0f01 	tst.w	r8, #1
 8005a52:	d1b2      	bne.n	80059ba <_dtoa_r+0xa42>
 8005a54:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005a58:	2b30      	cmp	r3, #48	; 0x30
 8005a5a:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 8005a5e:	f47f af0a 	bne.w	8005876 <_dtoa_r+0x8fe>
 8005a62:	4615      	mov	r5, r2
 8005a64:	e7f6      	b.n	8005a54 <_dtoa_r+0xadc>
 8005a66:	4593      	cmp	fp, r2
 8005a68:	d105      	bne.n	8005a76 <_dtoa_r+0xafe>
 8005a6a:	2331      	movs	r3, #49	; 0x31
 8005a6c:	f10a 0a01 	add.w	sl, sl, #1
 8005a70:	f88b 3000 	strb.w	r3, [fp]
 8005a74:	e6ff      	b.n	8005876 <_dtoa_r+0x8fe>
 8005a76:	4615      	mov	r5, r2
 8005a78:	e79f      	b.n	80059ba <_dtoa_r+0xa42>
 8005a7a:	f8df b064 	ldr.w	fp, [pc, #100]	; 8005ae0 <_dtoa_r+0xb68>
 8005a7e:	e007      	b.n	8005a90 <_dtoa_r+0xb18>
 8005a80:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005a82:	f8df b060 	ldr.w	fp, [pc, #96]	; 8005ae4 <_dtoa_r+0xb6c>
 8005a86:	b11b      	cbz	r3, 8005a90 <_dtoa_r+0xb18>
 8005a88:	f10b 0308 	add.w	r3, fp, #8
 8005a8c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005a8e:	6013      	str	r3, [r2, #0]
 8005a90:	4658      	mov	r0, fp
 8005a92:	b017      	add	sp, #92	; 0x5c
 8005a94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a98:	9b06      	ldr	r3, [sp, #24]
 8005a9a:	2b01      	cmp	r3, #1
 8005a9c:	f77f ae35 	ble.w	800570a <_dtoa_r+0x792>
 8005aa0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005aa2:	9307      	str	r3, [sp, #28]
 8005aa4:	e649      	b.n	800573a <_dtoa_r+0x7c2>
 8005aa6:	9b02      	ldr	r3, [sp, #8]
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	dc03      	bgt.n	8005ab4 <_dtoa_r+0xb3c>
 8005aac:	9b06      	ldr	r3, [sp, #24]
 8005aae:	2b02      	cmp	r3, #2
 8005ab0:	f73f aecc 	bgt.w	800584c <_dtoa_r+0x8d4>
 8005ab4:	465d      	mov	r5, fp
 8005ab6:	4639      	mov	r1, r7
 8005ab8:	9804      	ldr	r0, [sp, #16]
 8005aba:	f7ff f9d1 	bl	8004e60 <quorem>
 8005abe:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8005ac2:	f805 8b01 	strb.w	r8, [r5], #1
 8005ac6:	9a02      	ldr	r2, [sp, #8]
 8005ac8:	eba5 030b 	sub.w	r3, r5, fp
 8005acc:	429a      	cmp	r2, r3
 8005ace:	ddb0      	ble.n	8005a32 <_dtoa_r+0xaba>
 8005ad0:	2300      	movs	r3, #0
 8005ad2:	220a      	movs	r2, #10
 8005ad4:	9904      	ldr	r1, [sp, #16]
 8005ad6:	4620      	mov	r0, r4
 8005ad8:	f000 f93c 	bl	8005d54 <__multadd>
 8005adc:	9004      	str	r0, [sp, #16]
 8005ade:	e7ea      	b.n	8005ab6 <_dtoa_r+0xb3e>
 8005ae0:	08006e34 	.word	0x08006e34
 8005ae4:	08006e58 	.word	0x08006e58

08005ae8 <std>:
 8005ae8:	2300      	movs	r3, #0
 8005aea:	b510      	push	{r4, lr}
 8005aec:	4604      	mov	r4, r0
 8005aee:	e9c0 3300 	strd	r3, r3, [r0]
 8005af2:	6083      	str	r3, [r0, #8]
 8005af4:	8181      	strh	r1, [r0, #12]
 8005af6:	6643      	str	r3, [r0, #100]	; 0x64
 8005af8:	81c2      	strh	r2, [r0, #14]
 8005afa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005afe:	6183      	str	r3, [r0, #24]
 8005b00:	4619      	mov	r1, r3
 8005b02:	2208      	movs	r2, #8
 8005b04:	305c      	adds	r0, #92	; 0x5c
 8005b06:	f7fe fd2f 	bl	8004568 <memset>
 8005b0a:	4b05      	ldr	r3, [pc, #20]	; (8005b20 <std+0x38>)
 8005b0c:	6263      	str	r3, [r4, #36]	; 0x24
 8005b0e:	4b05      	ldr	r3, [pc, #20]	; (8005b24 <std+0x3c>)
 8005b10:	62a3      	str	r3, [r4, #40]	; 0x28
 8005b12:	4b05      	ldr	r3, [pc, #20]	; (8005b28 <std+0x40>)
 8005b14:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005b16:	4b05      	ldr	r3, [pc, #20]	; (8005b2c <std+0x44>)
 8005b18:	6224      	str	r4, [r4, #32]
 8005b1a:	6323      	str	r3, [r4, #48]	; 0x30
 8005b1c:	bd10      	pop	{r4, pc}
 8005b1e:	bf00      	nop
 8005b20:	08006681 	.word	0x08006681
 8005b24:	080066a3 	.word	0x080066a3
 8005b28:	080066db 	.word	0x080066db
 8005b2c:	080066ff 	.word	0x080066ff

08005b30 <_cleanup_r>:
 8005b30:	4901      	ldr	r1, [pc, #4]	; (8005b38 <_cleanup_r+0x8>)
 8005b32:	f000 b885 	b.w	8005c40 <_fwalk_reent>
 8005b36:	bf00      	nop
 8005b38:	080069d9 	.word	0x080069d9

08005b3c <__sfmoreglue>:
 8005b3c:	b570      	push	{r4, r5, r6, lr}
 8005b3e:	1e4a      	subs	r2, r1, #1
 8005b40:	2568      	movs	r5, #104	; 0x68
 8005b42:	4355      	muls	r5, r2
 8005b44:	460e      	mov	r6, r1
 8005b46:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005b4a:	f000 fbef 	bl	800632c <_malloc_r>
 8005b4e:	4604      	mov	r4, r0
 8005b50:	b140      	cbz	r0, 8005b64 <__sfmoreglue+0x28>
 8005b52:	2100      	movs	r1, #0
 8005b54:	e9c0 1600 	strd	r1, r6, [r0]
 8005b58:	300c      	adds	r0, #12
 8005b5a:	60a0      	str	r0, [r4, #8]
 8005b5c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005b60:	f7fe fd02 	bl	8004568 <memset>
 8005b64:	4620      	mov	r0, r4
 8005b66:	bd70      	pop	{r4, r5, r6, pc}

08005b68 <__sinit>:
 8005b68:	6983      	ldr	r3, [r0, #24]
 8005b6a:	b510      	push	{r4, lr}
 8005b6c:	4604      	mov	r4, r0
 8005b6e:	bb33      	cbnz	r3, 8005bbe <__sinit+0x56>
 8005b70:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8005b74:	6503      	str	r3, [r0, #80]	; 0x50
 8005b76:	4b12      	ldr	r3, [pc, #72]	; (8005bc0 <__sinit+0x58>)
 8005b78:	4a12      	ldr	r2, [pc, #72]	; (8005bc4 <__sinit+0x5c>)
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	6282      	str	r2, [r0, #40]	; 0x28
 8005b7e:	4298      	cmp	r0, r3
 8005b80:	bf04      	itt	eq
 8005b82:	2301      	moveq	r3, #1
 8005b84:	6183      	streq	r3, [r0, #24]
 8005b86:	f000 f81f 	bl	8005bc8 <__sfp>
 8005b8a:	6060      	str	r0, [r4, #4]
 8005b8c:	4620      	mov	r0, r4
 8005b8e:	f000 f81b 	bl	8005bc8 <__sfp>
 8005b92:	60a0      	str	r0, [r4, #8]
 8005b94:	4620      	mov	r0, r4
 8005b96:	f000 f817 	bl	8005bc8 <__sfp>
 8005b9a:	2200      	movs	r2, #0
 8005b9c:	60e0      	str	r0, [r4, #12]
 8005b9e:	2104      	movs	r1, #4
 8005ba0:	6860      	ldr	r0, [r4, #4]
 8005ba2:	f7ff ffa1 	bl	8005ae8 <std>
 8005ba6:	2201      	movs	r2, #1
 8005ba8:	2109      	movs	r1, #9
 8005baa:	68a0      	ldr	r0, [r4, #8]
 8005bac:	f7ff ff9c 	bl	8005ae8 <std>
 8005bb0:	2202      	movs	r2, #2
 8005bb2:	2112      	movs	r1, #18
 8005bb4:	68e0      	ldr	r0, [r4, #12]
 8005bb6:	f7ff ff97 	bl	8005ae8 <std>
 8005bba:	2301      	movs	r3, #1
 8005bbc:	61a3      	str	r3, [r4, #24]
 8005bbe:	bd10      	pop	{r4, pc}
 8005bc0:	08006e20 	.word	0x08006e20
 8005bc4:	08005b31 	.word	0x08005b31

08005bc8 <__sfp>:
 8005bc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005bca:	4b1b      	ldr	r3, [pc, #108]	; (8005c38 <__sfp+0x70>)
 8005bcc:	681e      	ldr	r6, [r3, #0]
 8005bce:	69b3      	ldr	r3, [r6, #24]
 8005bd0:	4607      	mov	r7, r0
 8005bd2:	b913      	cbnz	r3, 8005bda <__sfp+0x12>
 8005bd4:	4630      	mov	r0, r6
 8005bd6:	f7ff ffc7 	bl	8005b68 <__sinit>
 8005bda:	3648      	adds	r6, #72	; 0x48
 8005bdc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005be0:	3b01      	subs	r3, #1
 8005be2:	d503      	bpl.n	8005bec <__sfp+0x24>
 8005be4:	6833      	ldr	r3, [r6, #0]
 8005be6:	b133      	cbz	r3, 8005bf6 <__sfp+0x2e>
 8005be8:	6836      	ldr	r6, [r6, #0]
 8005bea:	e7f7      	b.n	8005bdc <__sfp+0x14>
 8005bec:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005bf0:	b16d      	cbz	r5, 8005c0e <__sfp+0x46>
 8005bf2:	3468      	adds	r4, #104	; 0x68
 8005bf4:	e7f4      	b.n	8005be0 <__sfp+0x18>
 8005bf6:	2104      	movs	r1, #4
 8005bf8:	4638      	mov	r0, r7
 8005bfa:	f7ff ff9f 	bl	8005b3c <__sfmoreglue>
 8005bfe:	6030      	str	r0, [r6, #0]
 8005c00:	2800      	cmp	r0, #0
 8005c02:	d1f1      	bne.n	8005be8 <__sfp+0x20>
 8005c04:	230c      	movs	r3, #12
 8005c06:	603b      	str	r3, [r7, #0]
 8005c08:	4604      	mov	r4, r0
 8005c0a:	4620      	mov	r0, r4
 8005c0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005c0e:	4b0b      	ldr	r3, [pc, #44]	; (8005c3c <__sfp+0x74>)
 8005c10:	6665      	str	r5, [r4, #100]	; 0x64
 8005c12:	e9c4 5500 	strd	r5, r5, [r4]
 8005c16:	60a5      	str	r5, [r4, #8]
 8005c18:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8005c1c:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8005c20:	2208      	movs	r2, #8
 8005c22:	4629      	mov	r1, r5
 8005c24:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005c28:	f7fe fc9e 	bl	8004568 <memset>
 8005c2c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005c30:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005c34:	e7e9      	b.n	8005c0a <__sfp+0x42>
 8005c36:	bf00      	nop
 8005c38:	08006e20 	.word	0x08006e20
 8005c3c:	ffff0001 	.word	0xffff0001

08005c40 <_fwalk_reent>:
 8005c40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005c44:	4680      	mov	r8, r0
 8005c46:	4689      	mov	r9, r1
 8005c48:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005c4c:	2600      	movs	r6, #0
 8005c4e:	b914      	cbnz	r4, 8005c56 <_fwalk_reent+0x16>
 8005c50:	4630      	mov	r0, r6
 8005c52:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005c56:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8005c5a:	3f01      	subs	r7, #1
 8005c5c:	d501      	bpl.n	8005c62 <_fwalk_reent+0x22>
 8005c5e:	6824      	ldr	r4, [r4, #0]
 8005c60:	e7f5      	b.n	8005c4e <_fwalk_reent+0xe>
 8005c62:	89ab      	ldrh	r3, [r5, #12]
 8005c64:	2b01      	cmp	r3, #1
 8005c66:	d907      	bls.n	8005c78 <_fwalk_reent+0x38>
 8005c68:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005c6c:	3301      	adds	r3, #1
 8005c6e:	d003      	beq.n	8005c78 <_fwalk_reent+0x38>
 8005c70:	4629      	mov	r1, r5
 8005c72:	4640      	mov	r0, r8
 8005c74:	47c8      	blx	r9
 8005c76:	4306      	orrs	r6, r0
 8005c78:	3568      	adds	r5, #104	; 0x68
 8005c7a:	e7ee      	b.n	8005c5a <_fwalk_reent+0x1a>

08005c7c <_localeconv_r>:
 8005c7c:	4b04      	ldr	r3, [pc, #16]	; (8005c90 <_localeconv_r+0x14>)
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	6a18      	ldr	r0, [r3, #32]
 8005c82:	4b04      	ldr	r3, [pc, #16]	; (8005c94 <_localeconv_r+0x18>)
 8005c84:	2800      	cmp	r0, #0
 8005c86:	bf08      	it	eq
 8005c88:	4618      	moveq	r0, r3
 8005c8a:	30f0      	adds	r0, #240	; 0xf0
 8005c8c:	4770      	bx	lr
 8005c8e:	bf00      	nop
 8005c90:	20000004 	.word	0x20000004
 8005c94:	20000068 	.word	0x20000068

08005c98 <malloc>:
 8005c98:	4b02      	ldr	r3, [pc, #8]	; (8005ca4 <malloc+0xc>)
 8005c9a:	4601      	mov	r1, r0
 8005c9c:	6818      	ldr	r0, [r3, #0]
 8005c9e:	f000 bb45 	b.w	800632c <_malloc_r>
 8005ca2:	bf00      	nop
 8005ca4:	20000004 	.word	0x20000004

08005ca8 <memcpy>:
 8005ca8:	b510      	push	{r4, lr}
 8005caa:	1e43      	subs	r3, r0, #1
 8005cac:	440a      	add	r2, r1
 8005cae:	4291      	cmp	r1, r2
 8005cb0:	d100      	bne.n	8005cb4 <memcpy+0xc>
 8005cb2:	bd10      	pop	{r4, pc}
 8005cb4:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005cb8:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005cbc:	e7f7      	b.n	8005cae <memcpy+0x6>

08005cbe <_Balloc>:
 8005cbe:	b570      	push	{r4, r5, r6, lr}
 8005cc0:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8005cc2:	4604      	mov	r4, r0
 8005cc4:	460e      	mov	r6, r1
 8005cc6:	b93d      	cbnz	r5, 8005cd8 <_Balloc+0x1a>
 8005cc8:	2010      	movs	r0, #16
 8005cca:	f7ff ffe5 	bl	8005c98 <malloc>
 8005cce:	6260      	str	r0, [r4, #36]	; 0x24
 8005cd0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8005cd4:	6005      	str	r5, [r0, #0]
 8005cd6:	60c5      	str	r5, [r0, #12]
 8005cd8:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8005cda:	68eb      	ldr	r3, [r5, #12]
 8005cdc:	b183      	cbz	r3, 8005d00 <_Balloc+0x42>
 8005cde:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005ce0:	68db      	ldr	r3, [r3, #12]
 8005ce2:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8005ce6:	b9b8      	cbnz	r0, 8005d18 <_Balloc+0x5a>
 8005ce8:	2101      	movs	r1, #1
 8005cea:	fa01 f506 	lsl.w	r5, r1, r6
 8005cee:	1d6a      	adds	r2, r5, #5
 8005cf0:	0092      	lsls	r2, r2, #2
 8005cf2:	4620      	mov	r0, r4
 8005cf4:	f000 fabe 	bl	8006274 <_calloc_r>
 8005cf8:	b160      	cbz	r0, 8005d14 <_Balloc+0x56>
 8005cfa:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8005cfe:	e00e      	b.n	8005d1e <_Balloc+0x60>
 8005d00:	2221      	movs	r2, #33	; 0x21
 8005d02:	2104      	movs	r1, #4
 8005d04:	4620      	mov	r0, r4
 8005d06:	f000 fab5 	bl	8006274 <_calloc_r>
 8005d0a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005d0c:	60e8      	str	r0, [r5, #12]
 8005d0e:	68db      	ldr	r3, [r3, #12]
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d1e4      	bne.n	8005cde <_Balloc+0x20>
 8005d14:	2000      	movs	r0, #0
 8005d16:	bd70      	pop	{r4, r5, r6, pc}
 8005d18:	6802      	ldr	r2, [r0, #0]
 8005d1a:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8005d1e:	2300      	movs	r3, #0
 8005d20:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005d24:	e7f7      	b.n	8005d16 <_Balloc+0x58>

08005d26 <_Bfree>:
 8005d26:	b570      	push	{r4, r5, r6, lr}
 8005d28:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8005d2a:	4606      	mov	r6, r0
 8005d2c:	460d      	mov	r5, r1
 8005d2e:	b93c      	cbnz	r4, 8005d40 <_Bfree+0x1a>
 8005d30:	2010      	movs	r0, #16
 8005d32:	f7ff ffb1 	bl	8005c98 <malloc>
 8005d36:	6270      	str	r0, [r6, #36]	; 0x24
 8005d38:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005d3c:	6004      	str	r4, [r0, #0]
 8005d3e:	60c4      	str	r4, [r0, #12]
 8005d40:	b13d      	cbz	r5, 8005d52 <_Bfree+0x2c>
 8005d42:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8005d44:	686a      	ldr	r2, [r5, #4]
 8005d46:	68db      	ldr	r3, [r3, #12]
 8005d48:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005d4c:	6029      	str	r1, [r5, #0]
 8005d4e:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8005d52:	bd70      	pop	{r4, r5, r6, pc}

08005d54 <__multadd>:
 8005d54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005d58:	690d      	ldr	r5, [r1, #16]
 8005d5a:	461f      	mov	r7, r3
 8005d5c:	4606      	mov	r6, r0
 8005d5e:	460c      	mov	r4, r1
 8005d60:	f101 0c14 	add.w	ip, r1, #20
 8005d64:	2300      	movs	r3, #0
 8005d66:	f8dc 0000 	ldr.w	r0, [ip]
 8005d6a:	b281      	uxth	r1, r0
 8005d6c:	fb02 7101 	mla	r1, r2, r1, r7
 8005d70:	0c0f      	lsrs	r7, r1, #16
 8005d72:	0c00      	lsrs	r0, r0, #16
 8005d74:	fb02 7000 	mla	r0, r2, r0, r7
 8005d78:	b289      	uxth	r1, r1
 8005d7a:	3301      	adds	r3, #1
 8005d7c:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8005d80:	429d      	cmp	r5, r3
 8005d82:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8005d86:	f84c 1b04 	str.w	r1, [ip], #4
 8005d8a:	dcec      	bgt.n	8005d66 <__multadd+0x12>
 8005d8c:	b1d7      	cbz	r7, 8005dc4 <__multadd+0x70>
 8005d8e:	68a3      	ldr	r3, [r4, #8]
 8005d90:	42ab      	cmp	r3, r5
 8005d92:	dc12      	bgt.n	8005dba <__multadd+0x66>
 8005d94:	6861      	ldr	r1, [r4, #4]
 8005d96:	4630      	mov	r0, r6
 8005d98:	3101      	adds	r1, #1
 8005d9a:	f7ff ff90 	bl	8005cbe <_Balloc>
 8005d9e:	6922      	ldr	r2, [r4, #16]
 8005da0:	3202      	adds	r2, #2
 8005da2:	f104 010c 	add.w	r1, r4, #12
 8005da6:	4680      	mov	r8, r0
 8005da8:	0092      	lsls	r2, r2, #2
 8005daa:	300c      	adds	r0, #12
 8005dac:	f7ff ff7c 	bl	8005ca8 <memcpy>
 8005db0:	4621      	mov	r1, r4
 8005db2:	4630      	mov	r0, r6
 8005db4:	f7ff ffb7 	bl	8005d26 <_Bfree>
 8005db8:	4644      	mov	r4, r8
 8005dba:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005dbe:	3501      	adds	r5, #1
 8005dc0:	615f      	str	r7, [r3, #20]
 8005dc2:	6125      	str	r5, [r4, #16]
 8005dc4:	4620      	mov	r0, r4
 8005dc6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08005dca <__hi0bits>:
 8005dca:	0c02      	lsrs	r2, r0, #16
 8005dcc:	0412      	lsls	r2, r2, #16
 8005dce:	4603      	mov	r3, r0
 8005dd0:	b9b2      	cbnz	r2, 8005e00 <__hi0bits+0x36>
 8005dd2:	0403      	lsls	r3, r0, #16
 8005dd4:	2010      	movs	r0, #16
 8005dd6:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8005dda:	bf04      	itt	eq
 8005ddc:	021b      	lsleq	r3, r3, #8
 8005dde:	3008      	addeq	r0, #8
 8005de0:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8005de4:	bf04      	itt	eq
 8005de6:	011b      	lsleq	r3, r3, #4
 8005de8:	3004      	addeq	r0, #4
 8005dea:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8005dee:	bf04      	itt	eq
 8005df0:	009b      	lsleq	r3, r3, #2
 8005df2:	3002      	addeq	r0, #2
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	db06      	blt.n	8005e06 <__hi0bits+0x3c>
 8005df8:	005b      	lsls	r3, r3, #1
 8005dfa:	d503      	bpl.n	8005e04 <__hi0bits+0x3a>
 8005dfc:	3001      	adds	r0, #1
 8005dfe:	4770      	bx	lr
 8005e00:	2000      	movs	r0, #0
 8005e02:	e7e8      	b.n	8005dd6 <__hi0bits+0xc>
 8005e04:	2020      	movs	r0, #32
 8005e06:	4770      	bx	lr

08005e08 <__lo0bits>:
 8005e08:	6803      	ldr	r3, [r0, #0]
 8005e0a:	f013 0207 	ands.w	r2, r3, #7
 8005e0e:	4601      	mov	r1, r0
 8005e10:	d00b      	beq.n	8005e2a <__lo0bits+0x22>
 8005e12:	07da      	lsls	r2, r3, #31
 8005e14:	d423      	bmi.n	8005e5e <__lo0bits+0x56>
 8005e16:	0798      	lsls	r0, r3, #30
 8005e18:	bf49      	itett	mi
 8005e1a:	085b      	lsrmi	r3, r3, #1
 8005e1c:	089b      	lsrpl	r3, r3, #2
 8005e1e:	2001      	movmi	r0, #1
 8005e20:	600b      	strmi	r3, [r1, #0]
 8005e22:	bf5c      	itt	pl
 8005e24:	600b      	strpl	r3, [r1, #0]
 8005e26:	2002      	movpl	r0, #2
 8005e28:	4770      	bx	lr
 8005e2a:	b298      	uxth	r0, r3
 8005e2c:	b9a8      	cbnz	r0, 8005e5a <__lo0bits+0x52>
 8005e2e:	0c1b      	lsrs	r3, r3, #16
 8005e30:	2010      	movs	r0, #16
 8005e32:	f013 0fff 	tst.w	r3, #255	; 0xff
 8005e36:	bf04      	itt	eq
 8005e38:	0a1b      	lsreq	r3, r3, #8
 8005e3a:	3008      	addeq	r0, #8
 8005e3c:	071a      	lsls	r2, r3, #28
 8005e3e:	bf04      	itt	eq
 8005e40:	091b      	lsreq	r3, r3, #4
 8005e42:	3004      	addeq	r0, #4
 8005e44:	079a      	lsls	r2, r3, #30
 8005e46:	bf04      	itt	eq
 8005e48:	089b      	lsreq	r3, r3, #2
 8005e4a:	3002      	addeq	r0, #2
 8005e4c:	07da      	lsls	r2, r3, #31
 8005e4e:	d402      	bmi.n	8005e56 <__lo0bits+0x4e>
 8005e50:	085b      	lsrs	r3, r3, #1
 8005e52:	d006      	beq.n	8005e62 <__lo0bits+0x5a>
 8005e54:	3001      	adds	r0, #1
 8005e56:	600b      	str	r3, [r1, #0]
 8005e58:	4770      	bx	lr
 8005e5a:	4610      	mov	r0, r2
 8005e5c:	e7e9      	b.n	8005e32 <__lo0bits+0x2a>
 8005e5e:	2000      	movs	r0, #0
 8005e60:	4770      	bx	lr
 8005e62:	2020      	movs	r0, #32
 8005e64:	4770      	bx	lr

08005e66 <__i2b>:
 8005e66:	b510      	push	{r4, lr}
 8005e68:	460c      	mov	r4, r1
 8005e6a:	2101      	movs	r1, #1
 8005e6c:	f7ff ff27 	bl	8005cbe <_Balloc>
 8005e70:	2201      	movs	r2, #1
 8005e72:	6144      	str	r4, [r0, #20]
 8005e74:	6102      	str	r2, [r0, #16]
 8005e76:	bd10      	pop	{r4, pc}

08005e78 <__multiply>:
 8005e78:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e7c:	4614      	mov	r4, r2
 8005e7e:	690a      	ldr	r2, [r1, #16]
 8005e80:	6923      	ldr	r3, [r4, #16]
 8005e82:	429a      	cmp	r2, r3
 8005e84:	bfb8      	it	lt
 8005e86:	460b      	movlt	r3, r1
 8005e88:	4688      	mov	r8, r1
 8005e8a:	bfbc      	itt	lt
 8005e8c:	46a0      	movlt	r8, r4
 8005e8e:	461c      	movlt	r4, r3
 8005e90:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8005e94:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8005e98:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8005e9c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8005ea0:	eb07 0609 	add.w	r6, r7, r9
 8005ea4:	42b3      	cmp	r3, r6
 8005ea6:	bfb8      	it	lt
 8005ea8:	3101      	addlt	r1, #1
 8005eaa:	f7ff ff08 	bl	8005cbe <_Balloc>
 8005eae:	f100 0514 	add.w	r5, r0, #20
 8005eb2:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8005eb6:	462b      	mov	r3, r5
 8005eb8:	2200      	movs	r2, #0
 8005eba:	4573      	cmp	r3, lr
 8005ebc:	d316      	bcc.n	8005eec <__multiply+0x74>
 8005ebe:	f104 0214 	add.w	r2, r4, #20
 8005ec2:	f108 0114 	add.w	r1, r8, #20
 8005ec6:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8005eca:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8005ece:	9300      	str	r3, [sp, #0]
 8005ed0:	9b00      	ldr	r3, [sp, #0]
 8005ed2:	9201      	str	r2, [sp, #4]
 8005ed4:	4293      	cmp	r3, r2
 8005ed6:	d80c      	bhi.n	8005ef2 <__multiply+0x7a>
 8005ed8:	2e00      	cmp	r6, #0
 8005eda:	dd03      	ble.n	8005ee4 <__multiply+0x6c>
 8005edc:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d05d      	beq.n	8005fa0 <__multiply+0x128>
 8005ee4:	6106      	str	r6, [r0, #16]
 8005ee6:	b003      	add	sp, #12
 8005ee8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005eec:	f843 2b04 	str.w	r2, [r3], #4
 8005ef0:	e7e3      	b.n	8005eba <__multiply+0x42>
 8005ef2:	f8b2 b000 	ldrh.w	fp, [r2]
 8005ef6:	f1bb 0f00 	cmp.w	fp, #0
 8005efa:	d023      	beq.n	8005f44 <__multiply+0xcc>
 8005efc:	4689      	mov	r9, r1
 8005efe:	46ac      	mov	ip, r5
 8005f00:	f04f 0800 	mov.w	r8, #0
 8005f04:	f859 4b04 	ldr.w	r4, [r9], #4
 8005f08:	f8dc a000 	ldr.w	sl, [ip]
 8005f0c:	b2a3      	uxth	r3, r4
 8005f0e:	fa1f fa8a 	uxth.w	sl, sl
 8005f12:	fb0b a303 	mla	r3, fp, r3, sl
 8005f16:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8005f1a:	f8dc 4000 	ldr.w	r4, [ip]
 8005f1e:	4443      	add	r3, r8
 8005f20:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8005f24:	fb0b 840a 	mla	r4, fp, sl, r8
 8005f28:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8005f2c:	46e2      	mov	sl, ip
 8005f2e:	b29b      	uxth	r3, r3
 8005f30:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8005f34:	454f      	cmp	r7, r9
 8005f36:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8005f3a:	f84a 3b04 	str.w	r3, [sl], #4
 8005f3e:	d82b      	bhi.n	8005f98 <__multiply+0x120>
 8005f40:	f8cc 8004 	str.w	r8, [ip, #4]
 8005f44:	9b01      	ldr	r3, [sp, #4]
 8005f46:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8005f4a:	3204      	adds	r2, #4
 8005f4c:	f1ba 0f00 	cmp.w	sl, #0
 8005f50:	d020      	beq.n	8005f94 <__multiply+0x11c>
 8005f52:	682b      	ldr	r3, [r5, #0]
 8005f54:	4689      	mov	r9, r1
 8005f56:	46a8      	mov	r8, r5
 8005f58:	f04f 0b00 	mov.w	fp, #0
 8005f5c:	f8b9 c000 	ldrh.w	ip, [r9]
 8005f60:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8005f64:	fb0a 440c 	mla	r4, sl, ip, r4
 8005f68:	445c      	add	r4, fp
 8005f6a:	46c4      	mov	ip, r8
 8005f6c:	b29b      	uxth	r3, r3
 8005f6e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8005f72:	f84c 3b04 	str.w	r3, [ip], #4
 8005f76:	f859 3b04 	ldr.w	r3, [r9], #4
 8005f7a:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8005f7e:	0c1b      	lsrs	r3, r3, #16
 8005f80:	fb0a b303 	mla	r3, sl, r3, fp
 8005f84:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8005f88:	454f      	cmp	r7, r9
 8005f8a:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8005f8e:	d805      	bhi.n	8005f9c <__multiply+0x124>
 8005f90:	f8c8 3004 	str.w	r3, [r8, #4]
 8005f94:	3504      	adds	r5, #4
 8005f96:	e79b      	b.n	8005ed0 <__multiply+0x58>
 8005f98:	46d4      	mov	ip, sl
 8005f9a:	e7b3      	b.n	8005f04 <__multiply+0x8c>
 8005f9c:	46e0      	mov	r8, ip
 8005f9e:	e7dd      	b.n	8005f5c <__multiply+0xe4>
 8005fa0:	3e01      	subs	r6, #1
 8005fa2:	e799      	b.n	8005ed8 <__multiply+0x60>

08005fa4 <__pow5mult>:
 8005fa4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005fa8:	4615      	mov	r5, r2
 8005faa:	f012 0203 	ands.w	r2, r2, #3
 8005fae:	4606      	mov	r6, r0
 8005fb0:	460f      	mov	r7, r1
 8005fb2:	d007      	beq.n	8005fc4 <__pow5mult+0x20>
 8005fb4:	3a01      	subs	r2, #1
 8005fb6:	4c21      	ldr	r4, [pc, #132]	; (800603c <__pow5mult+0x98>)
 8005fb8:	2300      	movs	r3, #0
 8005fba:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005fbe:	f7ff fec9 	bl	8005d54 <__multadd>
 8005fc2:	4607      	mov	r7, r0
 8005fc4:	10ad      	asrs	r5, r5, #2
 8005fc6:	d035      	beq.n	8006034 <__pow5mult+0x90>
 8005fc8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8005fca:	b93c      	cbnz	r4, 8005fdc <__pow5mult+0x38>
 8005fcc:	2010      	movs	r0, #16
 8005fce:	f7ff fe63 	bl	8005c98 <malloc>
 8005fd2:	6270      	str	r0, [r6, #36]	; 0x24
 8005fd4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005fd8:	6004      	str	r4, [r0, #0]
 8005fda:	60c4      	str	r4, [r0, #12]
 8005fdc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8005fe0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005fe4:	b94c      	cbnz	r4, 8005ffa <__pow5mult+0x56>
 8005fe6:	f240 2171 	movw	r1, #625	; 0x271
 8005fea:	4630      	mov	r0, r6
 8005fec:	f7ff ff3b 	bl	8005e66 <__i2b>
 8005ff0:	2300      	movs	r3, #0
 8005ff2:	f8c8 0008 	str.w	r0, [r8, #8]
 8005ff6:	4604      	mov	r4, r0
 8005ff8:	6003      	str	r3, [r0, #0]
 8005ffa:	f04f 0800 	mov.w	r8, #0
 8005ffe:	07eb      	lsls	r3, r5, #31
 8006000:	d50a      	bpl.n	8006018 <__pow5mult+0x74>
 8006002:	4639      	mov	r1, r7
 8006004:	4622      	mov	r2, r4
 8006006:	4630      	mov	r0, r6
 8006008:	f7ff ff36 	bl	8005e78 <__multiply>
 800600c:	4639      	mov	r1, r7
 800600e:	4681      	mov	r9, r0
 8006010:	4630      	mov	r0, r6
 8006012:	f7ff fe88 	bl	8005d26 <_Bfree>
 8006016:	464f      	mov	r7, r9
 8006018:	106d      	asrs	r5, r5, #1
 800601a:	d00b      	beq.n	8006034 <__pow5mult+0x90>
 800601c:	6820      	ldr	r0, [r4, #0]
 800601e:	b938      	cbnz	r0, 8006030 <__pow5mult+0x8c>
 8006020:	4622      	mov	r2, r4
 8006022:	4621      	mov	r1, r4
 8006024:	4630      	mov	r0, r6
 8006026:	f7ff ff27 	bl	8005e78 <__multiply>
 800602a:	6020      	str	r0, [r4, #0]
 800602c:	f8c0 8000 	str.w	r8, [r0]
 8006030:	4604      	mov	r4, r0
 8006032:	e7e4      	b.n	8005ffe <__pow5mult+0x5a>
 8006034:	4638      	mov	r0, r7
 8006036:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800603a:	bf00      	nop
 800603c:	08006fb8 	.word	0x08006fb8

08006040 <__lshift>:
 8006040:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006044:	460c      	mov	r4, r1
 8006046:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800604a:	6923      	ldr	r3, [r4, #16]
 800604c:	6849      	ldr	r1, [r1, #4]
 800604e:	eb0a 0903 	add.w	r9, sl, r3
 8006052:	68a3      	ldr	r3, [r4, #8]
 8006054:	4607      	mov	r7, r0
 8006056:	4616      	mov	r6, r2
 8006058:	f109 0501 	add.w	r5, r9, #1
 800605c:	42ab      	cmp	r3, r5
 800605e:	db32      	blt.n	80060c6 <__lshift+0x86>
 8006060:	4638      	mov	r0, r7
 8006062:	f7ff fe2c 	bl	8005cbe <_Balloc>
 8006066:	2300      	movs	r3, #0
 8006068:	4680      	mov	r8, r0
 800606a:	f100 0114 	add.w	r1, r0, #20
 800606e:	461a      	mov	r2, r3
 8006070:	4553      	cmp	r3, sl
 8006072:	db2b      	blt.n	80060cc <__lshift+0x8c>
 8006074:	6920      	ldr	r0, [r4, #16]
 8006076:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800607a:	f104 0314 	add.w	r3, r4, #20
 800607e:	f016 021f 	ands.w	r2, r6, #31
 8006082:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006086:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800608a:	d025      	beq.n	80060d8 <__lshift+0x98>
 800608c:	f1c2 0e20 	rsb	lr, r2, #32
 8006090:	2000      	movs	r0, #0
 8006092:	681e      	ldr	r6, [r3, #0]
 8006094:	468a      	mov	sl, r1
 8006096:	4096      	lsls	r6, r2
 8006098:	4330      	orrs	r0, r6
 800609a:	f84a 0b04 	str.w	r0, [sl], #4
 800609e:	f853 0b04 	ldr.w	r0, [r3], #4
 80060a2:	459c      	cmp	ip, r3
 80060a4:	fa20 f00e 	lsr.w	r0, r0, lr
 80060a8:	d814      	bhi.n	80060d4 <__lshift+0x94>
 80060aa:	6048      	str	r0, [r1, #4]
 80060ac:	b108      	cbz	r0, 80060b2 <__lshift+0x72>
 80060ae:	f109 0502 	add.w	r5, r9, #2
 80060b2:	3d01      	subs	r5, #1
 80060b4:	4638      	mov	r0, r7
 80060b6:	f8c8 5010 	str.w	r5, [r8, #16]
 80060ba:	4621      	mov	r1, r4
 80060bc:	f7ff fe33 	bl	8005d26 <_Bfree>
 80060c0:	4640      	mov	r0, r8
 80060c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80060c6:	3101      	adds	r1, #1
 80060c8:	005b      	lsls	r3, r3, #1
 80060ca:	e7c7      	b.n	800605c <__lshift+0x1c>
 80060cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80060d0:	3301      	adds	r3, #1
 80060d2:	e7cd      	b.n	8006070 <__lshift+0x30>
 80060d4:	4651      	mov	r1, sl
 80060d6:	e7dc      	b.n	8006092 <__lshift+0x52>
 80060d8:	3904      	subs	r1, #4
 80060da:	f853 2b04 	ldr.w	r2, [r3], #4
 80060de:	f841 2f04 	str.w	r2, [r1, #4]!
 80060e2:	459c      	cmp	ip, r3
 80060e4:	d8f9      	bhi.n	80060da <__lshift+0x9a>
 80060e6:	e7e4      	b.n	80060b2 <__lshift+0x72>

080060e8 <__mcmp>:
 80060e8:	6903      	ldr	r3, [r0, #16]
 80060ea:	690a      	ldr	r2, [r1, #16]
 80060ec:	1a9b      	subs	r3, r3, r2
 80060ee:	b530      	push	{r4, r5, lr}
 80060f0:	d10c      	bne.n	800610c <__mcmp+0x24>
 80060f2:	0092      	lsls	r2, r2, #2
 80060f4:	3014      	adds	r0, #20
 80060f6:	3114      	adds	r1, #20
 80060f8:	1884      	adds	r4, r0, r2
 80060fa:	4411      	add	r1, r2
 80060fc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006100:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006104:	4295      	cmp	r5, r2
 8006106:	d003      	beq.n	8006110 <__mcmp+0x28>
 8006108:	d305      	bcc.n	8006116 <__mcmp+0x2e>
 800610a:	2301      	movs	r3, #1
 800610c:	4618      	mov	r0, r3
 800610e:	bd30      	pop	{r4, r5, pc}
 8006110:	42a0      	cmp	r0, r4
 8006112:	d3f3      	bcc.n	80060fc <__mcmp+0x14>
 8006114:	e7fa      	b.n	800610c <__mcmp+0x24>
 8006116:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800611a:	e7f7      	b.n	800610c <__mcmp+0x24>

0800611c <__mdiff>:
 800611c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006120:	460d      	mov	r5, r1
 8006122:	4607      	mov	r7, r0
 8006124:	4611      	mov	r1, r2
 8006126:	4628      	mov	r0, r5
 8006128:	4614      	mov	r4, r2
 800612a:	f7ff ffdd 	bl	80060e8 <__mcmp>
 800612e:	1e06      	subs	r6, r0, #0
 8006130:	d108      	bne.n	8006144 <__mdiff+0x28>
 8006132:	4631      	mov	r1, r6
 8006134:	4638      	mov	r0, r7
 8006136:	f7ff fdc2 	bl	8005cbe <_Balloc>
 800613a:	2301      	movs	r3, #1
 800613c:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8006140:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006144:	bfa4      	itt	ge
 8006146:	4623      	movge	r3, r4
 8006148:	462c      	movge	r4, r5
 800614a:	4638      	mov	r0, r7
 800614c:	6861      	ldr	r1, [r4, #4]
 800614e:	bfa6      	itte	ge
 8006150:	461d      	movge	r5, r3
 8006152:	2600      	movge	r6, #0
 8006154:	2601      	movlt	r6, #1
 8006156:	f7ff fdb2 	bl	8005cbe <_Balloc>
 800615a:	692b      	ldr	r3, [r5, #16]
 800615c:	60c6      	str	r6, [r0, #12]
 800615e:	6926      	ldr	r6, [r4, #16]
 8006160:	f105 0914 	add.w	r9, r5, #20
 8006164:	f104 0214 	add.w	r2, r4, #20
 8006168:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800616c:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8006170:	f100 0514 	add.w	r5, r0, #20
 8006174:	f04f 0e00 	mov.w	lr, #0
 8006178:	f852 ab04 	ldr.w	sl, [r2], #4
 800617c:	f859 4b04 	ldr.w	r4, [r9], #4
 8006180:	fa1e f18a 	uxtah	r1, lr, sl
 8006184:	b2a3      	uxth	r3, r4
 8006186:	1ac9      	subs	r1, r1, r3
 8006188:	0c23      	lsrs	r3, r4, #16
 800618a:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800618e:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8006192:	b289      	uxth	r1, r1
 8006194:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8006198:	45c8      	cmp	r8, r9
 800619a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800619e:	4694      	mov	ip, r2
 80061a0:	f845 3b04 	str.w	r3, [r5], #4
 80061a4:	d8e8      	bhi.n	8006178 <__mdiff+0x5c>
 80061a6:	45bc      	cmp	ip, r7
 80061a8:	d304      	bcc.n	80061b4 <__mdiff+0x98>
 80061aa:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 80061ae:	b183      	cbz	r3, 80061d2 <__mdiff+0xb6>
 80061b0:	6106      	str	r6, [r0, #16]
 80061b2:	e7c5      	b.n	8006140 <__mdiff+0x24>
 80061b4:	f85c 1b04 	ldr.w	r1, [ip], #4
 80061b8:	fa1e f381 	uxtah	r3, lr, r1
 80061bc:	141a      	asrs	r2, r3, #16
 80061be:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80061c2:	b29b      	uxth	r3, r3
 80061c4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80061c8:	ea4f 4e22 	mov.w	lr, r2, asr #16
 80061cc:	f845 3b04 	str.w	r3, [r5], #4
 80061d0:	e7e9      	b.n	80061a6 <__mdiff+0x8a>
 80061d2:	3e01      	subs	r6, #1
 80061d4:	e7e9      	b.n	80061aa <__mdiff+0x8e>

080061d6 <__d2b>:
 80061d6:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80061da:	460e      	mov	r6, r1
 80061dc:	2101      	movs	r1, #1
 80061de:	ec59 8b10 	vmov	r8, r9, d0
 80061e2:	4615      	mov	r5, r2
 80061e4:	f7ff fd6b 	bl	8005cbe <_Balloc>
 80061e8:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80061ec:	4607      	mov	r7, r0
 80061ee:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80061f2:	bb34      	cbnz	r4, 8006242 <__d2b+0x6c>
 80061f4:	9301      	str	r3, [sp, #4]
 80061f6:	f1b8 0300 	subs.w	r3, r8, #0
 80061fa:	d027      	beq.n	800624c <__d2b+0x76>
 80061fc:	a802      	add	r0, sp, #8
 80061fe:	f840 3d08 	str.w	r3, [r0, #-8]!
 8006202:	f7ff fe01 	bl	8005e08 <__lo0bits>
 8006206:	9900      	ldr	r1, [sp, #0]
 8006208:	b1f0      	cbz	r0, 8006248 <__d2b+0x72>
 800620a:	9a01      	ldr	r2, [sp, #4]
 800620c:	f1c0 0320 	rsb	r3, r0, #32
 8006210:	fa02 f303 	lsl.w	r3, r2, r3
 8006214:	430b      	orrs	r3, r1
 8006216:	40c2      	lsrs	r2, r0
 8006218:	617b      	str	r3, [r7, #20]
 800621a:	9201      	str	r2, [sp, #4]
 800621c:	9b01      	ldr	r3, [sp, #4]
 800621e:	61bb      	str	r3, [r7, #24]
 8006220:	2b00      	cmp	r3, #0
 8006222:	bf14      	ite	ne
 8006224:	2102      	movne	r1, #2
 8006226:	2101      	moveq	r1, #1
 8006228:	6139      	str	r1, [r7, #16]
 800622a:	b1c4      	cbz	r4, 800625e <__d2b+0x88>
 800622c:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8006230:	4404      	add	r4, r0
 8006232:	6034      	str	r4, [r6, #0]
 8006234:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006238:	6028      	str	r0, [r5, #0]
 800623a:	4638      	mov	r0, r7
 800623c:	b003      	add	sp, #12
 800623e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006242:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006246:	e7d5      	b.n	80061f4 <__d2b+0x1e>
 8006248:	6179      	str	r1, [r7, #20]
 800624a:	e7e7      	b.n	800621c <__d2b+0x46>
 800624c:	a801      	add	r0, sp, #4
 800624e:	f7ff fddb 	bl	8005e08 <__lo0bits>
 8006252:	9b01      	ldr	r3, [sp, #4]
 8006254:	617b      	str	r3, [r7, #20]
 8006256:	2101      	movs	r1, #1
 8006258:	6139      	str	r1, [r7, #16]
 800625a:	3020      	adds	r0, #32
 800625c:	e7e5      	b.n	800622a <__d2b+0x54>
 800625e:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8006262:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006266:	6030      	str	r0, [r6, #0]
 8006268:	6918      	ldr	r0, [r3, #16]
 800626a:	f7ff fdae 	bl	8005dca <__hi0bits>
 800626e:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8006272:	e7e1      	b.n	8006238 <__d2b+0x62>

08006274 <_calloc_r>:
 8006274:	b538      	push	{r3, r4, r5, lr}
 8006276:	fb02 f401 	mul.w	r4, r2, r1
 800627a:	4621      	mov	r1, r4
 800627c:	f000 f856 	bl	800632c <_malloc_r>
 8006280:	4605      	mov	r5, r0
 8006282:	b118      	cbz	r0, 800628c <_calloc_r+0x18>
 8006284:	4622      	mov	r2, r4
 8006286:	2100      	movs	r1, #0
 8006288:	f7fe f96e 	bl	8004568 <memset>
 800628c:	4628      	mov	r0, r5
 800628e:	bd38      	pop	{r3, r4, r5, pc}

08006290 <_free_r>:
 8006290:	b538      	push	{r3, r4, r5, lr}
 8006292:	4605      	mov	r5, r0
 8006294:	2900      	cmp	r1, #0
 8006296:	d045      	beq.n	8006324 <_free_r+0x94>
 8006298:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800629c:	1f0c      	subs	r4, r1, #4
 800629e:	2b00      	cmp	r3, #0
 80062a0:	bfb8      	it	lt
 80062a2:	18e4      	addlt	r4, r4, r3
 80062a4:	f000 fc4a 	bl	8006b3c <__malloc_lock>
 80062a8:	4a1f      	ldr	r2, [pc, #124]	; (8006328 <_free_r+0x98>)
 80062aa:	6813      	ldr	r3, [r2, #0]
 80062ac:	4610      	mov	r0, r2
 80062ae:	b933      	cbnz	r3, 80062be <_free_r+0x2e>
 80062b0:	6063      	str	r3, [r4, #4]
 80062b2:	6014      	str	r4, [r2, #0]
 80062b4:	4628      	mov	r0, r5
 80062b6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80062ba:	f000 bc40 	b.w	8006b3e <__malloc_unlock>
 80062be:	42a3      	cmp	r3, r4
 80062c0:	d90c      	bls.n	80062dc <_free_r+0x4c>
 80062c2:	6821      	ldr	r1, [r4, #0]
 80062c4:	1862      	adds	r2, r4, r1
 80062c6:	4293      	cmp	r3, r2
 80062c8:	bf04      	itt	eq
 80062ca:	681a      	ldreq	r2, [r3, #0]
 80062cc:	685b      	ldreq	r3, [r3, #4]
 80062ce:	6063      	str	r3, [r4, #4]
 80062d0:	bf04      	itt	eq
 80062d2:	1852      	addeq	r2, r2, r1
 80062d4:	6022      	streq	r2, [r4, #0]
 80062d6:	6004      	str	r4, [r0, #0]
 80062d8:	e7ec      	b.n	80062b4 <_free_r+0x24>
 80062da:	4613      	mov	r3, r2
 80062dc:	685a      	ldr	r2, [r3, #4]
 80062de:	b10a      	cbz	r2, 80062e4 <_free_r+0x54>
 80062e0:	42a2      	cmp	r2, r4
 80062e2:	d9fa      	bls.n	80062da <_free_r+0x4a>
 80062e4:	6819      	ldr	r1, [r3, #0]
 80062e6:	1858      	adds	r0, r3, r1
 80062e8:	42a0      	cmp	r0, r4
 80062ea:	d10b      	bne.n	8006304 <_free_r+0x74>
 80062ec:	6820      	ldr	r0, [r4, #0]
 80062ee:	4401      	add	r1, r0
 80062f0:	1858      	adds	r0, r3, r1
 80062f2:	4282      	cmp	r2, r0
 80062f4:	6019      	str	r1, [r3, #0]
 80062f6:	d1dd      	bne.n	80062b4 <_free_r+0x24>
 80062f8:	6810      	ldr	r0, [r2, #0]
 80062fa:	6852      	ldr	r2, [r2, #4]
 80062fc:	605a      	str	r2, [r3, #4]
 80062fe:	4401      	add	r1, r0
 8006300:	6019      	str	r1, [r3, #0]
 8006302:	e7d7      	b.n	80062b4 <_free_r+0x24>
 8006304:	d902      	bls.n	800630c <_free_r+0x7c>
 8006306:	230c      	movs	r3, #12
 8006308:	602b      	str	r3, [r5, #0]
 800630a:	e7d3      	b.n	80062b4 <_free_r+0x24>
 800630c:	6820      	ldr	r0, [r4, #0]
 800630e:	1821      	adds	r1, r4, r0
 8006310:	428a      	cmp	r2, r1
 8006312:	bf04      	itt	eq
 8006314:	6811      	ldreq	r1, [r2, #0]
 8006316:	6852      	ldreq	r2, [r2, #4]
 8006318:	6062      	str	r2, [r4, #4]
 800631a:	bf04      	itt	eq
 800631c:	1809      	addeq	r1, r1, r0
 800631e:	6021      	streq	r1, [r4, #0]
 8006320:	605c      	str	r4, [r3, #4]
 8006322:	e7c7      	b.n	80062b4 <_free_r+0x24>
 8006324:	bd38      	pop	{r3, r4, r5, pc}
 8006326:	bf00      	nop
 8006328:	200001f8 	.word	0x200001f8

0800632c <_malloc_r>:
 800632c:	b570      	push	{r4, r5, r6, lr}
 800632e:	1ccd      	adds	r5, r1, #3
 8006330:	f025 0503 	bic.w	r5, r5, #3
 8006334:	3508      	adds	r5, #8
 8006336:	2d0c      	cmp	r5, #12
 8006338:	bf38      	it	cc
 800633a:	250c      	movcc	r5, #12
 800633c:	2d00      	cmp	r5, #0
 800633e:	4606      	mov	r6, r0
 8006340:	db01      	blt.n	8006346 <_malloc_r+0x1a>
 8006342:	42a9      	cmp	r1, r5
 8006344:	d903      	bls.n	800634e <_malloc_r+0x22>
 8006346:	230c      	movs	r3, #12
 8006348:	6033      	str	r3, [r6, #0]
 800634a:	2000      	movs	r0, #0
 800634c:	bd70      	pop	{r4, r5, r6, pc}
 800634e:	f000 fbf5 	bl	8006b3c <__malloc_lock>
 8006352:	4a21      	ldr	r2, [pc, #132]	; (80063d8 <_malloc_r+0xac>)
 8006354:	6814      	ldr	r4, [r2, #0]
 8006356:	4621      	mov	r1, r4
 8006358:	b991      	cbnz	r1, 8006380 <_malloc_r+0x54>
 800635a:	4c20      	ldr	r4, [pc, #128]	; (80063dc <_malloc_r+0xb0>)
 800635c:	6823      	ldr	r3, [r4, #0]
 800635e:	b91b      	cbnz	r3, 8006368 <_malloc_r+0x3c>
 8006360:	4630      	mov	r0, r6
 8006362:	f000 f97d 	bl	8006660 <_sbrk_r>
 8006366:	6020      	str	r0, [r4, #0]
 8006368:	4629      	mov	r1, r5
 800636a:	4630      	mov	r0, r6
 800636c:	f000 f978 	bl	8006660 <_sbrk_r>
 8006370:	1c43      	adds	r3, r0, #1
 8006372:	d124      	bne.n	80063be <_malloc_r+0x92>
 8006374:	230c      	movs	r3, #12
 8006376:	6033      	str	r3, [r6, #0]
 8006378:	4630      	mov	r0, r6
 800637a:	f000 fbe0 	bl	8006b3e <__malloc_unlock>
 800637e:	e7e4      	b.n	800634a <_malloc_r+0x1e>
 8006380:	680b      	ldr	r3, [r1, #0]
 8006382:	1b5b      	subs	r3, r3, r5
 8006384:	d418      	bmi.n	80063b8 <_malloc_r+0x8c>
 8006386:	2b0b      	cmp	r3, #11
 8006388:	d90f      	bls.n	80063aa <_malloc_r+0x7e>
 800638a:	600b      	str	r3, [r1, #0]
 800638c:	50cd      	str	r5, [r1, r3]
 800638e:	18cc      	adds	r4, r1, r3
 8006390:	4630      	mov	r0, r6
 8006392:	f000 fbd4 	bl	8006b3e <__malloc_unlock>
 8006396:	f104 000b 	add.w	r0, r4, #11
 800639a:	1d23      	adds	r3, r4, #4
 800639c:	f020 0007 	bic.w	r0, r0, #7
 80063a0:	1ac3      	subs	r3, r0, r3
 80063a2:	d0d3      	beq.n	800634c <_malloc_r+0x20>
 80063a4:	425a      	negs	r2, r3
 80063a6:	50e2      	str	r2, [r4, r3]
 80063a8:	e7d0      	b.n	800634c <_malloc_r+0x20>
 80063aa:	428c      	cmp	r4, r1
 80063ac:	684b      	ldr	r3, [r1, #4]
 80063ae:	bf16      	itet	ne
 80063b0:	6063      	strne	r3, [r4, #4]
 80063b2:	6013      	streq	r3, [r2, #0]
 80063b4:	460c      	movne	r4, r1
 80063b6:	e7eb      	b.n	8006390 <_malloc_r+0x64>
 80063b8:	460c      	mov	r4, r1
 80063ba:	6849      	ldr	r1, [r1, #4]
 80063bc:	e7cc      	b.n	8006358 <_malloc_r+0x2c>
 80063be:	1cc4      	adds	r4, r0, #3
 80063c0:	f024 0403 	bic.w	r4, r4, #3
 80063c4:	42a0      	cmp	r0, r4
 80063c6:	d005      	beq.n	80063d4 <_malloc_r+0xa8>
 80063c8:	1a21      	subs	r1, r4, r0
 80063ca:	4630      	mov	r0, r6
 80063cc:	f000 f948 	bl	8006660 <_sbrk_r>
 80063d0:	3001      	adds	r0, #1
 80063d2:	d0cf      	beq.n	8006374 <_malloc_r+0x48>
 80063d4:	6025      	str	r5, [r4, #0]
 80063d6:	e7db      	b.n	8006390 <_malloc_r+0x64>
 80063d8:	200001f8 	.word	0x200001f8
 80063dc:	200001fc 	.word	0x200001fc

080063e0 <__sfputc_r>:
 80063e0:	6893      	ldr	r3, [r2, #8]
 80063e2:	3b01      	subs	r3, #1
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	b410      	push	{r4}
 80063e8:	6093      	str	r3, [r2, #8]
 80063ea:	da08      	bge.n	80063fe <__sfputc_r+0x1e>
 80063ec:	6994      	ldr	r4, [r2, #24]
 80063ee:	42a3      	cmp	r3, r4
 80063f0:	db01      	blt.n	80063f6 <__sfputc_r+0x16>
 80063f2:	290a      	cmp	r1, #10
 80063f4:	d103      	bne.n	80063fe <__sfputc_r+0x1e>
 80063f6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80063fa:	f000 b985 	b.w	8006708 <__swbuf_r>
 80063fe:	6813      	ldr	r3, [r2, #0]
 8006400:	1c58      	adds	r0, r3, #1
 8006402:	6010      	str	r0, [r2, #0]
 8006404:	7019      	strb	r1, [r3, #0]
 8006406:	4608      	mov	r0, r1
 8006408:	f85d 4b04 	ldr.w	r4, [sp], #4
 800640c:	4770      	bx	lr

0800640e <__sfputs_r>:
 800640e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006410:	4606      	mov	r6, r0
 8006412:	460f      	mov	r7, r1
 8006414:	4614      	mov	r4, r2
 8006416:	18d5      	adds	r5, r2, r3
 8006418:	42ac      	cmp	r4, r5
 800641a:	d101      	bne.n	8006420 <__sfputs_r+0x12>
 800641c:	2000      	movs	r0, #0
 800641e:	e007      	b.n	8006430 <__sfputs_r+0x22>
 8006420:	463a      	mov	r2, r7
 8006422:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006426:	4630      	mov	r0, r6
 8006428:	f7ff ffda 	bl	80063e0 <__sfputc_r>
 800642c:	1c43      	adds	r3, r0, #1
 800642e:	d1f3      	bne.n	8006418 <__sfputs_r+0xa>
 8006430:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006434 <_vfiprintf_r>:
 8006434:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006438:	460c      	mov	r4, r1
 800643a:	b09d      	sub	sp, #116	; 0x74
 800643c:	4617      	mov	r7, r2
 800643e:	461d      	mov	r5, r3
 8006440:	4606      	mov	r6, r0
 8006442:	b118      	cbz	r0, 800644c <_vfiprintf_r+0x18>
 8006444:	6983      	ldr	r3, [r0, #24]
 8006446:	b90b      	cbnz	r3, 800644c <_vfiprintf_r+0x18>
 8006448:	f7ff fb8e 	bl	8005b68 <__sinit>
 800644c:	4b7c      	ldr	r3, [pc, #496]	; (8006640 <_vfiprintf_r+0x20c>)
 800644e:	429c      	cmp	r4, r3
 8006450:	d158      	bne.n	8006504 <_vfiprintf_r+0xd0>
 8006452:	6874      	ldr	r4, [r6, #4]
 8006454:	89a3      	ldrh	r3, [r4, #12]
 8006456:	0718      	lsls	r0, r3, #28
 8006458:	d55e      	bpl.n	8006518 <_vfiprintf_r+0xe4>
 800645a:	6923      	ldr	r3, [r4, #16]
 800645c:	2b00      	cmp	r3, #0
 800645e:	d05b      	beq.n	8006518 <_vfiprintf_r+0xe4>
 8006460:	2300      	movs	r3, #0
 8006462:	9309      	str	r3, [sp, #36]	; 0x24
 8006464:	2320      	movs	r3, #32
 8006466:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800646a:	2330      	movs	r3, #48	; 0x30
 800646c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006470:	9503      	str	r5, [sp, #12]
 8006472:	f04f 0b01 	mov.w	fp, #1
 8006476:	46b8      	mov	r8, r7
 8006478:	4645      	mov	r5, r8
 800647a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800647e:	b10b      	cbz	r3, 8006484 <_vfiprintf_r+0x50>
 8006480:	2b25      	cmp	r3, #37	; 0x25
 8006482:	d154      	bne.n	800652e <_vfiprintf_r+0xfa>
 8006484:	ebb8 0a07 	subs.w	sl, r8, r7
 8006488:	d00b      	beq.n	80064a2 <_vfiprintf_r+0x6e>
 800648a:	4653      	mov	r3, sl
 800648c:	463a      	mov	r2, r7
 800648e:	4621      	mov	r1, r4
 8006490:	4630      	mov	r0, r6
 8006492:	f7ff ffbc 	bl	800640e <__sfputs_r>
 8006496:	3001      	adds	r0, #1
 8006498:	f000 80c2 	beq.w	8006620 <_vfiprintf_r+0x1ec>
 800649c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800649e:	4453      	add	r3, sl
 80064a0:	9309      	str	r3, [sp, #36]	; 0x24
 80064a2:	f898 3000 	ldrb.w	r3, [r8]
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	f000 80ba 	beq.w	8006620 <_vfiprintf_r+0x1ec>
 80064ac:	2300      	movs	r3, #0
 80064ae:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80064b2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80064b6:	9304      	str	r3, [sp, #16]
 80064b8:	9307      	str	r3, [sp, #28]
 80064ba:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80064be:	931a      	str	r3, [sp, #104]	; 0x68
 80064c0:	46a8      	mov	r8, r5
 80064c2:	2205      	movs	r2, #5
 80064c4:	f818 1b01 	ldrb.w	r1, [r8], #1
 80064c8:	485e      	ldr	r0, [pc, #376]	; (8006644 <_vfiprintf_r+0x210>)
 80064ca:	f7f9 fe91 	bl	80001f0 <memchr>
 80064ce:	9b04      	ldr	r3, [sp, #16]
 80064d0:	bb78      	cbnz	r0, 8006532 <_vfiprintf_r+0xfe>
 80064d2:	06d9      	lsls	r1, r3, #27
 80064d4:	bf44      	itt	mi
 80064d6:	2220      	movmi	r2, #32
 80064d8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80064dc:	071a      	lsls	r2, r3, #28
 80064de:	bf44      	itt	mi
 80064e0:	222b      	movmi	r2, #43	; 0x2b
 80064e2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80064e6:	782a      	ldrb	r2, [r5, #0]
 80064e8:	2a2a      	cmp	r2, #42	; 0x2a
 80064ea:	d02a      	beq.n	8006542 <_vfiprintf_r+0x10e>
 80064ec:	9a07      	ldr	r2, [sp, #28]
 80064ee:	46a8      	mov	r8, r5
 80064f0:	2000      	movs	r0, #0
 80064f2:	250a      	movs	r5, #10
 80064f4:	4641      	mov	r1, r8
 80064f6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80064fa:	3b30      	subs	r3, #48	; 0x30
 80064fc:	2b09      	cmp	r3, #9
 80064fe:	d969      	bls.n	80065d4 <_vfiprintf_r+0x1a0>
 8006500:	b360      	cbz	r0, 800655c <_vfiprintf_r+0x128>
 8006502:	e024      	b.n	800654e <_vfiprintf_r+0x11a>
 8006504:	4b50      	ldr	r3, [pc, #320]	; (8006648 <_vfiprintf_r+0x214>)
 8006506:	429c      	cmp	r4, r3
 8006508:	d101      	bne.n	800650e <_vfiprintf_r+0xda>
 800650a:	68b4      	ldr	r4, [r6, #8]
 800650c:	e7a2      	b.n	8006454 <_vfiprintf_r+0x20>
 800650e:	4b4f      	ldr	r3, [pc, #316]	; (800664c <_vfiprintf_r+0x218>)
 8006510:	429c      	cmp	r4, r3
 8006512:	bf08      	it	eq
 8006514:	68f4      	ldreq	r4, [r6, #12]
 8006516:	e79d      	b.n	8006454 <_vfiprintf_r+0x20>
 8006518:	4621      	mov	r1, r4
 800651a:	4630      	mov	r0, r6
 800651c:	f000 f958 	bl	80067d0 <__swsetup_r>
 8006520:	2800      	cmp	r0, #0
 8006522:	d09d      	beq.n	8006460 <_vfiprintf_r+0x2c>
 8006524:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006528:	b01d      	add	sp, #116	; 0x74
 800652a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800652e:	46a8      	mov	r8, r5
 8006530:	e7a2      	b.n	8006478 <_vfiprintf_r+0x44>
 8006532:	4a44      	ldr	r2, [pc, #272]	; (8006644 <_vfiprintf_r+0x210>)
 8006534:	1a80      	subs	r0, r0, r2
 8006536:	fa0b f000 	lsl.w	r0, fp, r0
 800653a:	4318      	orrs	r0, r3
 800653c:	9004      	str	r0, [sp, #16]
 800653e:	4645      	mov	r5, r8
 8006540:	e7be      	b.n	80064c0 <_vfiprintf_r+0x8c>
 8006542:	9a03      	ldr	r2, [sp, #12]
 8006544:	1d11      	adds	r1, r2, #4
 8006546:	6812      	ldr	r2, [r2, #0]
 8006548:	9103      	str	r1, [sp, #12]
 800654a:	2a00      	cmp	r2, #0
 800654c:	db01      	blt.n	8006552 <_vfiprintf_r+0x11e>
 800654e:	9207      	str	r2, [sp, #28]
 8006550:	e004      	b.n	800655c <_vfiprintf_r+0x128>
 8006552:	4252      	negs	r2, r2
 8006554:	f043 0302 	orr.w	r3, r3, #2
 8006558:	9207      	str	r2, [sp, #28]
 800655a:	9304      	str	r3, [sp, #16]
 800655c:	f898 3000 	ldrb.w	r3, [r8]
 8006560:	2b2e      	cmp	r3, #46	; 0x2e
 8006562:	d10e      	bne.n	8006582 <_vfiprintf_r+0x14e>
 8006564:	f898 3001 	ldrb.w	r3, [r8, #1]
 8006568:	2b2a      	cmp	r3, #42	; 0x2a
 800656a:	d138      	bne.n	80065de <_vfiprintf_r+0x1aa>
 800656c:	9b03      	ldr	r3, [sp, #12]
 800656e:	1d1a      	adds	r2, r3, #4
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	9203      	str	r2, [sp, #12]
 8006574:	2b00      	cmp	r3, #0
 8006576:	bfb8      	it	lt
 8006578:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800657c:	f108 0802 	add.w	r8, r8, #2
 8006580:	9305      	str	r3, [sp, #20]
 8006582:	4d33      	ldr	r5, [pc, #204]	; (8006650 <_vfiprintf_r+0x21c>)
 8006584:	f898 1000 	ldrb.w	r1, [r8]
 8006588:	2203      	movs	r2, #3
 800658a:	4628      	mov	r0, r5
 800658c:	f7f9 fe30 	bl	80001f0 <memchr>
 8006590:	b140      	cbz	r0, 80065a4 <_vfiprintf_r+0x170>
 8006592:	2340      	movs	r3, #64	; 0x40
 8006594:	1b40      	subs	r0, r0, r5
 8006596:	fa03 f000 	lsl.w	r0, r3, r0
 800659a:	9b04      	ldr	r3, [sp, #16]
 800659c:	4303      	orrs	r3, r0
 800659e:	f108 0801 	add.w	r8, r8, #1
 80065a2:	9304      	str	r3, [sp, #16]
 80065a4:	f898 1000 	ldrb.w	r1, [r8]
 80065a8:	482a      	ldr	r0, [pc, #168]	; (8006654 <_vfiprintf_r+0x220>)
 80065aa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80065ae:	2206      	movs	r2, #6
 80065b0:	f108 0701 	add.w	r7, r8, #1
 80065b4:	f7f9 fe1c 	bl	80001f0 <memchr>
 80065b8:	2800      	cmp	r0, #0
 80065ba:	d037      	beq.n	800662c <_vfiprintf_r+0x1f8>
 80065bc:	4b26      	ldr	r3, [pc, #152]	; (8006658 <_vfiprintf_r+0x224>)
 80065be:	bb1b      	cbnz	r3, 8006608 <_vfiprintf_r+0x1d4>
 80065c0:	9b03      	ldr	r3, [sp, #12]
 80065c2:	3307      	adds	r3, #7
 80065c4:	f023 0307 	bic.w	r3, r3, #7
 80065c8:	3308      	adds	r3, #8
 80065ca:	9303      	str	r3, [sp, #12]
 80065cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80065ce:	444b      	add	r3, r9
 80065d0:	9309      	str	r3, [sp, #36]	; 0x24
 80065d2:	e750      	b.n	8006476 <_vfiprintf_r+0x42>
 80065d4:	fb05 3202 	mla	r2, r5, r2, r3
 80065d8:	2001      	movs	r0, #1
 80065da:	4688      	mov	r8, r1
 80065dc:	e78a      	b.n	80064f4 <_vfiprintf_r+0xc0>
 80065de:	2300      	movs	r3, #0
 80065e0:	f108 0801 	add.w	r8, r8, #1
 80065e4:	9305      	str	r3, [sp, #20]
 80065e6:	4619      	mov	r1, r3
 80065e8:	250a      	movs	r5, #10
 80065ea:	4640      	mov	r0, r8
 80065ec:	f810 2b01 	ldrb.w	r2, [r0], #1
 80065f0:	3a30      	subs	r2, #48	; 0x30
 80065f2:	2a09      	cmp	r2, #9
 80065f4:	d903      	bls.n	80065fe <_vfiprintf_r+0x1ca>
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d0c3      	beq.n	8006582 <_vfiprintf_r+0x14e>
 80065fa:	9105      	str	r1, [sp, #20]
 80065fc:	e7c1      	b.n	8006582 <_vfiprintf_r+0x14e>
 80065fe:	fb05 2101 	mla	r1, r5, r1, r2
 8006602:	2301      	movs	r3, #1
 8006604:	4680      	mov	r8, r0
 8006606:	e7f0      	b.n	80065ea <_vfiprintf_r+0x1b6>
 8006608:	ab03      	add	r3, sp, #12
 800660a:	9300      	str	r3, [sp, #0]
 800660c:	4622      	mov	r2, r4
 800660e:	4b13      	ldr	r3, [pc, #76]	; (800665c <_vfiprintf_r+0x228>)
 8006610:	a904      	add	r1, sp, #16
 8006612:	4630      	mov	r0, r6
 8006614:	f7fe f844 	bl	80046a0 <_printf_float>
 8006618:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 800661c:	4681      	mov	r9, r0
 800661e:	d1d5      	bne.n	80065cc <_vfiprintf_r+0x198>
 8006620:	89a3      	ldrh	r3, [r4, #12]
 8006622:	065b      	lsls	r3, r3, #25
 8006624:	f53f af7e 	bmi.w	8006524 <_vfiprintf_r+0xf0>
 8006628:	9809      	ldr	r0, [sp, #36]	; 0x24
 800662a:	e77d      	b.n	8006528 <_vfiprintf_r+0xf4>
 800662c:	ab03      	add	r3, sp, #12
 800662e:	9300      	str	r3, [sp, #0]
 8006630:	4622      	mov	r2, r4
 8006632:	4b0a      	ldr	r3, [pc, #40]	; (800665c <_vfiprintf_r+0x228>)
 8006634:	a904      	add	r1, sp, #16
 8006636:	4630      	mov	r0, r6
 8006638:	f7fe fae8 	bl	8004c0c <_printf_i>
 800663c:	e7ec      	b.n	8006618 <_vfiprintf_r+0x1e4>
 800663e:	bf00      	nop
 8006640:	08006e88 	.word	0x08006e88
 8006644:	08006fc4 	.word	0x08006fc4
 8006648:	08006ea8 	.word	0x08006ea8
 800664c:	08006e68 	.word	0x08006e68
 8006650:	08006fca 	.word	0x08006fca
 8006654:	08006fce 	.word	0x08006fce
 8006658:	080046a1 	.word	0x080046a1
 800665c:	0800640f 	.word	0x0800640f

08006660 <_sbrk_r>:
 8006660:	b538      	push	{r3, r4, r5, lr}
 8006662:	4c06      	ldr	r4, [pc, #24]	; (800667c <_sbrk_r+0x1c>)
 8006664:	2300      	movs	r3, #0
 8006666:	4605      	mov	r5, r0
 8006668:	4608      	mov	r0, r1
 800666a:	6023      	str	r3, [r4, #0]
 800666c:	f7fc ff92 	bl	8003594 <_sbrk>
 8006670:	1c43      	adds	r3, r0, #1
 8006672:	d102      	bne.n	800667a <_sbrk_r+0x1a>
 8006674:	6823      	ldr	r3, [r4, #0]
 8006676:	b103      	cbz	r3, 800667a <_sbrk_r+0x1a>
 8006678:	602b      	str	r3, [r5, #0]
 800667a:	bd38      	pop	{r3, r4, r5, pc}
 800667c:	20000200 	.word	0x20000200

08006680 <__sread>:
 8006680:	b510      	push	{r4, lr}
 8006682:	460c      	mov	r4, r1
 8006684:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006688:	f000 fa5a 	bl	8006b40 <_read_r>
 800668c:	2800      	cmp	r0, #0
 800668e:	bfab      	itete	ge
 8006690:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006692:	89a3      	ldrhlt	r3, [r4, #12]
 8006694:	181b      	addge	r3, r3, r0
 8006696:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800669a:	bfac      	ite	ge
 800669c:	6563      	strge	r3, [r4, #84]	; 0x54
 800669e:	81a3      	strhlt	r3, [r4, #12]
 80066a0:	bd10      	pop	{r4, pc}

080066a2 <__swrite>:
 80066a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80066a6:	461f      	mov	r7, r3
 80066a8:	898b      	ldrh	r3, [r1, #12]
 80066aa:	05db      	lsls	r3, r3, #23
 80066ac:	4605      	mov	r5, r0
 80066ae:	460c      	mov	r4, r1
 80066b0:	4616      	mov	r6, r2
 80066b2:	d505      	bpl.n	80066c0 <__swrite+0x1e>
 80066b4:	2302      	movs	r3, #2
 80066b6:	2200      	movs	r2, #0
 80066b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80066bc:	f000 f9b6 	bl	8006a2c <_lseek_r>
 80066c0:	89a3      	ldrh	r3, [r4, #12]
 80066c2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80066c6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80066ca:	81a3      	strh	r3, [r4, #12]
 80066cc:	4632      	mov	r2, r6
 80066ce:	463b      	mov	r3, r7
 80066d0:	4628      	mov	r0, r5
 80066d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80066d6:	f000 b869 	b.w	80067ac <_write_r>

080066da <__sseek>:
 80066da:	b510      	push	{r4, lr}
 80066dc:	460c      	mov	r4, r1
 80066de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80066e2:	f000 f9a3 	bl	8006a2c <_lseek_r>
 80066e6:	1c43      	adds	r3, r0, #1
 80066e8:	89a3      	ldrh	r3, [r4, #12]
 80066ea:	bf15      	itete	ne
 80066ec:	6560      	strne	r0, [r4, #84]	; 0x54
 80066ee:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80066f2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80066f6:	81a3      	strheq	r3, [r4, #12]
 80066f8:	bf18      	it	ne
 80066fa:	81a3      	strhne	r3, [r4, #12]
 80066fc:	bd10      	pop	{r4, pc}

080066fe <__sclose>:
 80066fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006702:	f000 b8d3 	b.w	80068ac <_close_r>
	...

08006708 <__swbuf_r>:
 8006708:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800670a:	460e      	mov	r6, r1
 800670c:	4614      	mov	r4, r2
 800670e:	4605      	mov	r5, r0
 8006710:	b118      	cbz	r0, 800671a <__swbuf_r+0x12>
 8006712:	6983      	ldr	r3, [r0, #24]
 8006714:	b90b      	cbnz	r3, 800671a <__swbuf_r+0x12>
 8006716:	f7ff fa27 	bl	8005b68 <__sinit>
 800671a:	4b21      	ldr	r3, [pc, #132]	; (80067a0 <__swbuf_r+0x98>)
 800671c:	429c      	cmp	r4, r3
 800671e:	d12a      	bne.n	8006776 <__swbuf_r+0x6e>
 8006720:	686c      	ldr	r4, [r5, #4]
 8006722:	69a3      	ldr	r3, [r4, #24]
 8006724:	60a3      	str	r3, [r4, #8]
 8006726:	89a3      	ldrh	r3, [r4, #12]
 8006728:	071a      	lsls	r2, r3, #28
 800672a:	d52e      	bpl.n	800678a <__swbuf_r+0x82>
 800672c:	6923      	ldr	r3, [r4, #16]
 800672e:	b363      	cbz	r3, 800678a <__swbuf_r+0x82>
 8006730:	6923      	ldr	r3, [r4, #16]
 8006732:	6820      	ldr	r0, [r4, #0]
 8006734:	1ac0      	subs	r0, r0, r3
 8006736:	6963      	ldr	r3, [r4, #20]
 8006738:	b2f6      	uxtb	r6, r6
 800673a:	4283      	cmp	r3, r0
 800673c:	4637      	mov	r7, r6
 800673e:	dc04      	bgt.n	800674a <__swbuf_r+0x42>
 8006740:	4621      	mov	r1, r4
 8006742:	4628      	mov	r0, r5
 8006744:	f000 f948 	bl	80069d8 <_fflush_r>
 8006748:	bb28      	cbnz	r0, 8006796 <__swbuf_r+0x8e>
 800674a:	68a3      	ldr	r3, [r4, #8]
 800674c:	3b01      	subs	r3, #1
 800674e:	60a3      	str	r3, [r4, #8]
 8006750:	6823      	ldr	r3, [r4, #0]
 8006752:	1c5a      	adds	r2, r3, #1
 8006754:	6022      	str	r2, [r4, #0]
 8006756:	701e      	strb	r6, [r3, #0]
 8006758:	6963      	ldr	r3, [r4, #20]
 800675a:	3001      	adds	r0, #1
 800675c:	4283      	cmp	r3, r0
 800675e:	d004      	beq.n	800676a <__swbuf_r+0x62>
 8006760:	89a3      	ldrh	r3, [r4, #12]
 8006762:	07db      	lsls	r3, r3, #31
 8006764:	d519      	bpl.n	800679a <__swbuf_r+0x92>
 8006766:	2e0a      	cmp	r6, #10
 8006768:	d117      	bne.n	800679a <__swbuf_r+0x92>
 800676a:	4621      	mov	r1, r4
 800676c:	4628      	mov	r0, r5
 800676e:	f000 f933 	bl	80069d8 <_fflush_r>
 8006772:	b190      	cbz	r0, 800679a <__swbuf_r+0x92>
 8006774:	e00f      	b.n	8006796 <__swbuf_r+0x8e>
 8006776:	4b0b      	ldr	r3, [pc, #44]	; (80067a4 <__swbuf_r+0x9c>)
 8006778:	429c      	cmp	r4, r3
 800677a:	d101      	bne.n	8006780 <__swbuf_r+0x78>
 800677c:	68ac      	ldr	r4, [r5, #8]
 800677e:	e7d0      	b.n	8006722 <__swbuf_r+0x1a>
 8006780:	4b09      	ldr	r3, [pc, #36]	; (80067a8 <__swbuf_r+0xa0>)
 8006782:	429c      	cmp	r4, r3
 8006784:	bf08      	it	eq
 8006786:	68ec      	ldreq	r4, [r5, #12]
 8006788:	e7cb      	b.n	8006722 <__swbuf_r+0x1a>
 800678a:	4621      	mov	r1, r4
 800678c:	4628      	mov	r0, r5
 800678e:	f000 f81f 	bl	80067d0 <__swsetup_r>
 8006792:	2800      	cmp	r0, #0
 8006794:	d0cc      	beq.n	8006730 <__swbuf_r+0x28>
 8006796:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800679a:	4638      	mov	r0, r7
 800679c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800679e:	bf00      	nop
 80067a0:	08006e88 	.word	0x08006e88
 80067a4:	08006ea8 	.word	0x08006ea8
 80067a8:	08006e68 	.word	0x08006e68

080067ac <_write_r>:
 80067ac:	b538      	push	{r3, r4, r5, lr}
 80067ae:	4c07      	ldr	r4, [pc, #28]	; (80067cc <_write_r+0x20>)
 80067b0:	4605      	mov	r5, r0
 80067b2:	4608      	mov	r0, r1
 80067b4:	4611      	mov	r1, r2
 80067b6:	2200      	movs	r2, #0
 80067b8:	6022      	str	r2, [r4, #0]
 80067ba:	461a      	mov	r2, r3
 80067bc:	f7fc fe9a 	bl	80034f4 <_write>
 80067c0:	1c43      	adds	r3, r0, #1
 80067c2:	d102      	bne.n	80067ca <_write_r+0x1e>
 80067c4:	6823      	ldr	r3, [r4, #0]
 80067c6:	b103      	cbz	r3, 80067ca <_write_r+0x1e>
 80067c8:	602b      	str	r3, [r5, #0]
 80067ca:	bd38      	pop	{r3, r4, r5, pc}
 80067cc:	20000200 	.word	0x20000200

080067d0 <__swsetup_r>:
 80067d0:	4b32      	ldr	r3, [pc, #200]	; (800689c <__swsetup_r+0xcc>)
 80067d2:	b570      	push	{r4, r5, r6, lr}
 80067d4:	681d      	ldr	r5, [r3, #0]
 80067d6:	4606      	mov	r6, r0
 80067d8:	460c      	mov	r4, r1
 80067da:	b125      	cbz	r5, 80067e6 <__swsetup_r+0x16>
 80067dc:	69ab      	ldr	r3, [r5, #24]
 80067de:	b913      	cbnz	r3, 80067e6 <__swsetup_r+0x16>
 80067e0:	4628      	mov	r0, r5
 80067e2:	f7ff f9c1 	bl	8005b68 <__sinit>
 80067e6:	4b2e      	ldr	r3, [pc, #184]	; (80068a0 <__swsetup_r+0xd0>)
 80067e8:	429c      	cmp	r4, r3
 80067ea:	d10f      	bne.n	800680c <__swsetup_r+0x3c>
 80067ec:	686c      	ldr	r4, [r5, #4]
 80067ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80067f2:	b29a      	uxth	r2, r3
 80067f4:	0715      	lsls	r5, r2, #28
 80067f6:	d42c      	bmi.n	8006852 <__swsetup_r+0x82>
 80067f8:	06d0      	lsls	r0, r2, #27
 80067fa:	d411      	bmi.n	8006820 <__swsetup_r+0x50>
 80067fc:	2209      	movs	r2, #9
 80067fe:	6032      	str	r2, [r6, #0]
 8006800:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006804:	81a3      	strh	r3, [r4, #12]
 8006806:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800680a:	e03e      	b.n	800688a <__swsetup_r+0xba>
 800680c:	4b25      	ldr	r3, [pc, #148]	; (80068a4 <__swsetup_r+0xd4>)
 800680e:	429c      	cmp	r4, r3
 8006810:	d101      	bne.n	8006816 <__swsetup_r+0x46>
 8006812:	68ac      	ldr	r4, [r5, #8]
 8006814:	e7eb      	b.n	80067ee <__swsetup_r+0x1e>
 8006816:	4b24      	ldr	r3, [pc, #144]	; (80068a8 <__swsetup_r+0xd8>)
 8006818:	429c      	cmp	r4, r3
 800681a:	bf08      	it	eq
 800681c:	68ec      	ldreq	r4, [r5, #12]
 800681e:	e7e6      	b.n	80067ee <__swsetup_r+0x1e>
 8006820:	0751      	lsls	r1, r2, #29
 8006822:	d512      	bpl.n	800684a <__swsetup_r+0x7a>
 8006824:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006826:	b141      	cbz	r1, 800683a <__swsetup_r+0x6a>
 8006828:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800682c:	4299      	cmp	r1, r3
 800682e:	d002      	beq.n	8006836 <__swsetup_r+0x66>
 8006830:	4630      	mov	r0, r6
 8006832:	f7ff fd2d 	bl	8006290 <_free_r>
 8006836:	2300      	movs	r3, #0
 8006838:	6363      	str	r3, [r4, #52]	; 0x34
 800683a:	89a3      	ldrh	r3, [r4, #12]
 800683c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006840:	81a3      	strh	r3, [r4, #12]
 8006842:	2300      	movs	r3, #0
 8006844:	6063      	str	r3, [r4, #4]
 8006846:	6923      	ldr	r3, [r4, #16]
 8006848:	6023      	str	r3, [r4, #0]
 800684a:	89a3      	ldrh	r3, [r4, #12]
 800684c:	f043 0308 	orr.w	r3, r3, #8
 8006850:	81a3      	strh	r3, [r4, #12]
 8006852:	6923      	ldr	r3, [r4, #16]
 8006854:	b94b      	cbnz	r3, 800686a <__swsetup_r+0x9a>
 8006856:	89a3      	ldrh	r3, [r4, #12]
 8006858:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800685c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006860:	d003      	beq.n	800686a <__swsetup_r+0x9a>
 8006862:	4621      	mov	r1, r4
 8006864:	4630      	mov	r0, r6
 8006866:	f000 f917 	bl	8006a98 <__smakebuf_r>
 800686a:	89a2      	ldrh	r2, [r4, #12]
 800686c:	f012 0301 	ands.w	r3, r2, #1
 8006870:	d00c      	beq.n	800688c <__swsetup_r+0xbc>
 8006872:	2300      	movs	r3, #0
 8006874:	60a3      	str	r3, [r4, #8]
 8006876:	6963      	ldr	r3, [r4, #20]
 8006878:	425b      	negs	r3, r3
 800687a:	61a3      	str	r3, [r4, #24]
 800687c:	6923      	ldr	r3, [r4, #16]
 800687e:	b953      	cbnz	r3, 8006896 <__swsetup_r+0xc6>
 8006880:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006884:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8006888:	d1ba      	bne.n	8006800 <__swsetup_r+0x30>
 800688a:	bd70      	pop	{r4, r5, r6, pc}
 800688c:	0792      	lsls	r2, r2, #30
 800688e:	bf58      	it	pl
 8006890:	6963      	ldrpl	r3, [r4, #20]
 8006892:	60a3      	str	r3, [r4, #8]
 8006894:	e7f2      	b.n	800687c <__swsetup_r+0xac>
 8006896:	2000      	movs	r0, #0
 8006898:	e7f7      	b.n	800688a <__swsetup_r+0xba>
 800689a:	bf00      	nop
 800689c:	20000004 	.word	0x20000004
 80068a0:	08006e88 	.word	0x08006e88
 80068a4:	08006ea8 	.word	0x08006ea8
 80068a8:	08006e68 	.word	0x08006e68

080068ac <_close_r>:
 80068ac:	b538      	push	{r3, r4, r5, lr}
 80068ae:	4c06      	ldr	r4, [pc, #24]	; (80068c8 <_close_r+0x1c>)
 80068b0:	2300      	movs	r3, #0
 80068b2:	4605      	mov	r5, r0
 80068b4:	4608      	mov	r0, r1
 80068b6:	6023      	str	r3, [r4, #0]
 80068b8:	f7fc fe38 	bl	800352c <_close>
 80068bc:	1c43      	adds	r3, r0, #1
 80068be:	d102      	bne.n	80068c6 <_close_r+0x1a>
 80068c0:	6823      	ldr	r3, [r4, #0]
 80068c2:	b103      	cbz	r3, 80068c6 <_close_r+0x1a>
 80068c4:	602b      	str	r3, [r5, #0]
 80068c6:	bd38      	pop	{r3, r4, r5, pc}
 80068c8:	20000200 	.word	0x20000200

080068cc <__sflush_r>:
 80068cc:	898a      	ldrh	r2, [r1, #12]
 80068ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80068d2:	4605      	mov	r5, r0
 80068d4:	0710      	lsls	r0, r2, #28
 80068d6:	460c      	mov	r4, r1
 80068d8:	d458      	bmi.n	800698c <__sflush_r+0xc0>
 80068da:	684b      	ldr	r3, [r1, #4]
 80068dc:	2b00      	cmp	r3, #0
 80068de:	dc05      	bgt.n	80068ec <__sflush_r+0x20>
 80068e0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	dc02      	bgt.n	80068ec <__sflush_r+0x20>
 80068e6:	2000      	movs	r0, #0
 80068e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80068ec:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80068ee:	2e00      	cmp	r6, #0
 80068f0:	d0f9      	beq.n	80068e6 <__sflush_r+0x1a>
 80068f2:	2300      	movs	r3, #0
 80068f4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80068f8:	682f      	ldr	r7, [r5, #0]
 80068fa:	6a21      	ldr	r1, [r4, #32]
 80068fc:	602b      	str	r3, [r5, #0]
 80068fe:	d032      	beq.n	8006966 <__sflush_r+0x9a>
 8006900:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006902:	89a3      	ldrh	r3, [r4, #12]
 8006904:	075a      	lsls	r2, r3, #29
 8006906:	d505      	bpl.n	8006914 <__sflush_r+0x48>
 8006908:	6863      	ldr	r3, [r4, #4]
 800690a:	1ac0      	subs	r0, r0, r3
 800690c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800690e:	b10b      	cbz	r3, 8006914 <__sflush_r+0x48>
 8006910:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006912:	1ac0      	subs	r0, r0, r3
 8006914:	2300      	movs	r3, #0
 8006916:	4602      	mov	r2, r0
 8006918:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800691a:	6a21      	ldr	r1, [r4, #32]
 800691c:	4628      	mov	r0, r5
 800691e:	47b0      	blx	r6
 8006920:	1c43      	adds	r3, r0, #1
 8006922:	89a3      	ldrh	r3, [r4, #12]
 8006924:	d106      	bne.n	8006934 <__sflush_r+0x68>
 8006926:	6829      	ldr	r1, [r5, #0]
 8006928:	291d      	cmp	r1, #29
 800692a:	d848      	bhi.n	80069be <__sflush_r+0xf2>
 800692c:	4a29      	ldr	r2, [pc, #164]	; (80069d4 <__sflush_r+0x108>)
 800692e:	40ca      	lsrs	r2, r1
 8006930:	07d6      	lsls	r6, r2, #31
 8006932:	d544      	bpl.n	80069be <__sflush_r+0xf2>
 8006934:	2200      	movs	r2, #0
 8006936:	6062      	str	r2, [r4, #4]
 8006938:	04d9      	lsls	r1, r3, #19
 800693a:	6922      	ldr	r2, [r4, #16]
 800693c:	6022      	str	r2, [r4, #0]
 800693e:	d504      	bpl.n	800694a <__sflush_r+0x7e>
 8006940:	1c42      	adds	r2, r0, #1
 8006942:	d101      	bne.n	8006948 <__sflush_r+0x7c>
 8006944:	682b      	ldr	r3, [r5, #0]
 8006946:	b903      	cbnz	r3, 800694a <__sflush_r+0x7e>
 8006948:	6560      	str	r0, [r4, #84]	; 0x54
 800694a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800694c:	602f      	str	r7, [r5, #0]
 800694e:	2900      	cmp	r1, #0
 8006950:	d0c9      	beq.n	80068e6 <__sflush_r+0x1a>
 8006952:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006956:	4299      	cmp	r1, r3
 8006958:	d002      	beq.n	8006960 <__sflush_r+0x94>
 800695a:	4628      	mov	r0, r5
 800695c:	f7ff fc98 	bl	8006290 <_free_r>
 8006960:	2000      	movs	r0, #0
 8006962:	6360      	str	r0, [r4, #52]	; 0x34
 8006964:	e7c0      	b.n	80068e8 <__sflush_r+0x1c>
 8006966:	2301      	movs	r3, #1
 8006968:	4628      	mov	r0, r5
 800696a:	47b0      	blx	r6
 800696c:	1c41      	adds	r1, r0, #1
 800696e:	d1c8      	bne.n	8006902 <__sflush_r+0x36>
 8006970:	682b      	ldr	r3, [r5, #0]
 8006972:	2b00      	cmp	r3, #0
 8006974:	d0c5      	beq.n	8006902 <__sflush_r+0x36>
 8006976:	2b1d      	cmp	r3, #29
 8006978:	d001      	beq.n	800697e <__sflush_r+0xb2>
 800697a:	2b16      	cmp	r3, #22
 800697c:	d101      	bne.n	8006982 <__sflush_r+0xb6>
 800697e:	602f      	str	r7, [r5, #0]
 8006980:	e7b1      	b.n	80068e6 <__sflush_r+0x1a>
 8006982:	89a3      	ldrh	r3, [r4, #12]
 8006984:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006988:	81a3      	strh	r3, [r4, #12]
 800698a:	e7ad      	b.n	80068e8 <__sflush_r+0x1c>
 800698c:	690f      	ldr	r7, [r1, #16]
 800698e:	2f00      	cmp	r7, #0
 8006990:	d0a9      	beq.n	80068e6 <__sflush_r+0x1a>
 8006992:	0793      	lsls	r3, r2, #30
 8006994:	680e      	ldr	r6, [r1, #0]
 8006996:	bf08      	it	eq
 8006998:	694b      	ldreq	r3, [r1, #20]
 800699a:	600f      	str	r7, [r1, #0]
 800699c:	bf18      	it	ne
 800699e:	2300      	movne	r3, #0
 80069a0:	eba6 0807 	sub.w	r8, r6, r7
 80069a4:	608b      	str	r3, [r1, #8]
 80069a6:	f1b8 0f00 	cmp.w	r8, #0
 80069aa:	dd9c      	ble.n	80068e6 <__sflush_r+0x1a>
 80069ac:	4643      	mov	r3, r8
 80069ae:	463a      	mov	r2, r7
 80069b0:	6a21      	ldr	r1, [r4, #32]
 80069b2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80069b4:	4628      	mov	r0, r5
 80069b6:	47b0      	blx	r6
 80069b8:	2800      	cmp	r0, #0
 80069ba:	dc06      	bgt.n	80069ca <__sflush_r+0xfe>
 80069bc:	89a3      	ldrh	r3, [r4, #12]
 80069be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80069c2:	81a3      	strh	r3, [r4, #12]
 80069c4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80069c8:	e78e      	b.n	80068e8 <__sflush_r+0x1c>
 80069ca:	4407      	add	r7, r0
 80069cc:	eba8 0800 	sub.w	r8, r8, r0
 80069d0:	e7e9      	b.n	80069a6 <__sflush_r+0xda>
 80069d2:	bf00      	nop
 80069d4:	20400001 	.word	0x20400001

080069d8 <_fflush_r>:
 80069d8:	b538      	push	{r3, r4, r5, lr}
 80069da:	690b      	ldr	r3, [r1, #16]
 80069dc:	4605      	mov	r5, r0
 80069de:	460c      	mov	r4, r1
 80069e0:	b1db      	cbz	r3, 8006a1a <_fflush_r+0x42>
 80069e2:	b118      	cbz	r0, 80069ec <_fflush_r+0x14>
 80069e4:	6983      	ldr	r3, [r0, #24]
 80069e6:	b90b      	cbnz	r3, 80069ec <_fflush_r+0x14>
 80069e8:	f7ff f8be 	bl	8005b68 <__sinit>
 80069ec:	4b0c      	ldr	r3, [pc, #48]	; (8006a20 <_fflush_r+0x48>)
 80069ee:	429c      	cmp	r4, r3
 80069f0:	d109      	bne.n	8006a06 <_fflush_r+0x2e>
 80069f2:	686c      	ldr	r4, [r5, #4]
 80069f4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80069f8:	b17b      	cbz	r3, 8006a1a <_fflush_r+0x42>
 80069fa:	4621      	mov	r1, r4
 80069fc:	4628      	mov	r0, r5
 80069fe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006a02:	f7ff bf63 	b.w	80068cc <__sflush_r>
 8006a06:	4b07      	ldr	r3, [pc, #28]	; (8006a24 <_fflush_r+0x4c>)
 8006a08:	429c      	cmp	r4, r3
 8006a0a:	d101      	bne.n	8006a10 <_fflush_r+0x38>
 8006a0c:	68ac      	ldr	r4, [r5, #8]
 8006a0e:	e7f1      	b.n	80069f4 <_fflush_r+0x1c>
 8006a10:	4b05      	ldr	r3, [pc, #20]	; (8006a28 <_fflush_r+0x50>)
 8006a12:	429c      	cmp	r4, r3
 8006a14:	bf08      	it	eq
 8006a16:	68ec      	ldreq	r4, [r5, #12]
 8006a18:	e7ec      	b.n	80069f4 <_fflush_r+0x1c>
 8006a1a:	2000      	movs	r0, #0
 8006a1c:	bd38      	pop	{r3, r4, r5, pc}
 8006a1e:	bf00      	nop
 8006a20:	08006e88 	.word	0x08006e88
 8006a24:	08006ea8 	.word	0x08006ea8
 8006a28:	08006e68 	.word	0x08006e68

08006a2c <_lseek_r>:
 8006a2c:	b538      	push	{r3, r4, r5, lr}
 8006a2e:	4c07      	ldr	r4, [pc, #28]	; (8006a4c <_lseek_r+0x20>)
 8006a30:	4605      	mov	r5, r0
 8006a32:	4608      	mov	r0, r1
 8006a34:	4611      	mov	r1, r2
 8006a36:	2200      	movs	r2, #0
 8006a38:	6022      	str	r2, [r4, #0]
 8006a3a:	461a      	mov	r2, r3
 8006a3c:	f7fc fd9d 	bl	800357a <_lseek>
 8006a40:	1c43      	adds	r3, r0, #1
 8006a42:	d102      	bne.n	8006a4a <_lseek_r+0x1e>
 8006a44:	6823      	ldr	r3, [r4, #0]
 8006a46:	b103      	cbz	r3, 8006a4a <_lseek_r+0x1e>
 8006a48:	602b      	str	r3, [r5, #0]
 8006a4a:	bd38      	pop	{r3, r4, r5, pc}
 8006a4c:	20000200 	.word	0x20000200

08006a50 <__swhatbuf_r>:
 8006a50:	b570      	push	{r4, r5, r6, lr}
 8006a52:	460e      	mov	r6, r1
 8006a54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006a58:	2900      	cmp	r1, #0
 8006a5a:	b096      	sub	sp, #88	; 0x58
 8006a5c:	4614      	mov	r4, r2
 8006a5e:	461d      	mov	r5, r3
 8006a60:	da07      	bge.n	8006a72 <__swhatbuf_r+0x22>
 8006a62:	2300      	movs	r3, #0
 8006a64:	602b      	str	r3, [r5, #0]
 8006a66:	89b3      	ldrh	r3, [r6, #12]
 8006a68:	061a      	lsls	r2, r3, #24
 8006a6a:	d410      	bmi.n	8006a8e <__swhatbuf_r+0x3e>
 8006a6c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006a70:	e00e      	b.n	8006a90 <__swhatbuf_r+0x40>
 8006a72:	466a      	mov	r2, sp
 8006a74:	f000 f884 	bl	8006b80 <_fstat_r>
 8006a78:	2800      	cmp	r0, #0
 8006a7a:	dbf2      	blt.n	8006a62 <__swhatbuf_r+0x12>
 8006a7c:	9a01      	ldr	r2, [sp, #4]
 8006a7e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006a82:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006a86:	425a      	negs	r2, r3
 8006a88:	415a      	adcs	r2, r3
 8006a8a:	602a      	str	r2, [r5, #0]
 8006a8c:	e7ee      	b.n	8006a6c <__swhatbuf_r+0x1c>
 8006a8e:	2340      	movs	r3, #64	; 0x40
 8006a90:	2000      	movs	r0, #0
 8006a92:	6023      	str	r3, [r4, #0]
 8006a94:	b016      	add	sp, #88	; 0x58
 8006a96:	bd70      	pop	{r4, r5, r6, pc}

08006a98 <__smakebuf_r>:
 8006a98:	898b      	ldrh	r3, [r1, #12]
 8006a9a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006a9c:	079d      	lsls	r5, r3, #30
 8006a9e:	4606      	mov	r6, r0
 8006aa0:	460c      	mov	r4, r1
 8006aa2:	d507      	bpl.n	8006ab4 <__smakebuf_r+0x1c>
 8006aa4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006aa8:	6023      	str	r3, [r4, #0]
 8006aaa:	6123      	str	r3, [r4, #16]
 8006aac:	2301      	movs	r3, #1
 8006aae:	6163      	str	r3, [r4, #20]
 8006ab0:	b002      	add	sp, #8
 8006ab2:	bd70      	pop	{r4, r5, r6, pc}
 8006ab4:	ab01      	add	r3, sp, #4
 8006ab6:	466a      	mov	r2, sp
 8006ab8:	f7ff ffca 	bl	8006a50 <__swhatbuf_r>
 8006abc:	9900      	ldr	r1, [sp, #0]
 8006abe:	4605      	mov	r5, r0
 8006ac0:	4630      	mov	r0, r6
 8006ac2:	f7ff fc33 	bl	800632c <_malloc_r>
 8006ac6:	b948      	cbnz	r0, 8006adc <__smakebuf_r+0x44>
 8006ac8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006acc:	059a      	lsls	r2, r3, #22
 8006ace:	d4ef      	bmi.n	8006ab0 <__smakebuf_r+0x18>
 8006ad0:	f023 0303 	bic.w	r3, r3, #3
 8006ad4:	f043 0302 	orr.w	r3, r3, #2
 8006ad8:	81a3      	strh	r3, [r4, #12]
 8006ada:	e7e3      	b.n	8006aa4 <__smakebuf_r+0xc>
 8006adc:	4b0d      	ldr	r3, [pc, #52]	; (8006b14 <__smakebuf_r+0x7c>)
 8006ade:	62b3      	str	r3, [r6, #40]	; 0x28
 8006ae0:	89a3      	ldrh	r3, [r4, #12]
 8006ae2:	6020      	str	r0, [r4, #0]
 8006ae4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ae8:	81a3      	strh	r3, [r4, #12]
 8006aea:	9b00      	ldr	r3, [sp, #0]
 8006aec:	6163      	str	r3, [r4, #20]
 8006aee:	9b01      	ldr	r3, [sp, #4]
 8006af0:	6120      	str	r0, [r4, #16]
 8006af2:	b15b      	cbz	r3, 8006b0c <__smakebuf_r+0x74>
 8006af4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006af8:	4630      	mov	r0, r6
 8006afa:	f000 f853 	bl	8006ba4 <_isatty_r>
 8006afe:	b128      	cbz	r0, 8006b0c <__smakebuf_r+0x74>
 8006b00:	89a3      	ldrh	r3, [r4, #12]
 8006b02:	f023 0303 	bic.w	r3, r3, #3
 8006b06:	f043 0301 	orr.w	r3, r3, #1
 8006b0a:	81a3      	strh	r3, [r4, #12]
 8006b0c:	89a3      	ldrh	r3, [r4, #12]
 8006b0e:	431d      	orrs	r5, r3
 8006b10:	81a5      	strh	r5, [r4, #12]
 8006b12:	e7cd      	b.n	8006ab0 <__smakebuf_r+0x18>
 8006b14:	08005b31 	.word	0x08005b31

08006b18 <__ascii_mbtowc>:
 8006b18:	b082      	sub	sp, #8
 8006b1a:	b901      	cbnz	r1, 8006b1e <__ascii_mbtowc+0x6>
 8006b1c:	a901      	add	r1, sp, #4
 8006b1e:	b142      	cbz	r2, 8006b32 <__ascii_mbtowc+0x1a>
 8006b20:	b14b      	cbz	r3, 8006b36 <__ascii_mbtowc+0x1e>
 8006b22:	7813      	ldrb	r3, [r2, #0]
 8006b24:	600b      	str	r3, [r1, #0]
 8006b26:	7812      	ldrb	r2, [r2, #0]
 8006b28:	1c10      	adds	r0, r2, #0
 8006b2a:	bf18      	it	ne
 8006b2c:	2001      	movne	r0, #1
 8006b2e:	b002      	add	sp, #8
 8006b30:	4770      	bx	lr
 8006b32:	4610      	mov	r0, r2
 8006b34:	e7fb      	b.n	8006b2e <__ascii_mbtowc+0x16>
 8006b36:	f06f 0001 	mvn.w	r0, #1
 8006b3a:	e7f8      	b.n	8006b2e <__ascii_mbtowc+0x16>

08006b3c <__malloc_lock>:
 8006b3c:	4770      	bx	lr

08006b3e <__malloc_unlock>:
 8006b3e:	4770      	bx	lr

08006b40 <_read_r>:
 8006b40:	b538      	push	{r3, r4, r5, lr}
 8006b42:	4c07      	ldr	r4, [pc, #28]	; (8006b60 <_read_r+0x20>)
 8006b44:	4605      	mov	r5, r0
 8006b46:	4608      	mov	r0, r1
 8006b48:	4611      	mov	r1, r2
 8006b4a:	2200      	movs	r2, #0
 8006b4c:	6022      	str	r2, [r4, #0]
 8006b4e:	461a      	mov	r2, r3
 8006b50:	f7fc fcb3 	bl	80034ba <_read>
 8006b54:	1c43      	adds	r3, r0, #1
 8006b56:	d102      	bne.n	8006b5e <_read_r+0x1e>
 8006b58:	6823      	ldr	r3, [r4, #0]
 8006b5a:	b103      	cbz	r3, 8006b5e <_read_r+0x1e>
 8006b5c:	602b      	str	r3, [r5, #0]
 8006b5e:	bd38      	pop	{r3, r4, r5, pc}
 8006b60:	20000200 	.word	0x20000200

08006b64 <__ascii_wctomb>:
 8006b64:	b149      	cbz	r1, 8006b7a <__ascii_wctomb+0x16>
 8006b66:	2aff      	cmp	r2, #255	; 0xff
 8006b68:	bf85      	ittet	hi
 8006b6a:	238a      	movhi	r3, #138	; 0x8a
 8006b6c:	6003      	strhi	r3, [r0, #0]
 8006b6e:	700a      	strbls	r2, [r1, #0]
 8006b70:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8006b74:	bf98      	it	ls
 8006b76:	2001      	movls	r0, #1
 8006b78:	4770      	bx	lr
 8006b7a:	4608      	mov	r0, r1
 8006b7c:	4770      	bx	lr
	...

08006b80 <_fstat_r>:
 8006b80:	b538      	push	{r3, r4, r5, lr}
 8006b82:	4c07      	ldr	r4, [pc, #28]	; (8006ba0 <_fstat_r+0x20>)
 8006b84:	2300      	movs	r3, #0
 8006b86:	4605      	mov	r5, r0
 8006b88:	4608      	mov	r0, r1
 8006b8a:	4611      	mov	r1, r2
 8006b8c:	6023      	str	r3, [r4, #0]
 8006b8e:	f7fc fcd9 	bl	8003544 <_fstat>
 8006b92:	1c43      	adds	r3, r0, #1
 8006b94:	d102      	bne.n	8006b9c <_fstat_r+0x1c>
 8006b96:	6823      	ldr	r3, [r4, #0]
 8006b98:	b103      	cbz	r3, 8006b9c <_fstat_r+0x1c>
 8006b9a:	602b      	str	r3, [r5, #0]
 8006b9c:	bd38      	pop	{r3, r4, r5, pc}
 8006b9e:	bf00      	nop
 8006ba0:	20000200 	.word	0x20000200

08006ba4 <_isatty_r>:
 8006ba4:	b538      	push	{r3, r4, r5, lr}
 8006ba6:	4c06      	ldr	r4, [pc, #24]	; (8006bc0 <_isatty_r+0x1c>)
 8006ba8:	2300      	movs	r3, #0
 8006baa:	4605      	mov	r5, r0
 8006bac:	4608      	mov	r0, r1
 8006bae:	6023      	str	r3, [r4, #0]
 8006bb0:	f7fc fcd8 	bl	8003564 <_isatty>
 8006bb4:	1c43      	adds	r3, r0, #1
 8006bb6:	d102      	bne.n	8006bbe <_isatty_r+0x1a>
 8006bb8:	6823      	ldr	r3, [r4, #0]
 8006bba:	b103      	cbz	r3, 8006bbe <_isatty_r+0x1a>
 8006bbc:	602b      	str	r3, [r5, #0]
 8006bbe:	bd38      	pop	{r3, r4, r5, pc}
 8006bc0:	20000200 	.word	0x20000200

08006bc4 <sqrt>:
 8006bc4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006bc8:	ed2d 8b02 	vpush	{d8}
 8006bcc:	b08b      	sub	sp, #44	; 0x2c
 8006bce:	ec55 4b10 	vmov	r4, r5, d0
 8006bd2:	f000 f851 	bl	8006c78 <__ieee754_sqrt>
 8006bd6:	4b26      	ldr	r3, [pc, #152]	; (8006c70 <sqrt+0xac>)
 8006bd8:	eeb0 8a40 	vmov.f32	s16, s0
 8006bdc:	eef0 8a60 	vmov.f32	s17, s1
 8006be0:	f993 6000 	ldrsb.w	r6, [r3]
 8006be4:	1c73      	adds	r3, r6, #1
 8006be6:	d02a      	beq.n	8006c3e <sqrt+0x7a>
 8006be8:	4622      	mov	r2, r4
 8006bea:	462b      	mov	r3, r5
 8006bec:	4620      	mov	r0, r4
 8006bee:	4629      	mov	r1, r5
 8006bf0:	f7f9 ffa4 	bl	8000b3c <__aeabi_dcmpun>
 8006bf4:	4607      	mov	r7, r0
 8006bf6:	bb10      	cbnz	r0, 8006c3e <sqrt+0x7a>
 8006bf8:	f04f 0800 	mov.w	r8, #0
 8006bfc:	f04f 0900 	mov.w	r9, #0
 8006c00:	4642      	mov	r2, r8
 8006c02:	464b      	mov	r3, r9
 8006c04:	4620      	mov	r0, r4
 8006c06:	4629      	mov	r1, r5
 8006c08:	f7f9 ff70 	bl	8000aec <__aeabi_dcmplt>
 8006c0c:	b1b8      	cbz	r0, 8006c3e <sqrt+0x7a>
 8006c0e:	2301      	movs	r3, #1
 8006c10:	9300      	str	r3, [sp, #0]
 8006c12:	4b18      	ldr	r3, [pc, #96]	; (8006c74 <sqrt+0xb0>)
 8006c14:	9301      	str	r3, [sp, #4]
 8006c16:	9708      	str	r7, [sp, #32]
 8006c18:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8006c1c:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8006c20:	b9b6      	cbnz	r6, 8006c50 <sqrt+0x8c>
 8006c22:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8006c26:	4668      	mov	r0, sp
 8006c28:	f000 f8d6 	bl	8006dd8 <matherr>
 8006c2c:	b1d0      	cbz	r0, 8006c64 <sqrt+0xa0>
 8006c2e:	9b08      	ldr	r3, [sp, #32]
 8006c30:	b11b      	cbz	r3, 8006c3a <sqrt+0x76>
 8006c32:	f7fd fc6f 	bl	8004514 <__errno>
 8006c36:	9b08      	ldr	r3, [sp, #32]
 8006c38:	6003      	str	r3, [r0, #0]
 8006c3a:	ed9d 8b06 	vldr	d8, [sp, #24]
 8006c3e:	eeb0 0a48 	vmov.f32	s0, s16
 8006c42:	eef0 0a68 	vmov.f32	s1, s17
 8006c46:	b00b      	add	sp, #44	; 0x2c
 8006c48:	ecbd 8b02 	vpop	{d8}
 8006c4c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006c50:	4642      	mov	r2, r8
 8006c52:	464b      	mov	r3, r9
 8006c54:	4640      	mov	r0, r8
 8006c56:	4649      	mov	r1, r9
 8006c58:	f7f9 fe00 	bl	800085c <__aeabi_ddiv>
 8006c5c:	2e02      	cmp	r6, #2
 8006c5e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8006c62:	d1e0      	bne.n	8006c26 <sqrt+0x62>
 8006c64:	f7fd fc56 	bl	8004514 <__errno>
 8006c68:	2321      	movs	r3, #33	; 0x21
 8006c6a:	6003      	str	r3, [r0, #0]
 8006c6c:	e7df      	b.n	8006c2e <sqrt+0x6a>
 8006c6e:	bf00      	nop
 8006c70:	200001d4 	.word	0x200001d4
 8006c74:	080070e0 	.word	0x080070e0

08006c78 <__ieee754_sqrt>:
 8006c78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006c7c:	4955      	ldr	r1, [pc, #340]	; (8006dd4 <__ieee754_sqrt+0x15c>)
 8006c7e:	ec55 4b10 	vmov	r4, r5, d0
 8006c82:	43a9      	bics	r1, r5
 8006c84:	462b      	mov	r3, r5
 8006c86:	462a      	mov	r2, r5
 8006c88:	d112      	bne.n	8006cb0 <__ieee754_sqrt+0x38>
 8006c8a:	ee10 2a10 	vmov	r2, s0
 8006c8e:	ee10 0a10 	vmov	r0, s0
 8006c92:	4629      	mov	r1, r5
 8006c94:	f7f9 fcb8 	bl	8000608 <__aeabi_dmul>
 8006c98:	4602      	mov	r2, r0
 8006c9a:	460b      	mov	r3, r1
 8006c9c:	4620      	mov	r0, r4
 8006c9e:	4629      	mov	r1, r5
 8006ca0:	f7f9 fafc 	bl	800029c <__adddf3>
 8006ca4:	4604      	mov	r4, r0
 8006ca6:	460d      	mov	r5, r1
 8006ca8:	ec45 4b10 	vmov	d0, r4, r5
 8006cac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006cb0:	2d00      	cmp	r5, #0
 8006cb2:	ee10 0a10 	vmov	r0, s0
 8006cb6:	4621      	mov	r1, r4
 8006cb8:	dc0f      	bgt.n	8006cda <__ieee754_sqrt+0x62>
 8006cba:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8006cbe:	4330      	orrs	r0, r6
 8006cc0:	d0f2      	beq.n	8006ca8 <__ieee754_sqrt+0x30>
 8006cc2:	b155      	cbz	r5, 8006cda <__ieee754_sqrt+0x62>
 8006cc4:	ee10 2a10 	vmov	r2, s0
 8006cc8:	4620      	mov	r0, r4
 8006cca:	4629      	mov	r1, r5
 8006ccc:	f7f9 fae4 	bl	8000298 <__aeabi_dsub>
 8006cd0:	4602      	mov	r2, r0
 8006cd2:	460b      	mov	r3, r1
 8006cd4:	f7f9 fdc2 	bl	800085c <__aeabi_ddiv>
 8006cd8:	e7e4      	b.n	8006ca4 <__ieee754_sqrt+0x2c>
 8006cda:	151b      	asrs	r3, r3, #20
 8006cdc:	d073      	beq.n	8006dc6 <__ieee754_sqrt+0x14e>
 8006cde:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8006ce2:	07dd      	lsls	r5, r3, #31
 8006ce4:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8006ce8:	bf48      	it	mi
 8006cea:	0fc8      	lsrmi	r0, r1, #31
 8006cec:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8006cf0:	bf44      	itt	mi
 8006cf2:	0049      	lslmi	r1, r1, #1
 8006cf4:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 8006cf8:	2500      	movs	r5, #0
 8006cfa:	1058      	asrs	r0, r3, #1
 8006cfc:	0fcb      	lsrs	r3, r1, #31
 8006cfe:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 8006d02:	0049      	lsls	r1, r1, #1
 8006d04:	2316      	movs	r3, #22
 8006d06:	462c      	mov	r4, r5
 8006d08:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 8006d0c:	19a7      	adds	r7, r4, r6
 8006d0e:	4297      	cmp	r7, r2
 8006d10:	bfde      	ittt	le
 8006d12:	19bc      	addle	r4, r7, r6
 8006d14:	1bd2      	suble	r2, r2, r7
 8006d16:	19ad      	addle	r5, r5, r6
 8006d18:	0fcf      	lsrs	r7, r1, #31
 8006d1a:	3b01      	subs	r3, #1
 8006d1c:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 8006d20:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8006d24:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8006d28:	d1f0      	bne.n	8006d0c <__ieee754_sqrt+0x94>
 8006d2a:	f04f 0c20 	mov.w	ip, #32
 8006d2e:	469e      	mov	lr, r3
 8006d30:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8006d34:	42a2      	cmp	r2, r4
 8006d36:	eb06 070e 	add.w	r7, r6, lr
 8006d3a:	dc02      	bgt.n	8006d42 <__ieee754_sqrt+0xca>
 8006d3c:	d112      	bne.n	8006d64 <__ieee754_sqrt+0xec>
 8006d3e:	428f      	cmp	r7, r1
 8006d40:	d810      	bhi.n	8006d64 <__ieee754_sqrt+0xec>
 8006d42:	2f00      	cmp	r7, #0
 8006d44:	eb07 0e06 	add.w	lr, r7, r6
 8006d48:	da42      	bge.n	8006dd0 <__ieee754_sqrt+0x158>
 8006d4a:	f1be 0f00 	cmp.w	lr, #0
 8006d4e:	db3f      	blt.n	8006dd0 <__ieee754_sqrt+0x158>
 8006d50:	f104 0801 	add.w	r8, r4, #1
 8006d54:	1b12      	subs	r2, r2, r4
 8006d56:	428f      	cmp	r7, r1
 8006d58:	bf88      	it	hi
 8006d5a:	f102 32ff 	addhi.w	r2, r2, #4294967295	; 0xffffffff
 8006d5e:	1bc9      	subs	r1, r1, r7
 8006d60:	4433      	add	r3, r6
 8006d62:	4644      	mov	r4, r8
 8006d64:	0052      	lsls	r2, r2, #1
 8006d66:	f1bc 0c01 	subs.w	ip, ip, #1
 8006d6a:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 8006d6e:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8006d72:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8006d76:	d1dd      	bne.n	8006d34 <__ieee754_sqrt+0xbc>
 8006d78:	430a      	orrs	r2, r1
 8006d7a:	d006      	beq.n	8006d8a <__ieee754_sqrt+0x112>
 8006d7c:	1c5c      	adds	r4, r3, #1
 8006d7e:	bf13      	iteet	ne
 8006d80:	3301      	addne	r3, #1
 8006d82:	3501      	addeq	r5, #1
 8006d84:	4663      	moveq	r3, ip
 8006d86:	f023 0301 	bicne.w	r3, r3, #1
 8006d8a:	106a      	asrs	r2, r5, #1
 8006d8c:	085b      	lsrs	r3, r3, #1
 8006d8e:	07e9      	lsls	r1, r5, #31
 8006d90:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8006d94:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8006d98:	bf48      	it	mi
 8006d9a:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8006d9e:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 8006da2:	461c      	mov	r4, r3
 8006da4:	e780      	b.n	8006ca8 <__ieee754_sqrt+0x30>
 8006da6:	0aca      	lsrs	r2, r1, #11
 8006da8:	3815      	subs	r0, #21
 8006daa:	0549      	lsls	r1, r1, #21
 8006dac:	2a00      	cmp	r2, #0
 8006dae:	d0fa      	beq.n	8006da6 <__ieee754_sqrt+0x12e>
 8006db0:	02d6      	lsls	r6, r2, #11
 8006db2:	d50a      	bpl.n	8006dca <__ieee754_sqrt+0x152>
 8006db4:	f1c3 0420 	rsb	r4, r3, #32
 8006db8:	fa21 f404 	lsr.w	r4, r1, r4
 8006dbc:	1e5d      	subs	r5, r3, #1
 8006dbe:	4099      	lsls	r1, r3
 8006dc0:	4322      	orrs	r2, r4
 8006dc2:	1b43      	subs	r3, r0, r5
 8006dc4:	e78b      	b.n	8006cde <__ieee754_sqrt+0x66>
 8006dc6:	4618      	mov	r0, r3
 8006dc8:	e7f0      	b.n	8006dac <__ieee754_sqrt+0x134>
 8006dca:	0052      	lsls	r2, r2, #1
 8006dcc:	3301      	adds	r3, #1
 8006dce:	e7ef      	b.n	8006db0 <__ieee754_sqrt+0x138>
 8006dd0:	46a0      	mov	r8, r4
 8006dd2:	e7bf      	b.n	8006d54 <__ieee754_sqrt+0xdc>
 8006dd4:	7ff00000 	.word	0x7ff00000

08006dd8 <matherr>:
 8006dd8:	2000      	movs	r0, #0
 8006dda:	4770      	bx	lr

08006ddc <_init>:
 8006ddc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006dde:	bf00      	nop
 8006de0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006de2:	bc08      	pop	{r3}
 8006de4:	469e      	mov	lr, r3
 8006de6:	4770      	bx	lr

08006de8 <_fini>:
 8006de8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006dea:	bf00      	nop
 8006dec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006dee:	bc08      	pop	{r3}
 8006df0:	469e      	mov	lr, r3
 8006df2:	4770      	bx	lr
